<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sass Blog</title>
  <id>https://sass-lang.su/blog</id>
  <link href="https://sass-lang.su/blog"/>
  <link href="https://sass-lang.su/feed.xml" rel="self"/>
  <updated>2021-08-05T23:30:00+00:00</updated>
  <entry>
    <title>Request for Comments: New JS API</title>
    <link href="https://sass-lang.su/blog/request-for-comments-new-js-api" rel="alternate"/>
    <id>https://sass-lang.su/blog/request-for-comments-new-js-api</id>
    <published>2021-08-05T23:30:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m excited to officially unveil something that&amp;rsquo;s been in the works for quite a
while now: a (proposal for a) brand new JavaScript API for Sass. This API has
been redesigned from the ground up based on lessons learned from both the Node
Sass API and various other historical Sass APIs in other languages through the
years, and it addresses many of the shortcomings of the existing API.&lt;/p&gt;

&lt;p&gt;The API has four main components, all of which I&amp;rsquo;ll cover in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#compilation"&gt;The core compilation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loggers"&gt;The logger API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importers"&gt;The importer API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;The function API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you read on, remember that this API is still just a proposal. We want to hear
from you, our users, whether it meets your needs and how we can improve it
before we lock it in to a full release. So go ahead and make your voices known
&lt;a href="https://github.com/sass/sass/issues/new"&gt;on the issue tracker&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id="why-a-new-api"&gt;
&lt;a class="anchor" href="#why-a-new-api"&gt;&lt;span class="visuallyhidden"&gt;Why a New API? permalink&lt;/span&gt;&lt;/a&gt;Why a New API?&lt;/h2&gt;

&lt;p&gt;The existing JavaScript API is showing its age. It predates Dart Sass, having
been originally designed for the &lt;code&gt;node-sass&lt;/code&gt; package, which wrapped the
now-&lt;a href="/libsass"&gt;deprecated&lt;/a&gt; implementation. (That&amp;rsquo;s why we call it the &amp;ldquo;Node Sass
API&amp;rdquo;!) It grew organically and often messily along with LibSass, and ended up
with more than a few awkward legacy behaviors. Many of these behaviors are more
of a pain for implementation than anything else, but a few of them made life
quite difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The importer API was built around file paths rather than URLs, and was tightly
coupled to the physical filesystem. This made it impossible to override &lt;em&gt;all&lt;/em&gt;
file-based loads and present a fully virtual filesystem, and caused custom
Node importers to interact poorly with the new &lt;a href="https://sass-lang.com/blog/the-module-system-is-launched"&gt;module system&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function API was built around mutable value objects, which runs counter to
Sass&amp;rsquo;s immutable nature. It also provided no utility methods (such as looking
up a key in a map) to make it easier to implement idiomatic custom functions,
and didn&amp;rsquo;t provide access to crucial information about values such as whether
strings were quoted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the asynchronous functions were callback-based rather than
promise-based.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new API addresses these issues and more with a modern, idiomatic API that
will make working with Sass from JS a breeze.&lt;/p&gt;

&lt;h2 id="compilation"&gt;
&lt;a class="anchor" href="#compilation"&gt;&lt;span class="visuallyhidden"&gt;Compilation permalink&lt;/span&gt;&lt;/a&gt;Compilation&lt;/h2&gt;

&lt;p&gt;At the heart of the API are four functions that do the actual Sass compilation,
two synchronous and two asynchronous. They&amp;rsquo;re presented here in TypeScript
syntax to clarify exactly what they take and return, but you can always call
them from plain JS:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'sync'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;StringOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'sync'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'async'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;StringOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'async'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;compile()&lt;/code&gt; and &lt;code&gt;compileAsync()&lt;/code&gt; functions load a Sass file from a path on
disk, whereas &lt;code&gt;compileString()&lt;/code&gt; and &lt;code&gt;compileStringAsync()&lt;/code&gt; compile Sass source
code passed in as a string. All these take the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alertAscii&lt;/code&gt;: Whether errors and warnings should use only ASCII characters (as
opposed to, for example, Unicode box-drawing characters).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alertColor&lt;/code&gt;: Whether errors and warnings should use terminal colors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadPaths&lt;/code&gt;: A list of file paths to use to look up files to load, just like
&lt;code&gt;includePaths&lt;/code&gt; in the old API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importers&lt;/code&gt;: A list of &lt;a href="#importers"&gt;custom importers&lt;/a&gt; to use to load Sass
source files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt;: An object whose keys are Sass function signatures and whose
values are &lt;a href="#functions"&gt;custom functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quietDeps&lt;/code&gt;: Whether to silence deprecation warnings in dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logger&lt;/code&gt;: The &lt;a href="#loggers"&gt;custom logger&lt;/a&gt; to use to emit warnings and debug
messages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMap&lt;/code&gt;: Whether to generate a source map during compilation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The output style, &lt;code&gt;&amp;#39;compressed&amp;#39;&lt;/code&gt; or &lt;code&gt;&amp;#39;expanded&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: Whether to emit every deprecation warning encountered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;compileString()&lt;/code&gt; and &lt;code&gt;compileStringAsync()&lt;/code&gt; functions take a few additional
options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax&lt;/code&gt;: The syntax of the file, &lt;code&gt;&amp;#39;scss&amp;#39;&lt;/code&gt; (the default), &lt;code&gt;&amp;#39;indented&amp;#39;&lt;/code&gt;, or
&lt;code&gt;&amp;#39;css&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The &lt;a href="#canonicalizing"&gt;canonical URL&lt;/a&gt; of the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importer&lt;/code&gt;: The &lt;a href="#importers"&gt;custom importer&lt;/a&gt; to treat as the file&amp;rsquo;s source.
If this is passed, this importer will be used to resolve relative loads from
this stylesheet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these functions return an object with the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;: The compiled CSS, as a string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadedUrls&lt;/code&gt;: All the URLs loaded during the compilation, in no particular
order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMap&lt;/code&gt;: The source map for the file if &lt;code&gt;sourceMap: true&lt;/code&gt; was passed, as
a decoded object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with the Node Sass API, the synchronous functions will be substantially
faster than their asynchronous counterparts. Unfortunately the new API will not
support the &lt;code&gt;fibers&lt;/code&gt; option for speeding up asynchronous compilation, since &lt;a href="/blog/node-fibers-discontinued"&gt;the
&lt;code&gt;fibers&lt;/code&gt; package has been discontinued&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="loggers"&gt;
&lt;a class="anchor" href="#loggers"&gt;&lt;span class="visuallyhidden"&gt;Loggers permalink&lt;/span&gt;&lt;/a&gt;Loggers&lt;/h2&gt;

&lt;p&gt;The logger API gives you more fine-grained control over how and when warnings
and debug messages are emitted. Unlike other aspects of this proposal, a
&lt;code&gt;logger&lt;/code&gt; option will also be added to the &lt;em&gt;old&lt;/em&gt; API to allow you to control your
messages there without needing to upgrade to the new API immediately.&lt;/p&gt;

&lt;p&gt;A logger implements the following interface:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;deprecation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;SourceSpan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SourceSpan&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;warn&lt;/code&gt; function handles warnings, including both warnings from the compiler
itself and from &lt;code&gt;@warn&lt;/code&gt; rules. It&amp;rsquo;s passed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The warning message&lt;/li&gt;
&lt;li&gt;A flag indicating whether it&amp;rsquo;s specifically a deprecation warning&lt;/li&gt;
&lt;li&gt;A span indicating where the warning was located, if it comes from a specific
location&lt;/li&gt;
&lt;li&gt;The Sass stack trace at the point at which the warning was encountered, if it
was encountered during execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; function handles only &lt;code&gt;@debug&lt;/code&gt; rules, and is just passed the message
and the rule&amp;rsquo;s span. For more information on the &lt;code&gt;SourceSpan&lt;/code&gt; type, see &lt;a href="https://github.com/sass/sass/tree/main/proposal/js-logger.d.ts"&gt;the
Logger proposal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sass will also provide a built-in logger, &lt;code&gt;Logger.silent&lt;/code&gt;, that never emits any
messages. This will allow you to easily run Sass in &amp;ldquo;quiet mode&amp;rdquo; where no
warnings are ever surfaced.&lt;/p&gt;

&lt;h2 id="importers"&gt;
&lt;a class="anchor" href="#importers"&gt;&lt;span class="visuallyhidden"&gt;Importers permalink&lt;/span&gt;&lt;/a&gt;Importers&lt;/h2&gt;

&lt;p&gt;Rather than modeling importers as single-function callbacks, the new API models
them as objects that expose two methods: one that &lt;em&gt;canonicalizes&lt;/em&gt; a URL, and one
that &lt;em&gt;loads&lt;/em&gt; a canonical URL.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importers for compileAsync() and compileStringAsync() are the same, except&lt;/span&gt;
&lt;span class="c1"&gt;// they may return Promises as well.&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Importer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;canonicalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;fromImport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canonicalUrl&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImporterResult&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that even stylesheets that are loaded directly from the filesystem through
&lt;code&gt;compile()&lt;/code&gt; or &lt;code&gt;loadPaths&lt;/code&gt; are treated as though they&amp;rsquo;re loaded by an importer.
This built-in filesystem importer canonicalizes all paths to &lt;code&gt;file:&lt;/code&gt; URLs, and
loads those URLs from the physical filesystem.&lt;/p&gt;

&lt;h3 id="canonicalizing"&gt;
&lt;a class="anchor" href="#canonicalizing"&gt;&lt;span class="visuallyhidden"&gt;Canonicalizing permalink&lt;/span&gt;&lt;/a&gt;Canonicalizing&lt;/h3&gt;

&lt;p&gt;The first step determines the canonical URL for a stylesheet. Each stylesheet
has exactly one canonical URL that in turn refers to exactly one stylesheet. The
canonical URL must be absolute, including a scheme, but the specific structure
is up to the importer. In most cases, the stylesheet in question will exist on
disk and the importer will just return a &lt;code&gt;file:&lt;/code&gt; URL for it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;canonicalize()&lt;/code&gt; method takes a URL string that may be either relative or
absolute. If the importer recognizes that URL, it returns a corresponding
absolute URL (including a scheme). This is the &lt;em&gt;canonical URL&lt;/em&gt; for the
stylesheet in question. Although the input URL may omit a file extension or
an initial underscore, the canonical URL must be fully resolved.&lt;/p&gt;

&lt;p&gt;For a stylesheet that&amp;rsquo;s loaded from the filesystem, the canonical URL will be
the absolute &lt;code&gt;file:&lt;/code&gt; URL of the physical file on disk. If it&amp;rsquo;s generated
in-memory, the importer should choose a custom URL scheme to guarantee that
its canonical URLs don&amp;rsquo;t conflict with any other importer&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;For example, if you&amp;rsquo;re loading Sass files from a database, you might use the
scheme &lt;code&gt;db:&lt;/code&gt;. The canonical URL for a stylesheet associated with key &lt;code&gt;styles&lt;/code&gt;
in the database might be &lt;code&gt;db:styles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function also takes a &lt;code&gt;fromImport&lt;/code&gt; option that indicates whether the
importer is being invoked from an &lt;code&gt;@import&lt;/code&gt; rule (as opposed to &lt;code&gt;@use&lt;/code&gt;,
&lt;code&gt;@forward&lt;/code&gt;, or &lt;code&gt;meta.load-css()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Having a canonical URL for each stylesheet allows Sass to ensure that the
same stylesheet isn&amp;rsquo;t loaded multiple times in the new module system.&lt;/p&gt;

&lt;h4 id="canonicalizing-relative-loads"&gt;
&lt;a class="anchor" href="#canonicalizing-relative-loads"&gt;&lt;span class="visuallyhidden"&gt;Canonicalizing Relative Loads permalink&lt;/span&gt;&lt;/a&gt;Canonicalizing Relative Loads&lt;/h4&gt;

&lt;p&gt;When a stylesheet tries to load a relative URL, such as &lt;code&gt;@use &amp;quot;variables&amp;quot;&lt;/code&gt;, it&amp;rsquo;s
not clear from the document itself whether that refers to a file that exists
relative to the stylesheet or to another importer or load path. Here&amp;rsquo;s how the
importer API resolves that ambiguity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, the relative URL is resolved relative to the canonical URL of the
stylesheet that contained the &lt;code&gt;@use&lt;/code&gt; (or &lt;code&gt;@forward&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt;). For
example, if the canonical URL is &lt;code&gt;file:///path/to/my/_styles.scss&lt;/code&gt;, then the
resolved URL will be &lt;code&gt;file:///path/to/my/variables&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This URL is then passed to the &lt;code&gt;canonicalize()&lt;/code&gt; method of the importer that
loaded the old stylesheet. (That means it&amp;rsquo;s important for your importers to
support absolute URLs!) If the importer recognizes it, it returns the
canonical value which is then passed to that importer&amp;rsquo;s &lt;code&gt;load()&lt;/code&gt;; otherwise,
it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the old stylesheet&amp;rsquo;s importer didn&amp;rsquo;t recognize the URL, it&amp;rsquo;s passed to all
the &lt;code&gt;importers&lt;/code&gt;&amp;lsquo; canonicalize functions in the order they appear in &lt;code&gt;options&lt;/code&gt;,
then checked for in all the &lt;code&gt;loadPaths&lt;/code&gt;. If none of those recognizes it, the
load fails.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s important that local relative paths take precedence over other importers or
load paths, because otherwise your local stylesheets could get unexpectedly
broken by a dependency adding a file with a conflicting name.&lt;/p&gt;

&lt;h3 id="loading"&gt;
&lt;a class="anchor" href="#loading"&gt;&lt;span class="visuallyhidden"&gt;Loading permalink&lt;/span&gt;&lt;/a&gt;Loading&lt;/h3&gt;

&lt;p&gt;The second step actually loads the text of the stylesheet. The &lt;code&gt;load()&lt;/code&gt;
method takes a canonical URL that was returned by &lt;code&gt;canonicalize()&lt;/code&gt; and
returns the contents of the stylesheet at that URL. This is only called once
per compilation for each canonical URL; future loads of the same URL will
re-use either the existing module (for &lt;code&gt;@use&lt;/code&gt; and &lt;code&gt;@forward&lt;/code&gt;) or the parse
tree (for &lt;code&gt;@import&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;load()&lt;/code&gt; method returns an object with the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;: The text of the loaded stylesheet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;syntax&lt;/code&gt;: The syntax of the file: &lt;code&gt;&amp;#39;scss&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;indented&amp;#39;&lt;/code&gt;, or &lt;code&gt;&amp;#39;css&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMapUrl&lt;/code&gt;: An optional browser-accessible &lt;code&gt;URL&lt;/code&gt; to include in source maps
when referring to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="fileimporter"&gt;
&lt;a class="anchor" href="#fileimporter"&gt;&lt;span class="visuallyhidden"&gt;FileImporter permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;FileImporter&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This proposal also adds a special type of importer known as a &lt;code&gt;FileImporter&lt;/code&gt;.
This importer makes the common case of redirecting loads to somewhere on the
physical filesystem easier. It doesn&amp;rsquo;t require the caller to implement
&lt;code&gt;load()&lt;/code&gt;, since that&amp;rsquo;s always going to be the same for files on disk.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileImporter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;findFileUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;fromImport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileImporterResult&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;findFileUrl()&lt;/code&gt; method takes a relative URL and returns an object with the
following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The absolute &lt;code&gt;file:&lt;/code&gt; URL of the file to load. This URL doesn&amp;rsquo;t need to
be fully canonicalized: the Sass compiler will take care of resolving
partials, file extensions, index files, and so on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMapUrl&lt;/code&gt;: An optional browser-accessible &lt;code&gt;URL&lt;/code&gt; to include in source maps
when referring to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="functions"&gt;
&lt;a class="anchor" href="#functions"&gt;&lt;span class="visuallyhidden"&gt;Functions permalink&lt;/span&gt;&lt;/a&gt;Functions&lt;/h2&gt;

&lt;p&gt;The new function API&amp;rsquo;s function type is very similar to the old API&amp;rsquo;s:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CustomFunctionCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Async functions return a &lt;code&gt;Promise&amp;lt;Value&amp;gt;&lt;/code&gt; rather than calling a callback.&lt;/li&gt;
&lt;li&gt;The value types themselves are different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second point is pretty substantial, though! The new value types are much
more fleshed out than the old versions. Let&amp;rsquo;s start with the parent class:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Returns the values of `this` when interpreted as a list.
   *
   * - For a list, this returns its elements.
   * - For a map, this returns each of its key/value pairs as a `SassList`.
   * - For any other value, this returns a list that contains only that value.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;asList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` is a bracketed Sass list. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasBrackets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` is truthy (any value other than `null` or `false`). */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns JS's null if this is `sassNull`, or `this` otherwise. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;realNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** If `this` is a list, return its separator. Otherwise, return `null`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Converts the Sass index `sassIndex` to a JS index into the array returned
   * by `asList`.
   *
   * Sass indices start counting at 1, and may be negative in order to index
   * from the end of the list.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;sassIndexToListIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sassIndex&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassBoolean`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassBoolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassColor`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassFunction`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassMap` (or converts it to a `SassMap` if it's
   * an empty list), and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassNumber`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassString`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns the value of `this` if it can be interpreted as a map.
   *
   * - If this is a map, returns its contents.
   * - If this is an empty list, returns an empty map.
   * - Otherwise, returns `null`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;tryMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether `this == other` in SassScript. */&lt;/span&gt;
  &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple important things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because CSS doesn&amp;rsquo;t have a strong syntactic differentiation between a single
element and a list containing one element, any Sass value may be treated as
though it&amp;rsquo;s a list. The &lt;code&gt;Value&lt;/code&gt; makes it easy to follow this convention by
making the &lt;code&gt;asList()&lt;/code&gt;, &lt;code&gt;hasBrackets()&lt;/code&gt;, and &lt;code&gt;separator()&lt;/code&gt; getters available
for every &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list returned this was and the map returned by &lt;code&gt;asMap()&lt;/code&gt; are immutable
types from the &lt;a href="https://immutable-js.com/"&gt;&lt;code&gt;immutable&lt;/code&gt; package&lt;/a&gt;. This reflects Sass&amp;rsquo;s built-in
immutability of all its types. Although these values can&amp;rsquo;t be modified
directly, their APIs make it easy and efficient to create new values with
changes applied.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sass&amp;rsquo;s list-indexing conventions are different than JavaScript&amp;rsquo;s. The
&lt;code&gt;sassIndexToListIndex()&lt;/code&gt; function makes it easy to convert from Sass index to
JS index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Sass, any value may be used in a boolean context, with &lt;code&gt;false&lt;/code&gt;
and &lt;code&gt;null&lt;/code&gt; counting as &amp;ldquo;falsey&amp;rdquo; values. The &lt;code&gt;isTruthy&lt;/code&gt; getter makes this
convention easy to follow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;assert*()&lt;/code&gt; functions make it easy to ensure that you&amp;rsquo;re being passed the
arguments you expect, and to throw an idiomatic error if you&amp;rsquo;re not. They&amp;rsquo;re
particularly useful for TypeScript users since they&amp;rsquo;ll automatically narrow
the type of the &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most Sass values have their own subclasses, but there are three singleton values
that are just available as constants: &lt;code&gt;sassTrue&lt;/code&gt;, &lt;code&gt;sassFalse&lt;/code&gt;, and &lt;code&gt;sassNull&lt;/code&gt;
represent Sass&amp;rsquo;s &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; values respectively.&lt;/p&gt;

&lt;h3 id="colors"&gt;
&lt;a class="anchor" href="#colors"&gt;&lt;span class="visuallyhidden"&gt;Colors permalink&lt;/span&gt;&lt;/a&gt;Colors&lt;/h3&gt;

&lt;p&gt;The new API&amp;rsquo;s &lt;code&gt;SassColor&lt;/code&gt; class provides access to colors in RGB, HSL, and HWB
format. As with built-in Sass color functions, any attribute can be accessed on
any color regardless of how it was initially created.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates an RGB color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an HSL color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an HWB color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;hwb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's red channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's green channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's blue channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's hue. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's saturation. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's lightness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's whiteness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's blackeness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's alpha channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the RGB channels updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeRgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the HSL values updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeHsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the HWB values updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeHwb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns a copy of `this` with `alpha` as its alpha channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;changeAlpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="numbers"&gt;
&lt;a class="anchor" href="#numbers"&gt;&lt;span class="visuallyhidden"&gt;Numbers permalink&lt;/span&gt;&lt;/a&gt;Numbers&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassNumber&lt;/code&gt; class stores its numerator and denominator units as arrays
rather than strings. In addition, it provides methods for asserting that it has
specific units (&lt;code&gt;assertNoUnits()&lt;/code&gt;, &lt;code&gt;assertUnit()&lt;/code&gt;) and for converting it to
specific units (&lt;code&gt;convert()&lt;/code&gt;, &lt;code&gt;convertToMatch()&lt;/code&gt;, &lt;code&gt;convertValue()&lt;/code&gt;,
&lt;code&gt;convertValueToMatch()&lt;/code&gt;, &lt;code&gt;coerce()&lt;/code&gt;, &lt;code&gt;coerceValue()&lt;/code&gt;, &lt;code&gt;coerceValueToMatch()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Sass&amp;rsquo;s numeric logic is also subtly different from JS, since Sass considers
numbers that differ by less than the 10th decimal digit to be identical. This
API provides a number of methods that help convert between this and JavaScript&amp;rsquo;s
numeric logic.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass number with no units or a single numerator unit. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates a Sass number with multiple numerator and/or denominator units. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;withUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;numeratorUnits&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;denominatorUnits&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's value. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Whether `value` is an integer according to Sass's numeric logic.
   *
   * The integer value can be accessed using `asInt`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isInt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is an integer according to Sass's numeric logic, returns the
   * corresponding JS integer, or `null` if `value` isn't an integer.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;asInt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's numerator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;numeratorUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's denominator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;denominatorUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` has numerator or denominator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is an integer according to Sass's numeric logic, returns the
   * corresponding JS integer, or throws an error if `value` isn't an integer.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is between `min` and `max` according to Sass's numeric logic,
   * returns it clamped to that range. Otherwise, throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertInRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it has no units. Otherwise, throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertNoUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it has `unit` as its single (numerator) unit. Otherwise,
   * throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="na"&gt;stringunit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether `this` has the single numerator unit `unit`. */&lt;/span&gt;
  &lt;span class="nx"&gt;hasUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether this number's units are compatible with `unit`. */&lt;/span&gt;
  &lt;span class="nx"&gt;compatibleWithUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If this number's units are compatible with `newNumerators` and
   * `newDenominators`, returns a new number with those units that's equal to
   * `this`. Otherwise, throws an error.
   *
   * Note that unitless numbers are only compatible with other unitless numbers.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If this number's units are compatible with `other`'s, returns a new number
   * with `other`'s units that's equal to `this`. Otherwise, throws an error.
   *
   * Note that unitless numbers are only compatible with other unitless numbers.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;convertToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `convert(newNumerators, newDenominators).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;convertValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `convertToMatch(other).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;convertValueToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Like `convert()`, but if `this` is unitless returns a copy of it with the
   * same value and the given units.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;coerce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Like `convertToMatch()`, but if `this` is unitless returns a copy of it
   * with the same value and `other`'s units.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `coerce(newNumerators, newDenominators).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `coerceToMatch(other).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceValueToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="strings"&gt;
&lt;a class="anchor" href="#strings"&gt;&lt;span class="visuallyhidden"&gt;Strings permalink&lt;/span&gt;&lt;/a&gt;Strings&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassString&lt;/code&gt; class provides access to information about whether or not the
string is quoted. As with lists, JS&amp;rsquo;s notion of indexes differs from Sass&amp;rsquo;s, so
it also provides the &lt;code&gt;sassIndexToStringIndex()&lt;/code&gt; method to convert a JS index
into a Sass index.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a string with the given `text`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default true */&lt;/span&gt;
      &lt;span class="na"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty string`. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default true */&lt;/span&gt;
    &lt;span class="na"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The contents of `this`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` has quotes. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasQuotes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The number of Unicode code points in `text`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;sassLength&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Converts the Sass index `sassIndex` to a JS index into `text`.
   *
   * Sass indices start counting at 1, and may be negative in order to index
   * from the end of the list. In addition, Sass indexes strings by Unicode code
   * point, while JS indexes them by UTF-16 code unit.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;sassIndexToStringIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sassIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="lists"&gt;
&lt;a class="anchor" href="#lists"&gt;&lt;span class="visuallyhidden"&gt;Lists permalink&lt;/span&gt;&lt;/a&gt;Lists&lt;/h3&gt;

&lt;p&gt;As mentioned above, most list functions are on the &lt;code&gt;Value&lt;/code&gt; superclass to make it
easy to follow the Sass convention of treating all values as lists. However, the
&lt;code&gt;SassList&lt;/code&gt; class can still be constructed to make new lists:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassList&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass list with the given `contents`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default ',' */&lt;/span&gt;
      &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default false */&lt;/span&gt;
      &lt;span class="nx"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty Sass list. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default null */&lt;/span&gt;
    &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default false */&lt;/span&gt;
    &lt;span class="nx"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nx"&gt;SassList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="maps"&gt;
&lt;a class="anchor" href="#maps"&gt;&lt;span class="visuallyhidden"&gt;Maps permalink&lt;/span&gt;&lt;/a&gt;Maps&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassMap&lt;/code&gt; class simply exposes its contents as an &lt;code&gt;OrderedMap&lt;/code&gt; from the
&lt;a href="https://immutable-js.com/"&gt;&lt;code&gt;immutable&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass map with the given `contents`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty Sass map. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns this map's contents. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="functions"&gt;
&lt;a class="anchor" href="#functions"&gt;&lt;span class="visuallyhidden"&gt;Functions permalink&lt;/span&gt;&lt;/a&gt;Functions&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassFunction&lt;/code&gt; class is fairly restrictive: it just allows a new first-class
function to be created with a synchronous callback. These functions can&amp;rsquo;t be
invoked by custom functions—but they still provide more power than the old API!&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassFunction&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Creates a Sass function value with the given `signature` that calls
   * `callback` when it's invoked.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CustomFunctionCallback&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="more-information"&gt;
&lt;a class="anchor" href="#more-information"&gt;&lt;span class="visuallyhidden"&gt;More Information permalink&lt;/span&gt;&lt;/a&gt;More Information&lt;/h2&gt;

&lt;p&gt;If you want to know more about these proposals and see their most up-to-date
forms, they&amp;rsquo;re available on GitHub to view in full:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/tree/main/proposal/new-js-api.d.ts"&gt;Compile API proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/js-logger.d.ts"&gt;Logger proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/new-js-importer.d.ts"&gt;Importer proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/new-function-and-values-api.d.ts"&gt;Functions and values proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re eager for feedback, so please &lt;a href="https://github.com/sass/sass/issues/new"&gt;let us know what you think&lt;/a&gt;! The proposals
in question will be open for at least a month after this blog post goes live,
and possibly more depending on how lively the discussion around them is.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Discontinuation of node-fibers</title>
    <link href="https://sass-lang.su/blog/node-fibers-discontinued" rel="alternate"/>
    <id>https://sass-lang.su/blog/node-fibers-discontinued</id>
    <published>2021-03-26T23:00:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;We have recently received the unfortunate but not entirely surprising news that
&lt;a href="https://github.com/laverdet/node-fibers/commit/8f2809869cc92c28c92880c4a38317ae3dbe654d"&gt;the &lt;code&gt;node-fibers&lt;/code&gt; package has reached its end-of-life&lt;/a&gt; and will not be updated
for compatibility with Node 16. Dart Sass has historically allowed JavaScript
users to pass in &lt;code&gt;node-fibers&lt;/code&gt; to improve the performance of the asynchronous
&lt;code&gt;render()&lt;/code&gt; method, but going forward this will unfortunately no longer be an
option in Node 16 and on.&lt;/p&gt;

&lt;p&gt;There are a number of &lt;a href="#reclaiming-performance"&gt;alternative options&lt;/a&gt; for reclaiming this lost
performance, some of them which are available today, some which are in
development, and some which are theoretical but could be made real with pull
requests from users like you. Sadly, none of the options that are ready today
are drop-in solutions with the same level of ease-of-use as &lt;code&gt;node-fibers&lt;/code&gt;, so if
that performance is crucial to you we recommend staying on Node 14 for the time
being.&lt;/p&gt;

&lt;h2 id="what-happened"&gt;
&lt;a class="anchor" href="#what-happened"&gt;&lt;span class="visuallyhidden"&gt;What Happened? permalink&lt;/span&gt;&lt;/a&gt;What Happened?&lt;/h2&gt;

&lt;p&gt;In order to understand how we got here, it&amp;rsquo;s important to know two pieces of
history. First, why does Dart Sass use &lt;code&gt;node-fibers&lt;/code&gt; in the first place? And
second, why is &lt;code&gt;node-fibers&lt;/code&gt; dying?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This section is fairly technical, so feel free to &lt;a href="#reclaiming-performance"&gt;skip ahead&lt;/a&gt; if you don&amp;rsquo;t care
about the gory details.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="fibers-in-sass"&gt;
&lt;a class="anchor" href="#fibers-in-sass"&gt;&lt;span class="visuallyhidden"&gt;Fibers in Sass permalink&lt;/span&gt;&lt;/a&gt;Fibers in Sass&lt;/h3&gt;

&lt;p&gt;Dart Sass inherited its &lt;a href="/documentation/js-api"&gt;JavaScript API&lt;/a&gt; from the now-deprecated &lt;a href="https://www.npmjs.com/package/node-sass"&gt;Node Sass&lt;/a&gt;.
This API has two main functions for compiling Sass files: &lt;code&gt;renderSync()&lt;/code&gt; which
synchronously returned the compiled CSS, and &lt;code&gt;render()&lt;/code&gt; which instead takes a
callback to which it passes the compiled CSS asynchronously. Only &lt;code&gt;render()&lt;/code&gt;
allowed asynchronous plugins, including widely-used importers such as webpack&amp;rsquo;s
&lt;a href="https://www.npmjs.com/package/sass-loader"&gt;&lt;code&gt;sass-loader&lt;/code&gt;&lt;/a&gt;, so &lt;code&gt;render()&lt;/code&gt; became very widely used in practice.&lt;/p&gt;

&lt;p&gt;For Node Sass, the performance difference between &lt;code&gt;render()&lt;/code&gt; and &lt;code&gt;renderSync()&lt;/code&gt;
was negligible, because it was built on C++ code which had few restrictions on
how it handled asynchrony. However, Dart Sass runs as pure JavaScript, which
makes it subject to JavaScript&amp;rsquo;s strict async rules. Asynchrony in JavaScript is
&lt;em&gt;contagious&lt;/em&gt;, which means that if any function (such as an importer plugin) is
asynchronous, then everything that calls it must be asynchronous, and so on
until the entire program is asynchronous.&lt;/p&gt;

&lt;p&gt;And asynchrony in JavaScript isn&amp;rsquo;t free. Every asynchronous function call has to
allocate callbacks, store them somewhere, and take a trip back to the event loop
before invoking those callbacks, and that all takes time. In fact, it takes
enough time that the asynchronous &lt;code&gt;render()&lt;/code&gt; in Dart Sass tends to be 2-3x
slower than &lt;code&gt;renderSync()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enter fibers. Fibers are a very cool concept, available in languages like Ruby
and C++, that give the programmer more control over asynchronous functions. They
can even allow a chunk of synchronous code (such as the Sass compiler) to call
asynchronous callbacks (such as the webpack plugin). The &lt;code&gt;node-fibers&lt;/code&gt; package
did some arcane magick with the V8 virtual machine to implement Fibers in
JavaScript, which allowed Dart Sass to use the fast synchronous code to
implement the asynchronous &lt;code&gt;render()&lt;/code&gt; API. And for a time, it was great.&lt;/p&gt;

&lt;h3 id="the-death-of-fibers"&gt;
&lt;a class="anchor" href="#the-death-of-fibers"&gt;&lt;span class="visuallyhidden"&gt;The Death of Fibers permalink&lt;/span&gt;&lt;/a&gt;The Death of Fibers&lt;/h3&gt;

&lt;p&gt;Unfortunately, the arcane magick that &lt;code&gt;node-fibers&lt;/code&gt; used involved accessing some
parts of V8 that were not officially part of its public API. There was no
guarantee that the interfaces they were using would stay the same from release
to release, and indeed they tended to change fairly regularly. For a long time,
those changes were small enough that it was possible to release a new version of
&lt;code&gt;node-fibers&lt;/code&gt; that supported them, but with Node.js 16 the luck ran out.&lt;/p&gt;

&lt;p&gt;The latest version of V8 involves some major overhauls to its internals. These
will eventually allow it to implement some cool improvements, so its hard to
begrudge, but a side effect is that the APIs &lt;code&gt;node-fibers&lt;/code&gt; was using are
completely gone without an obvious replacement. This is no one&amp;rsquo;s fault: since
those interfaces weren&amp;rsquo;t part of V8&amp;rsquo;s public API, they were under no obligation
to keep them stable. Sometimes in software that&amp;rsquo;s just the way things go.&lt;/p&gt;

&lt;h2 id="reclaiming-performance"&gt;
&lt;a class="anchor" href="#reclaiming-performance"&gt;&lt;span class="visuallyhidden"&gt;Reclaiming Performance permalink&lt;/span&gt;&lt;/a&gt;Reclaiming Performance&lt;/h2&gt;

&lt;p&gt;There are a few options for getting back the performance that&amp;rsquo;s lost by no
longer being able to pass &lt;code&gt;node-fibers&lt;/code&gt; to &lt;code&gt;sass.render()&lt;/code&gt;. In order from
nearest to longest term:&lt;/p&gt;

&lt;h3 id="avoid-asynchronous-plugins"&gt;
&lt;a class="anchor" href="#avoid-asynchronous-plugins"&gt;&lt;span class="visuallyhidden"&gt;Avoid Asynchronous Plugins permalink&lt;/span&gt;&lt;/a&gt;Avoid Asynchronous Plugins&lt;/h3&gt;

&lt;p&gt;This is something you can do today. If it&amp;rsquo;s at all possible to make the plugins
you pass in to Sass synchronous, you can use the &lt;code&gt;renderSync()&lt;/code&gt; method which
doesn&amp;rsquo;t need fibers to go fast. This may require rewriting some existing
plugins, but it will pay dividends immediately.&lt;/p&gt;

&lt;h3 id="embedded-dart-sass"&gt;
&lt;a class="anchor" href="#embedded-dart-sass"&gt;&lt;span class="visuallyhidden"&gt;Embedded Dart Sass permalink&lt;/span&gt;&lt;/a&gt;Embedded Dart Sass&lt;/h3&gt;

&lt;p&gt;While it&amp;rsquo;s not ready for prime-time yet, the Sass team is working on a project
called &amp;ldquo;embedded Dart Sass&amp;rdquo;. This involves running Dart Sass as a &lt;em&gt;subprocess&lt;/em&gt;,
rather than a library, and communicating with it using a special protocol. This
provides several important improvements over the existing alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlike running &lt;code&gt;sass&lt;/code&gt; from the command line, this will still work with plugins
like the webpack importer. In fact, we plan to match the existing JavaScript
API as closely as possible. This will probably run asynchronous plugins &lt;em&gt;even
faster&lt;/em&gt; than synchronous ones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike the existing JS-compiled version, this will use the Dart VM. Due to the
more static nature of the Dart language, the Dart VM runs Sass substantially
faster than Node.js, which will provide about a 2x speed improvement for large
stylesheets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Node.js host for Embedded Sass is still in active development, but there&amp;rsquo;s
&lt;a href="https://www.npmjs.com/package/sass-embedded"&gt;a beta release&lt;/a&gt; available (with minimal features) if you want to kick the
tires.&lt;/p&gt;

&lt;h3 id="worker-threads"&gt;
&lt;a class="anchor" href="#worker-threads"&gt;&lt;span class="visuallyhidden"&gt;Worker Threads permalink&lt;/span&gt;&lt;/a&gt;Worker Threads&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve explored the possibility of running the pure-JS Dart Sass in a Node.js
worker thread. Worker threads work a bit like fibers in that they make it
possible for synchronous code to wait for asynchronous callbacks to run.
Unfortunately, they&amp;rsquo;re also &lt;em&gt;extremely&lt;/em&gt; restrictive about what sorts of
information can be passed across the thread boundary, which makes it much harder
to use them to wrap a complex API like Sass&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;At the moment, the Sass team is focused on Embedded Sass, so we don&amp;rsquo;t have the
spare bandwidth to dive into worker threads as an alternative. That said, we&amp;rsquo;d
be happy to help a motivated user implement this. If you&amp;rsquo;re interested, follow
up on &lt;a href="https://github.com/sass/dart-sass/issues/868"&gt;the GitHub issue&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id="reanimating-node-fibers"&gt;
&lt;a class="anchor" href="#reanimating-node-fibers"&gt;&lt;span class="visuallyhidden"&gt;Reanimating node-fibers permalink&lt;/span&gt;&lt;/a&gt;Reanimating &lt;code&gt;node-fibers&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s one other potential solution, although it would take true dedication to
turn into reality. It would in principle be possible to add a new API to V8 that
would &lt;em&gt;officially&lt;/em&gt; support the hooks &lt;code&gt;node-fibers&lt;/code&gt; needs to do its good work.
This would allow the package to return gloriously to life and Sass to make
&lt;code&gt;render()&lt;/code&gt; fast on into the future.&lt;/p&gt;

&lt;p&gt;The Sass team has contacted both the V8 team and the owner of &lt;code&gt;node-fibers&lt;/code&gt;, and
both of them are amenable to this idea in principle. While neither one has the
time to see it through to completion themselves, they&amp;rsquo;ve expressed willingness
to help an engineer who&amp;rsquo;s willing to give it a shot.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t a contribution for the faint of heart, though: it requires knowledge
of C++, a willingness to learn at least the basics of the &lt;code&gt;node-fibers&lt;/code&gt; codebase
and V8&amp;rsquo;s isolate APIs, and skills in both API design and human interaction to
negotiate a stable API that will meet the needs of &lt;code&gt;node-fibers&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; that the
V8 team feels comfortable committing to maintain. But if you&amp;rsquo;re interested,
please don&amp;rsquo;t hesitate to &lt;a href="mailto:nweiz@google.com"&gt;reach out&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: First-Class Calc</title>
    <link href="https://sass-lang.su/blog/request-for-comments-first-class-calc" rel="alternate"/>
    <id>https://sass-lang.su/blog/request-for-comments-first-class-calc</id>
    <published>2021-03-15T09:35:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;One of the absolutely most-requested features in Sass is the ability to more
easily work with &lt;code&gt;calc()&lt;/code&gt; expressions. These expressions have historically been
parsed opaquely: between the parentheses, you can put any text at all, and
Sass will just treat it as an unquoted string. This has simplified Sass&amp;rsquo;s
parser, since we don&amp;rsquo;t have to support the specific &lt;code&gt;calc()&lt;/code&gt; microsyntax, and
it&amp;rsquo;s meant that we automatically support new features like the use of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS
variables&lt;/a&gt; within &lt;code&gt;calc()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it comes at a substantial usability cost as well. Because each &lt;code&gt;calc()&lt;/code&gt;
is totally opaque to Sass&amp;rsquo;s parser, users can&amp;rsquo;t simply use Sass variables in
place of values; they have to &lt;a href="https://sass-lang.com/documentation/interpolation"&gt;interpolate&lt;/a&gt; variables explicitly. And once a
&lt;code&gt;calc()&lt;/code&gt; expression has been created, there&amp;rsquo;s no way to manipulate it with Sass
the way you can manipulate a plain number.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re looking to change that with a new proposal we call &amp;ldquo;First-Class Calc&amp;rdquo;.
This proposal changes &lt;code&gt;calc()&lt;/code&gt; (and other supported mathematical functions) from
being parsed as unquoted strings to being parsed in-depth, and sometimes
(although not always) producing a new data type known as a &amp;ldquo;calculation&amp;rdquo;. This
data type represents mathematical expressions that can&amp;rsquo;t be resolved at
compile-time, such as &lt;code&gt;calc(10% + 5px)&lt;/code&gt;, and allows those expressions to be
combined gracefully within further mathematical functions.&lt;/p&gt;

&lt;p&gt;To be more specific: a &lt;code&gt;calc()&lt;/code&gt; expression will be parsed according to the &lt;a href="https://drafts.csswg.org/css-values-3/#calc-syntax"&gt;CSS
syntax&lt;/a&gt;, with additional support for Sass variables, functions, and (for
backwards compatibility) interpolation. Sass will perform as much math as
possible at compile-time, and if the result is a single number it will return it
as a normal Sass number type. Otherwise, it will return a calculation that
represents the (simplified) expression that can be resolved in the browser.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;calc(1px + 10px)&lt;/code&gt; will return the number &lt;code&gt;11px&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly, if &lt;code&gt;$length&lt;/code&gt; is &lt;code&gt;10px&lt;/code&gt;, &lt;code&gt;calc(1px + $length)&lt;/code&gt; will return &lt;code&gt;11px&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, &lt;code&gt;calc(1px + 10%)&lt;/code&gt; will return the calc &lt;code&gt;calc(1px + 10%)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;$length&lt;/code&gt; is &lt;code&gt;calc(1px + 10%)&lt;/code&gt;, &lt;code&gt;calc(1px + $length)&lt;/code&gt; will return
&lt;code&gt;calc(2px + 10%)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sass functions can be used directly in &lt;code&gt;calc()&lt;/code&gt;, so &lt;code&gt;calc(1% +
math.round(15.3px))&lt;/code&gt; returns &lt;code&gt;calc(1% + 15px)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that calculations cannot generally be used in place of numbers. For
example, &lt;code&gt;1px + calc(1px + 10%)&lt;/code&gt; will produce an error, as will
&lt;code&gt;math.round(calc(1px + 10%))&lt;/code&gt;. This is because calculations can&amp;rsquo;t be used
interchangeably with numbers (you can&amp;rsquo;t pass a calculation to &lt;code&gt;math.sqrt()&lt;/code&gt;), so
we want to make sure mathematical functions are explicit about whether or not
they support calculations by either wrapping all of their math in &lt;code&gt;calc()&lt;/code&gt; or
using normal Sass arithmetic.&lt;/p&gt;

&lt;p&gt;For backwards compatibility, &lt;code&gt;calc()&lt;/code&gt; expressions that contain interpolation
will continue to be parsed using the old highly-permissive syntax, although this
behavior will eventually be deprecated and removed. These expressions will still
return calculation values, but they&amp;rsquo;ll never be simplified or resolve to plain
numbers.&lt;/p&gt;

&lt;h2 id="let-us-know-what-you-think"&gt;
&lt;a class="anchor" href="#let-us-know-what-you-think"&gt;&lt;span class="visuallyhidden"&gt;Let us know what you think! permalink&lt;/span&gt;&lt;/a&gt;Let us know what you think!&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re interested in learning more about this proposal, &lt;a href="https://github.com/sass/sass/tree/main/proposal/first-class-calc.md"&gt;read it in full&lt;/a&gt; on
GitHub. It&amp;rsquo;s open for comments and revisions for the next month, so if you&amp;rsquo;d
like to see something change please &lt;a href="https://github.com/sass/sass/issues/new"&gt;file an issue&lt;/a&gt; and we can discuss it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>LibSass is Deprecated</title>
    <link href="https://sass-lang.su/blog/libsass-is-deprecated" rel="alternate"/>
    <id>https://sass-lang.su/blog/libsass-is-deprecated</id>
    <published>2020-10-26T20:00:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;After much discussion among the Sass core team, we&amp;rsquo;ve come to the conclusion
that it&amp;rsquo;s time to officially declare that LibSass and the packages built on top
of it, including Node Sass, are deprecated. For several years now, it&amp;rsquo;s been
clear that there&amp;rsquo;s simply not enough engineering bandwidth behind LibSass to
keep it up-to-date with the latest developments in the Sass language (for
example, the most recent new language feature was added in &lt;a href="https://github.com/sass/libsass/releases/tag/3.5.5"&gt;November 2018&lt;/a&gt;). As
much as we&amp;rsquo;ve hoped to see this pattern turn around, even the excellent work of
long-time LibSass contributors Michael Mifsud and Marcel Greter couldn&amp;rsquo;t keep up
with the fast pace of language development in both CSS and Sass.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll go into detail about what this means below, but here are the major points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We no longer recommend LibSass for new Sass projects. Use &lt;a href="https://sass-lang.com/dart-sass"&gt;Dart Sass&lt;/a&gt; instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We recommend all existing LibSass users make plans to eventually move onto
Dart Sass, and that all Sass libraries make plans to eventually drop support
for LibSass.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We&amp;rsquo;re no longer planning to add any new features to LibSass, including
compatibility with new CSS features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LibSass and Node Sass will continue to be maintained indefinitely on a
best-effort basis, including fixing major bugs and security issues and
maintaining compatibility with the latest Node versions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="why-deprecate"&gt;
&lt;a class="anchor" href="#why-deprecate"&gt;&lt;span class="visuallyhidden"&gt;Why deprecate? permalink&lt;/span&gt;&lt;/a&gt;Why deprecate?&lt;/h2&gt;

&lt;p&gt;For several years now, Sass has managed to exist in an ambiguous kind of state
where LibSass was an officially-supported implementation in theory, but its
feature surface was static in practice. As time has gone on, it&amp;rsquo;s becoming
increasingly clear that this state causes substantial concrete problems for Sass
users. For example, we regularly see users confused as to why &lt;a href="https://github.com/sass/sass/issues/2849"&gt;plain-CSS &lt;code&gt;min()&lt;/code&gt;
and &lt;code&gt;max()&lt;/code&gt; don&amp;rsquo;t work&lt;/a&gt; and assuming Sass as a whole is at fault, when in fact
it&amp;rsquo;s only LibSass that doesn&amp;rsquo;t support that feature.&lt;/p&gt;

&lt;p&gt;Official support for LibSass doesn&amp;rsquo;t just cause pain for individual users.
Because LibSass doesn&amp;rsquo;t support the &lt;a href="https://sass-lang.com/blog/the-module-system-is-launched"&gt;Sass module system&lt;/a&gt; that launched last
year, major shared Sass libraries have been unable to use it for fear that their
downstream users would be incompatible. By clearly indicating that all Sass
users should eventually move off of LibSass, we hope to make it more feasible
for these library authors to use more modern features.&lt;/p&gt;

&lt;p&gt;LibSass has even inhibited the development of the Sass language itself. We&amp;rsquo;ve
been unable to move forward with the proposal for &lt;a href="https://github.com/sass/sass/blob/main/accepted/slash-separator.md"&gt;treating &lt;code&gt;/&lt;/code&gt; as a separator&lt;/a&gt;
because any code they&amp;rsquo;d write would either produce deprecation warnings in Dart
Sass or fail to compile in LibSass. By marking LibSass as deprecated, this
becomes much more feasible, and Sass becomes much better at supporting the
latest versions of CSS.&lt;/p&gt;

&lt;h2 id="what-does-deprecated-mean"&gt;
&lt;a class="anchor" href="#what-does-deprecated-mean"&gt;&lt;span class="visuallyhidden"&gt;What does “deprecated” mean? permalink&lt;/span&gt;&lt;/a&gt;What does “deprecated” mean?&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re choosing to use the term &amp;ldquo;deprecated&amp;rdquo; because it carries a lot of weight
in the programming community, and provides a strong signal that users should
start planning to move away from LibSass. However, it doesn&amp;rsquo;t mean that the
project is entirely dead. Michael Mifsud, the lead maintainer of LibSass and
Node Sass, has affirmed that he plans to continue maintenance on the same level
as the past few years. This means that although there will be no more features
added (and as such LibSass will slowly drift further and further out of
compatibility with the latest CSS and Sass syntax), there will continue to be
maintenance releases indefinitely.&lt;/p&gt;

&lt;h2 id="what-about-portability-and-performance"&gt;
&lt;a class="anchor" href="#what-about-portability-and-performance"&gt;&lt;span class="visuallyhidden"&gt;What about portability and performance? permalink&lt;/span&gt;&lt;/a&gt;What about portability and performance?&lt;/h2&gt;

&lt;p&gt;LibSass today has two major benefits over Dart Sass:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Portability&lt;/strong&gt;: since it&amp;rsquo;s written in C++, it&amp;rsquo;s easy to embed LibSass within
other programming languages and provide a native-feeling API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;: calling out to LibSass via the C++ API is very fast relative
to the speeds of code written directly in scripting languages. In particular,
this means LibSass is substantially faster in JavaScript than Dart
Sass-compiled-to-JS (although it&amp;rsquo;s comparable to Dart Sass&amp;rsquo;s command-line
executable).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re working on addressing both of those with the &lt;a href="https://github.com/sass/embedded-protocol"&gt;Sass embedded protocol&lt;/a&gt;,
which runs a Sass compiler as a subprocess that can communicate with any host
language via message-passing. The embedded protocol supports all the features of
a native Sass API, including the ability to define custom importers and Sass
functions, while also providing the high performance of the CLI app. Dart Sass
has already implemented the compiler side of the embedded protocol, and a
JavaScript host for it is in active development.&lt;/p&gt;

&lt;h2 id="how-do-i-migrate"&gt;
&lt;a class="anchor" href="#how-do-i-migrate"&gt;&lt;span class="visuallyhidden"&gt;How do I migrate? permalink&lt;/span&gt;&lt;/a&gt;How do I migrate?&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re a user of Node Sass, migrating to Dart Sass is straightforward: just
replace &lt;code&gt;node-sass&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;sass&lt;/code&gt;. Both packages
expose the same JavaScript API.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using the SassC command-line interface, you can switch to &lt;a href="https://sass-lang.com/documentation/cli/dart-sass"&gt;Dart Sass&amp;rsquo;s
CLI&lt;/a&gt;. Note that this doesn&amp;rsquo;t have exactly the same interface as SassC, so you
may need to change a few flags.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using LibSass through a wrapper library in another language, you can
either switch to the Dart Sass CLI or ask the maintainer of the LibSass wrapper
to convert it to a host for the &lt;a href="https://github.com/sass/embedded-protocol"&gt;Sass embedded protocol&lt;/a&gt;. The embedded protocol
allows any language to provide a native API that calls out to Dart Sass.&lt;/p&gt;

&lt;p&gt;Please note that because activity on LibSass has been low for several years, it
has a number of outstanding bugs and behavioral variations from the Sass spec.
You may need to make minor updates to stylesheets to make them compatible with
Dart Sass. See &lt;a href="https://github.com/sass/libsass/issues?q=is%3Aopen+is%3Aissue+label%3A%22Compatibility+-+P1+%E2%9A%A0%EF%B8%8F%22"&gt;this list of major compatibility issues&lt;/a&gt; for reference.&lt;/p&gt;

&lt;h2 id="thank-you"&gt;
&lt;a class="anchor" href="#thank-you"&gt;&lt;span class="visuallyhidden"&gt;Thank you permalink&lt;/span&gt;&lt;/a&gt;Thank you&lt;/h2&gt;

&lt;p&gt;Finally, I want to thank everyone who&amp;rsquo;s put so much time and energy into LibSass
and Node Sass over the years. It will always be a towering achievement, and
Sass&amp;rsquo;s popularity outside of the Ruby community is undoubtedly due in large part
to its existence. Many people have tried to implement Sass only to find that the
language is much deeper and more complex than they expected, and LibSass alone
among all of those implementations managed to become fully-featured enough to
provide real value for thousands if not millions of users. These maintainers
deserve to be proud of that work, and I hope they&amp;rsquo;ll always consider themselves
part of the Sass community going forward.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: HWB Functions</title>
    <link href="https://sass-lang.su/blog/request-for-comments-hwb-functions" rel="alternate"/>
    <id>https://sass-lang.su/blog/request-for-comments-hwb-functions</id>
    <published>2020-10-07T00:00:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;The CSS working group has been up to all sorts of exciting stuff recently in the
&lt;a href="https://www.w3.org/TR/css-color-4/"&gt;Color Level 4&lt;/a&gt; spec, and the Sass team is starting to think about how to
integrate those cool new features into Sass&amp;rsquo;s color model. We need more time to
hammer out exactly the right designs for complex features like the Lab color
space, but that doesn&amp;rsquo;t mean we can&amp;rsquo;t add a few new color goodies.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re announcing a proposal for one such feature: built-in Sass functions
for &lt;a href="https://www.w3.org/TR/css-color-4/#the-hwb-notation"&gt;HWB&lt;/a&gt; colors! Once this proposal (drafted by Sass core team member &lt;a href="https://www.miriamsuzanne.com/"&gt;Miriam
Suzanne&lt;/a&gt;) is accepted and implemented, you&amp;rsquo;ll be able to write colors in HWB
syntax and adjust their whiteness and blackness the same way you can adjust a
color&amp;rsquo;s saturation and lightness today.&lt;/p&gt;

&lt;h2 id="the-functions"&gt;
&lt;a class="anchor" href="#the-functions"&gt;&lt;span class="visuallyhidden"&gt;The Functions permalink&lt;/span&gt;&lt;/a&gt;The Functions&lt;/h2&gt;

&lt;p&gt;Here are the new and improved functions this proposal adds:&lt;/p&gt;

&lt;h3 id="color-hwb"&gt;
&lt;a class="anchor" href="#color-hwb"&gt;&lt;span class="visuallyhidden"&gt;color.hwb() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.hwb()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;color.hwb()&lt;/code&gt; function defines a color using its hue, whiteness, and
blackness. Like the existing &lt;code&gt;rgb()&lt;/code&gt; and &lt;code&gt;hsl()&lt;/code&gt; functions, It can either use
the space-separated syntax defined in &lt;a href="https://www.w3.org/TR/css-color-4/#the-hwb-notation"&gt;the spec&lt;/a&gt; (&lt;code&gt;hwb(270 20% 40%)&lt;/code&gt;) or
the more Sass-y comma-separated syntax (&lt;code&gt;hwb(270, 20%, 40%)&lt;/code&gt;). Because HWB
colors use the same sRGB colorspace as all other Sass color values, colors
created this way are fully compatible with all existing Sass color functions and
will be emitted as their RGB equivalents for maximum browser compatibility.&lt;/p&gt;

&lt;p&gt;Note that &lt;em&gt;unlike&lt;/em&gt; &lt;code&gt;rgb()&lt;/code&gt; and &lt;code&gt;hsl()&lt;/code&gt;, the proposal doesn&amp;rsquo;t add this function
to the global scope yet. This is because Sass has a policy of never adding
support for new CSS syntax before at least one browser implements it. Specs have
a tendency to change until they&amp;rsquo;re locked in by browsers, and if Sass ends up
supporting something different than the browsers themselves that&amp;rsquo;s bad news!&lt;/p&gt;

&lt;h3 id="color-whiteness-and-color-blackness"&gt;
&lt;a class="anchor" href="#color-whiteness-and-color-blackness"&gt;&lt;span class="visuallyhidden"&gt;color.whiteness() and color.blackness() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.whiteness()&lt;/code&gt; and &lt;code&gt;color.blackness()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These functions work like the &lt;code&gt;color.saturation()&lt;/code&gt; and &lt;code&gt;color.lightness()&lt;/code&gt;
functions do for HSL colors. They even work for colors that weren&amp;rsquo;t created with
&lt;code&gt;color.hwb()&lt;/code&gt;, so you can use them to check how pale or dark any color is.&lt;/p&gt;

&lt;p&gt;Because HWB colors have the same notion of &amp;ldquo;hue&amp;rdquo; as HSL colors, the existing
&lt;code&gt;color.hue()&lt;/code&gt; function already works perfectly!&lt;/p&gt;

&lt;h3 id="color-scale-color-adjust-and-color-change"&gt;
&lt;a class="anchor" href="#color-scale-color-adjust-and-color-change"&gt;&lt;span class="visuallyhidden"&gt;color.scale(), color.adjust(), and color.change() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.scale()&lt;/code&gt;, &lt;code&gt;color.adjust()&lt;/code&gt;, and &lt;code&gt;color.change()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;All three color modification functions now support &lt;code&gt;$whiteness&lt;/code&gt; and &lt;code&gt;$blackness&lt;/code&gt;
arguments. If you want a color (again no matter how it was created) to be 20%
whiter, just pass it to &lt;code&gt;color.scale($color, $whiteness: 20%)&lt;/code&gt; and there you go!&lt;/p&gt;

&lt;h2 id="let-us-know-what-you-think"&gt;
&lt;a class="anchor" href="#let-us-know-what-you-think"&gt;&lt;span class="visuallyhidden"&gt;Let us know what you think! permalink&lt;/span&gt;&lt;/a&gt;Let us know what you think!&lt;/h2&gt;

&lt;p&gt;If you’re interested in learning more about this proposal, &lt;a href="https://github.com/sass/sass/tree/main/proposal/color-4-hwb.md"&gt;read it in full&lt;/a&gt; on
GitHub. It’s open for comments and revisions for the next month, so if you’d
like to see something change please &lt;a href="https://github.com/sass/sass/issues/new"&gt;file an issue&lt;/a&gt; and we can discuss it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: Nested Map Functions</title>
    <link href="https://sass-lang.su/blog/request-for-comments-nested-map-functions" rel="alternate"/>
    <id>https://sass-lang.su/blog/request-for-comments-nested-map-functions</id>
    <published>2020-09-16T22:40:00+00:00</published>
    <updated>2021-09-01T11:36:15+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;As Sass libraries and design systems get more complex and have more users with
different needs, they tend to develop the need to share and override
configuration and design tokens. This configuration is often hierarchical, and
ends up being represented as maps that contain maps that contain still more
maps. Up until now, Sass&amp;rsquo;s map functions haven&amp;rsquo;t really made it easy to work
with this sort of nested map structure. But that&amp;rsquo;s changing with the latest
language proposal, written by Sass core team member &lt;a href="https://www.miriamsuzanne.com/"&gt;Miriam Suzanne&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This proposal expands the existing map functions and adds a few new ones to make
working with nested maps much easier than it was before. It&amp;rsquo;s based on helper
functions that pop up in all sorts of Sass projects around the web,
incorporating best practices back into the language itself.&lt;/p&gt;

&lt;h2 id="the-functions"&gt;
&lt;a class="anchor" href="#the-functions"&gt;&lt;span class="visuallyhidden"&gt;The Functions permalink&lt;/span&gt;&lt;/a&gt;The Functions&lt;/h2&gt;

&lt;p&gt;Here are the new and improved functions this proposal adds:&lt;/p&gt;

&lt;h3 id="map-get-and-map-has-key"&gt;
&lt;a class="anchor" href="#map-get-and-map-has-key"&gt;&lt;span class="visuallyhidden"&gt;map.get() and map.has-key() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;map.get()&lt;/code&gt; and &lt;code&gt;map.has-key()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://sass-lang.com/documentation/modules/map#get"&gt;&lt;code&gt;map.get()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://sass-lang.com/documentation/modules/map#has-key"&gt;&lt;code&gt;map.has-key()&lt;/code&gt;&lt;/a&gt; functions both now take any number of
keys as arguments. Each key drills deeper into a nested map, allowing you to
easily inspect nested values without needing to chain a bunch of function calls
together.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s take the following simplified configuration map:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;"colors"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"primary"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"secondary"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this map, &lt;code&gt;map.get($config, &amp;quot;colors&amp;quot;, &amp;quot;primary&amp;quot;)&lt;/code&gt; gets the value of the
&lt;code&gt;&amp;quot;colors&amp;quot;&lt;/code&gt; key (&lt;code&gt;(&amp;quot;primary&amp;quot;: red)&lt;/code&gt;) then the value of the &lt;code&gt;&amp;quot;primary&amp;quot;&lt;/code&gt; key and
returns &lt;code&gt;red&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;code&gt;map.has-key($config, &amp;quot;colors&amp;quot;, &amp;quot;primary&amp;quot;)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; while
&lt;code&gt;map.has-key($config, &amp;quot;colors&amp;quot;, &amp;quot;tertiary&amp;quot;)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="map-merge"&gt;
&lt;a class="anchor" href="#map-merge"&gt;&lt;span class="visuallyhidden"&gt;map.merge() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;map.merge()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://sass-lang.com/documentation/modules/map#merge"&gt;&lt;code&gt;map.merge()&lt;/code&gt;&lt;/a&gt; function can now be called as &lt;code&gt;map.merge($map1, $keys...,
$map2)&lt;/code&gt;. This will merge &lt;code&gt;$map2&lt;/code&gt; with a child of &lt;code&gt;$map1&lt;/code&gt; at the location given
by the keys, updating the parent maps as it goes.&lt;/p&gt;

&lt;p&gt;For example, using the configuration map &lt;a href="#map-get-and-map-has-key"&gt;defined above&lt;/a&gt; &lt;code&gt;map.merge($config,
&amp;quot;colors&amp;quot;, (&amp;quot;primary&amp;quot;: green))&lt;/code&gt; will return&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(
  "colors": (
    "primary": green,
    "secondary": blue
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="map-set"&gt;
&lt;a class="anchor" href="#map-set"&gt;&lt;span class="visuallyhidden"&gt;map.set() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;map.set()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;map.set($map, $keys..., $value)&lt;/code&gt; function is all-new. Although updating
individual values in maps was always possible with &lt;code&gt;map.merge()&lt;/code&gt;, we&amp;rsquo;ve found
that users get confused by the absence of a dedicated &lt;code&gt;set()&lt;/code&gt; function. This
function not only fills that role, but makes it possible to set values within
nested maps as well.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;map.set()&lt;/code&gt; for normal single-layer maps by just passing one key.
For example, &lt;code&gt;map.set((&amp;quot;wide&amp;quot;: 200px, &amp;quot;narrow&amp;quot;: 70px), &amp;quot;wide&amp;quot;, 180px)&lt;/code&gt; will
return &lt;code&gt;(&amp;quot;wide&amp;quot;: 180px, &amp;quot;narrow&amp;quot;: 70px)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But you can also use it for nested maps. For example, &lt;code&gt;map.set($config,
&amp;quot;colors&amp;quot;, &amp;quot;tertiary&amp;quot;, yellow)&lt;/code&gt; will return&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(
  "colors": (
    "primary": red,
    "secondary": blue,
    "tertiary": yellow
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="map-deep-remove"&gt;
&lt;a class="anchor" href="#map-deep-remove"&gt;&lt;span class="visuallyhidden"&gt;map.deep-remove() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;map.deep-remove()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Because the existing &lt;a href="https://sass-lang.com/documentation/modules/map#remove"&gt;&lt;code&gt;map.remove()&lt;/code&gt;&lt;/a&gt; function already takes any number of
arguments, we couldn&amp;rsquo;t just update it to work with nested maps. Instead, we
chose to add a new function just for nested maps, called &lt;code&gt;map.deep-remove($map,
$keys...)&lt;/code&gt;. This function removes the value at the final key in the list, and
updates all the parent maps accordingly.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;map.deep-remove($config, &amp;quot;colors&amp;quot;, &amp;quot;secondary&amp;quot;)&lt;/code&gt; will return
&lt;code&gt;(&amp;quot;colors&amp;quot;: (&amp;quot;primary&amp;quot;: red))&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="map-deep-merge"&gt;
&lt;a class="anchor" href="#map-deep-merge"&gt;&lt;span class="visuallyhidden"&gt;map.deep-merge() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;map.deep-merge()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The final new function may be the most exciting. &lt;code&gt;map.deep-merge($map1, $map2)&lt;/code&gt;
works just like &lt;code&gt;map.merge()&lt;/code&gt;, except that any nested maps are &lt;em&gt;also&lt;/em&gt; merged,
including maps within those maps and so on. This makes it easy to combine two
configuration maps that have the same structure without having to manually merge
each level by hand.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;map.deep-merge($config, (&amp;quot;colors&amp;quot;: (&amp;quot;secondary&amp;quot;: teal)))&lt;/code&gt; returns&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(
  "colors": (
    "primary": red,
    "secondary": teal
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="let-us-know-what-you-think"&gt;
&lt;a class="anchor" href="#let-us-know-what-you-think"&gt;&lt;span class="visuallyhidden"&gt;Let us know what you think! permalink&lt;/span&gt;&lt;/a&gt;Let us know what you think!&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re interested in learning more about this proposal, &lt;a href="https://github.com/sass/sass/tree/main/accepted/nested-map-functions.md"&gt;read it in full&lt;/a&gt; on
GitHub. It&amp;rsquo;s open for comments and revisions for the next month, so if you&amp;rsquo;d
like to see something change please &lt;a href="https://github.com/sass/sass/issues/new"&gt;file an issue&lt;/a&gt; and we can discuss it!&lt;/p&gt;
</content>
  </entry>
</feed>
