---
title: Карты
table_of_contents: true
---

Карты в Sass содержат пары ключей и значений и упрощают поиск значения по соответствующему ключу.
Они записываются как `(<expression>: <expression>, <expression>: <expression>)`.
[Выражение](../syntax/structure#expressions) перед `:` - это ключ, а выражение после него - это значение, связанное с этим ключом.
Ключи должны быть уникальными, но значения могут дублироваться.
В отличие от [списков](lists), карты *необходимо* записывать в круглые скобки.
Карта без пар пишется `()`.

<% fun_fact do %>
  Проницательные читатели могут заметить, что пустая карта, `()`, записывается так же, как пустой список.
  Это потому, что он считается и картой, и списком.
  Фактически, *все* карты считаются списками!
  Каждая карта считается списком, который содержит список из двух элементов для каждой пары ключ/значение.
  Например, `(1: 2, 3: 4)` считается как `(1 2, 3 4)`.
<% end %>

Карты позволяют использовать любые значения Sass в качестве своих ключей.
[Оператор ][`==` operator] используется, чтобы определить, являются ли два ключа одинаковыми.

[`==` operator]: ../operators/equality

<% heads_up do %>
  В большинстве случаев рекомендуется использовать [строки в кавычках][quoted strings], а не [строки без кавычек][unquoted strings] для ключей карты.
  Это связано с тем, что некоторые значения, такие как названия цветов, могут *выглядеть* как строки без кавычек, но на самом деле быть другими типами.
  Чтобы избежать запутанных проблем, просто используйте кавычки!

  [quoted strings]: strings#quoted
  [unquoted strings]: strings#unquoted
<% end %>

## Использование карт

Поскольку карты не являются допустимыми значениями CSS, они ничего не делают сами по себе.
Вот почему Sass предоставляет набор [функций][functions] для создания карт и доступа к содержащимся в них значениям.

[functions]: ../modules/map

### Поиск значения

Карты предназначены для связывания ключей и значений, поэтому, естественно, есть способ получить значение, связанное с ключом: [функция `map.get($map, $key)`][`map.get($map, $key)`]!
Эта функция возвращает значение на карте, связанное с данным ключом.
Он возвращает [`null`][], если карта не содержит ключа.

[`map.get($map, $key)` function]: ../modules/map#get
[`null`]: null

<%= partial 'code-snippets/example-map-get' %>

### Сделайте что-нибудь для каждой пары

На самом деле здесь не используется функция, но это по-прежнему один из наиболее распространенных способов использования карт.
[Правило `@each`][`@each` rule] оценивает блок стилей для каждой пары ключ/значение на карте.
Ключ и значение присваиваются переменным, поэтому к ним можно легко получить доступ в блоке.

[`@each` rule]: ../at-rules/control/each

<%= partial 'code-snippets/example-each-map' %>

### Добавить на карту

Также полезно добавлять новые пары на карту или заменять значение существующего ключа.
[Функция `map.set($map, $key, $value)`][`map.set($map, $key, $value)` function] делает следующее: она возвращает копию `$map` со значением в `$key`, установленным на `$value`.

[`map.set($map, $key, $value)` function]: ../modules/map#set

<% example(autogen_css: false) do %>
  @use "sass:map";

  $font-weights: ("regular": 400, "medium": 500, "bold": 700);

  @debug map.set($font-weights, "extra-bold", 900);
  // ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)
  @debug map.set($font-weights, "bold", 900);
  // ("regular": 400, "medium": 500, "bold": 900)
  ===
  @use "sass:map"

  $font-weights: ("regular": 400, "medium": 500, "bold": 700)

  @debug map.set($font-weights, "extra-bold": 900)
  // ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)
  @debug map.set($font-weights, "bold", 900)
  // ("regular": 400, "medium": 500, "bold": 900)
<% end %>

Вместо того, чтобы устанавливать значения по одному, вы также можете объединить две существующие карты, используя [`map.merge($map1, $map2)`][].

[`map.merge($map1, $map2)`]: ../modules/map#merge

<% example(autogen_css: false) do %>
  @use "sass:map";

  $light-weights: ("lightest": 100, "light": 300);
  $heavy-weights: ("medium": 500, "bold": 700);

  @debug map.merge($light-weights, $heavy-weights);
  // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)
  ===
  @use "sass:map"

  $light-weights: ("lightest": 100, "light": 300)
  $heavy-weights: ("medium": 500, "bold": 700)

  @debug map.merge($light-weights, $heavy-weights)
  // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)
<% end %>

Если обе карты имеют одинаковые ключи, значения второй карты используются в возвращаемой карте.

<% example(autogen_css: false) do %>
  @use "sass:map";

  $weights: ("light": 300, "medium": 500);

  @debug map.merge($weights, ("medium": 700));
  // ("light": 300, "medium": 700)
  ===
  @use "sass:map";

  $weights: ("light": 300, "medium": 500)

  @debug map.merge($weights, ("medium": 700))
  // ("light": 300, "medium": 700)
<% end %>

Обратите внимание, что поскольку карты Sass [неизменяемые][immutable], `map.set()` и `map.merge()` не изменяют исходный список.

[immutable]: #immutability

## Неизменность

Карты в Sass *неизменяемы*, что означает, что содержимое значения карты никогда не изменяется.
Все функции карты Sass возвращают новые карты, а не изменяют исходные.
Неизменяемость помогает избежать множества скрытых ошибок, которые могут закрасться, когда одна и та же карта используется в разных частях таблицы стилей.

Однако вы все равно можете обновлять свое состояние с течением времени, назначая новые карты той же переменной.
Это часто используется в функциях и миксинах для отслеживания конфигурации на карте.

<% example(autogen_css: false) do %>
  @use "sass:map";

  $prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms);

  @mixin add-browser-prefix($browser, $prefix) {
    $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global;
  }

  @include add-browser-prefix("opera", o);
  @debug $prefixes-by-browser;
  // ("firefox": moz, "safari": webkit, "ie": ms, "opera": o)
  ===
  @use "sass:map"

  $prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms)

  @mixin add-browser-prefix($browser, $prefix)
    $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global


  @include add-browser-prefix("opera", o)
  @debug $prefixes-by-browser
  // ("firefox": moz, "safari": webkit, "ie": ms, "opera": o)
<% end %>
