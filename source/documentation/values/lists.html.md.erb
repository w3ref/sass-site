---
title: Списки
table_of_contents: true
---

<% impl_status dart: true, libsass: '3.5.0', ruby: '3.5.0', feature: 'Square Brackets' do %>
  Старые реализации LibSass и Ruby Sass не поддерживали списки с квадратными скобками.
<% end %>

Списки содержат последовательность других значений.
В Sass элементы в списках могут быть разделены запятыми (`Helvetica, Arial, sans-serif`), пробелами (`10px 15px 0 0`) или [косой чертой][slashes], если это согласуется со списком.
В отличие от большинства других языков, списки в Sass не требуют специальных скобок; любые [выражения][expressions], разделенные пробелами или запятыми, считаются списком. Однако вы можете писать списки в квадратных скобках (`[line1 line2]`), что полезно при использовании [`grid-template-columns`].

[slashes]: #slash-separated-lists
[expressions]: ../syntax/structure#expressions
[`grid-template-columns`]: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns

Списки Sass могут содержать один или даже ноль элементов.
Одноэлементный список может быть записан как `(<expression>,)` или `[<expression>]`, а список без элементов может быть записан как `()` или `[]`.
Кроме того, все [функции списка][list functions] будут обрабатывать отдельные значения, которых нет в списках, как если бы они были списками, содержащими это значение, что означает, что вам редко нужно явно создавать одноэлементные списки.

[list functions]: ../modules/list

<% heads_up do %>
  Пустые списки без скобок не являются допустимым CSS, поэтому Sass не позволит вам использовать их в значении свойства.
<% end %>

## Списки, разделенные косой чертой

Списки в Sass могут быть разделены косой чертой для представления таких значений, как сокращение `font: 12px/30px` для установки `font-size` и `line-height` или синтаксиса `hsl(80 100% 50% / 0.5)` для создания цвета с заданным значением непрозрачности.
Однако **списки, разделенные косой чертой, в настоящее время не могут быть записаны буквально**.
Sass исторически использовал символ `/` для обозначения деления, поэтому существующие таблицы стилей переходят на использование списков, разделенных косой чертой [`math.div()`] может быть записано только с использованием [`list.slash()`].

[`math.div()`]: ../modules/math#div
[`list.slash()`]: ../modules/list#slash

Для получения дополнительной информации смотрите [Критическое изменение: слэш как разделение][Breaking Change: Slash as Division].

[Breaking Change: Slash as Division]: ../breaking-changes/slash-div

## Использование списков

Sass предоставляет несколько [функций][functions], которые позволяют использовать списки для написания мощных библиотек стилей или сделать таблицу стилей вашего приложения более чистой и удобной в обслуживании.

[functions]: ../modules/list

### Индексы

Многие из этих функций принимают или возвращают числа, называемые *индексами*, которые относятся к элементам в списке.
Индекс 1 указывает на первый элемент списка.
Обратите внимание, что это отличается от многих языков программирования, где индексы начинаются с 0!
Sass также упрощает обращение к концу списка.
Индекс -1 относится к последнему элементу в списке, -2 относится к предпоследнему и так далее.

### Доступ к элементу

Списки бесполезны, если вы не можете извлечь из них значения.
Вы можете использовать [функцию `list.nth($list, $n)`][`list.nth($list, $n)` function], чтобы получить элемент по заданному индексу в списке.
Первый аргумент - это сам список, а второй - индекс значения, которое вы хотите получить.

[`list.nth($list, $n)` function]: ../modules/list#nth

<%= partial 'code-snippets/example-list-nth' %>

### Сделайте что-нибудь для каждого элемента

На самом деле здесь не используется функция, но это по-прежнему один из наиболее распространенных способов использования списков.
[Правило `@each`][`@each` rule] оценивает блок стилей для каждого элемента в списке и назначает этот элемент переменной.

[`@each` rule]: ../at-rules/control/each

<%= partial 'code-snippets/example-each-list' %>

### Добавить в список

Также полезно добавлять элементы в список.
[Функция `list.append($list, $val)`][`list.append($list, $val)` function] принимает список и значение и возвращает копию списка со значением, добавленным в конец.
Обратите внимание: поскольку списки Sass [неизменяемые][immutable], они не изменяют исходный список.

[`list.append($list, $val)` function]: ../modules/list#append
[immutable]: #immutability

<% example(autogen_css: false) do %>
  @debug append(10px 12px 16px, 25px); // 10px 12px 16px 25px
  @debug append([col1-line1], col1-line2); // [col1-line1, col1-line2]
  ===
  @debug append(10px 12px 16px, 25px)  // 10px 12px 16px 25px
  @debug append([col1-line1], col1-line2)  // [col1-line1, col1-line2]
<% end %>

### Найти элемент в списке

Если вам нужно проверить, находится ли элемент в списке или выяснить, по какому индексу он находится, используйте [функцию `list.index($list, $value)`][`list.index($list, $value)` function].
Он принимает список и значение, которое нужно найти в этом списке, и возвращает индекс этого значения.

[`list.index($list, $value)` function]: ../modules/list#index

<%= partial 'code-snippets/example-list-index' %>

Если значение отсутствует в списке, `list.index()` возвращает [`null`][].
Поскольку `null` равен [falsey][], вы можете использовать `list.index()` с [`@if`][] или [`if()`][], чтобы проверить, соответствует ли список содержат заданное значение.

[`null`]: null
[falsey]: ../at-rules/control/if#truthiness-and-falsiness
[`@if`]: ../at-rules/control/if
[`if()`]: ../modules#if

<% example(autogen_css: false) do %>
  @use "sass:list";

  $valid-sides: top, bottom, left, right;

  @mixin attach($side) {
    @if not list.index($valid-sides, $side) {
      @error "#{$side} is not a valid side. Expected one of #{$valid-sides}.";
    }

    // ...
  }
  ===
  @use "sass:list"

  $valid-sides: top, bottom, left, right

  @mixin attach($side)
    @if not list.index($valid-sides, $side)
      @error "#{$side} is not a valid side. Expected one of #{$valid-sides}."


    // ...
<% end %>

## Неизменность

Списки в Sass *неизменяемы*, что означает, что содержимое значения списка никогда не изменяется.
Все функции списков Sass возвращают новые списки, а не изменяют исходные.
Неизменяемость помогает избежать множества скрытых ошибок, которые могут закрасться, когда один и тот же список используется в разных частях таблицы стилей.

Однако вы все равно можете обновлять свое состояние с течением времени, назначая новые списки той же переменной.
Это часто используется в функциях и миксинах для сбора группы значений в один список.

<% example(autogen_css: false) do %>
  @use "sass:list";
  @use "sass:map";

  $prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms);

  @function prefixes-for-browsers($browsers) {
    $prefixes: ();
    @each $browser in $browsers {
      $prefixes: list.append($prefixes, map.get($prefixes-by-browser, $browser));
    }
    @return $prefixes;
  }

  @debug prefixes-for-browsers("firefox" "ie"); // moz ms
  ===
  @use "sass:list"
  @use "sass:map"

  $prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms)

  @function prefixes-for-browsers($browsers)
    $prefixes: ()
    @each $browser in $browsers
      $prefixes: list.append($prefixes, map.get($prefixes-by-browser, $browser))

    @return $prefixes


  @debug prefixes-for-browsers("firefox" "ie")  // moz ms
<% end %>

## Списки аргументов

Когда вы объявляете миксин или функцию, которая принимает [произвольные аргументы][arbitrary arguments], вы получаете значение в виде специального списка, известного как *список аргументов*.
Он действует так же, как список, содержащий все аргументы, переданные в миксин или функцию, с одной дополнительной функцией: если пользователь передал аргументы ключевого слова, к ним можно получить доступ как к карте, передав список аргументов в [функцию `meta.keywords()`][`meta.keywords()` function].

<%= partial 'code-snippets/example-mixin-arbitrary-keyword-arguments' %>

[arbitrary arguments]: ../at-rules/mixin#taking-arbitrary-arguments
[`meta.keywords()` function]: ../modules/meta#keywords
