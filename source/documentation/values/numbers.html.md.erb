---
title: Числа
introduction: >
  Числа в Sass состоят из двух компонентов: самого числа и его единиц.
  Например, в `16px` число равно `16`, а единица измерения `px`.
  В числах не может быть единиц измерения, а могут быть сложные единицы.
  Смотрите [единицы](#units) ниже для более подробной информации.
---

<% example(autogen_css: false) do %>
  @debug 100; // 100
  @debug 0.8; // 0.8
  @debug 16px; // 16px
  @debug 5px * 2px; // 10px*px (read "square pixels")
  ===
  @debug 100  // 100
  @debug 0.8  // 0.8
  @debug 16px  // 16px
  @debug 5px * 2px  // 10px*px (read "square pixels")
<% end %>

Числа Sass поддерживают те же форматы, что и числа CSS, в том числе [научная нотация][scientific notation], которая записывается с помощью `e` между числом и его степенью 10. Поскольку поддержка научной нотации в браузерах исторически была неоднородной, Sass всегда компилируется это до полностью развернутых чисел.

[scientific notation]: https://en.wikipedia.org/wiki/Scientific_notation

<% example(autogen_css: false) do %>
  @debug 5.2e3; // 5200
  @debug 6e-2; // 0.06
  ===
  @debug 5.2e3  // 5200
  @debug 6e-2  // 0.06
<% end %>

<% heads_up do %>
  Sass не делает различий между целыми и десятичными числами, поэтому, например, `math.div(5, 2)` возвращает `2.5`, а не `2`. Это то же поведение, что и JavaScript, но отличается от многих других языков программирования.
<% end %>

<%= partial 'documentation/snippets/number-units' %>

## Точность

<% impl_status dart: true, libsass: false, ruby: '3.5.0', feature: '10 Digit Default' do %>
  В LibSass и более ранних версиях Ruby Sass по умолчанию используется 5-значная числовая точность, но можно настроить использование другого числа.
  Рекомендуется, чтобы пользователи настраивали их на 10 цифр для большей точности и прямой совместимости.
<% end %>

Числа Sass поддерживают до 10 знаков точности после десятичной точки. Это означает несколько разных вещей:

* Только первые десять цифр числа после десятичной точки будут включены в сгенерированный CSS.

* Операции типа [`==`][] и [`>=`][] будут считать два числа эквивалентными, если они совпадают до десятой цифры после десятичной точки.

* Если число меньше `0.0000000001` от целого числа, оно считается целым числом для таких функций, как [`list.nth()`][], которые требуют целочисленных аргументов.

[`==`]: ../operators/equality
[`>=`]: ../operators/relational
[`list.nth()`]: ../modules/list#nth

<% example(autogen_css: false) do %>
  @debug 0.012345678912345; // 0.0123456789
  @debug 0.01234567891 == 0.01234567899; // true
  @debug 1.00000000009; // 1
  @debug 0.99999999991; // 1
  ===
  @debug 0.012345678912345  // 0.0123456789
  @debug 0.01234567891 == 0.01234567899  // true
  @debug 1.00000000009  // 1
  @debug 0.99999999991  // 1
<% end %>

<% fun_fact do %>
  Числа округляются до 10 цифр точности *отложено*, когда они используются там, где точность важна.
  Это означает, что математические функции будут внутренне работать с полным числовым значением, чтобы избежать накопления дополнительных ошибок округления.
<% end %>
