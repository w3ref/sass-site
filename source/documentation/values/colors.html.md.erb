---
title: Цвета
---

<% impl_status dart: '1.14.0', libsass: '3.6.0', ruby: '3.6.0', feature: 'Level 4 Syntax' do %>
  LibSass и более старые версии Dart или Ruby Sass не поддерживают [шестнадцатеричные цвета с альфа-каналом][hex colors with an alpha channel].

  [hex colors with an alpha channel]: https://drafts.csswg.org/css-color/#hex-notation
<% end %>

Sass имеет встроенную поддержку значений цвета.
Как и цвета CSS, они представляют точки в [цветовом пространстве sRGB][sRGB color space], хотя многие [функции цвета][color functions] Sass работают с использованием [координат HSL][HSL coordinates] (которые являются просто еще одним способом выражения цветов sRGB).
Цвета Sass могут быть записаны как шестнадцатеричные коды (`#f2ece4` или `#b37399aa`), [имена цветов CSS][CSS color names] (`midnightblue`, `transparent`) или функции [`rgb()`][], [`rgba()`][], [`hsl()`][] и [`hsla()`][].

[sRGB color space]: https://en.wikipedia.org/wiki/SRGB
[color functions]: ../modules/color
[HSL coordinates]: https://en.wikipedia.org/wiki/HSL_and_HSV
[CSS color names]: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords
[`rgb()`]: ../modules#rgb
[`rgba()`]: ../modules#rgba
[`hsl()`]: ../modules#hsl
[`hsla()`]: ../modules#hsla

<% example(autogen_css: false) do %>
  @debug #f2ece4; // #f2ece4
  @debug #b37399aa; // rgba(179, 115, 153, 67%)
  @debug midnightblue; // #191970
  @debug rgb(204, 102, 153); // #c69
  @debug rgba(107, 113, 127, 0.8); // rgba(107, 113, 127, 0.8)
  @debug hsl(228, 7%, 86%); // #dadbdf
  @debug hsla(20, 20%, 85%, 0.7); // rgb(225, 215, 210, 0.7)
  ===
  @debug #f2ece4  // #f2ece4
  @debug #b37399aa  // rgba(179, 115, 153, 67%)
  @debug midnightblue  // #191970
  @debug rgb(204, 102, 153)  // #c69
  @debug rgba(107, 113, 127, 0.8)  // rgba(107, 113, 127, 0.8)
  @debug hsl(228, 7%, 86%)  // #dadbdf
  @debug hsla(20, 20%, 85%, 0.7)  // rgb(225, 215, 210, 0.7)
<% end %>

<% fun_fact do %>
  Независимо от того, как изначально был написан цвет Sass, его можно использовать как с функциями на основе HSL, так и с функциями на основе RGB!
<% end %>

CSS поддерживает множество различных форматов, которые могут представлять один и тот же цвет: его имя, его шестнадцатеричный код и [функциональная нотация][functional notation].
Какой формат Sass выбирает для компиляции цвета, зависит от самого цвета, от того, как он был написан в исходной таблице стилей, и от текущего режима вывода.
Поскольку они могут сильно различаться, авторам таблиц стилей не следует полагаться на какой-либо конкретный формат вывода для цветов, которые они пишут.

[functional notation]: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value

Sass поддерживает множество полезных [цветовых функций][color functions], которые можно использовать для создания новых цветов на основе существующих, [смешивая цвета вместе][mixing colors together] или [масштабируя их оттенок, насыщенность или яркость][scaling their hue, saturation, or lightness].

[mixing colors together]: ../modules/color#mix
[scaling their hue, saturation, or lightness]: ../modules/color#scale

<% example(autogen_css: false) do %>
  $venus: #998099;

  @debug scale-color($venus, $lightness: +15%); // #a893a8
  @debug mix($venus, midnightblue); // #594d85
  ===
  $venus: #998099

  @debug scale-color($venus, $lightness: +15%)  // #a893a8
  @debug mix($venus, midnightblue)  // #594d85
<% end %>
