---
title: Интерполяция
table_of_contents: true
introduction: >
  Интерполяцию можно использовать практически в любом месте таблицы стилей Sass, чтобы встроить результат [выражение SassScript](syntax/structure#expressions) в фрагмент CSS.
  Просто заключите выражение в `#{}` в любом из следующих мест:
---

* [Селекторы в правилах стиля](style-rules#interpolation)
* [Имена свойств в объявлениях](style-rules/declarations#interpolation)
* [Значения настраиваемых свойств](style-rules/declarations#custom-properties)
* [CSS at-rules](at-rules/css)
* [`@extend`](at-правила/extend)
* [Обычный CSS `@import`ы](at-rules/import#plain-css-imports)
* [Строки в кавычках или без кавычек](values/strings)
* [Специальные функции](syntax/special-functions)
* [Простые имена функций CSS](at-rules/function#plain-css-functions)
* [Громкие комментарии](syntax/comments)

<% example do %>
  @mixin corner-icon($name, $top-or-bottom, $left-or-right) {
    .icon-#{$name} {
      background-image: url("/icons/#{$name}.svg");
      position: absolute;
      #{$top-or-bottom}: 0;
      #{$left-or-right}: 0;
    }
  }

  @include corner-icon("mail", top, left);
  ===
  @mixin corner-icon($name, $top-or-bottom, $left-or-right)
    .icon-#{$name}
      background-image: url("/icons/#{$name}.svg")
      position: absolute
      #{$top-or-bottom}: 0
      #{$left-or-right}: 0



  @include corner-icon("mail", top, right)
<% end %>

## В SassScript

<% impl_status dart: true, libsass: false, ruby: '4.0.0 (unreleased)', feature: "Modern Syntax" do %>
  LibSass и Ruby Sass в настоящее время используют старый синтаксис для анализа интерполяции в SassScript.
  Для большинства практических целей он работает так же, но может вести себя странно с [операторами][operators].
  Смотрите [этот документ][this document] для получения подробной информации.

  [operators]: operators
  [this document]:   https://github.com/sass/language/blob/master/accepted/free-interpolation.md#old-interpolation-rules
<% end %>

В SassScript можно использовать интерполяцию для внедрения SassScript в [строки без кавычек][unquoted
strings].
Это особенно полезно при динамическом создании имен (например, для анимации) или при использовании [значений, разделенных косой чертой][slash-separated values].
Обратите внимание, что интерполяция в SassScript всегда возвращает строку без кавычек.

[unquoted strings]: values/strings#unquoted
[slash-separated values]: operators/numeric#slash-separated-values

<% example do %>
  @mixin inline-animation($duration) {
    $name: inline-#{unique-id()};

    @keyframes #{$name} {
      @content;
    }

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: infinite;
  }

  .pulse {
    @include inline-animation(2s) {
      from { background-color: yellow }
      to { background-color: red }
    }
  }
  ===
  @mixin inline-animation($duration)
    $name: inline-#{unique-id()}

    @keyframes #{$name}
      @content


    animation-name: $name
    animation-duration: $duration
    animation-iteration-count: infinite


  .pulse
    @include inline-animation(2s)
      from
        background-color: yellow
      to
        background-color: red
<% end %>

<% fun_fact do %>
  Интерполяция полезна для вставки значений в строки, но в остальном она редко требуется в выражениях SassScript.
  Вам определенно *не* нужно просто использовать переменную в значении свойства.
  Вместо того, чтобы писать `color: #{$accent}`, вы можете просто написать `color: $accent`!
<% end %>

<% heads_up do %>
  Практически всегда использовать числовую интерполяцию - плохая идея.
  Интерполяция возвращает строки без кавычек, которые нельзя использовать для дальнейших вычислений, и избегает встроенных мер безопасности Sass, чтобы гарантировать правильное использование единиц измерения.

  В Sass есть мощная [арифметика единиц][unit arithmetic], которую вы можете использовать вместо этого.
  Например, вместо того, чтобы писать `#{$width}px`, напишите `$width * 1px` или, еще лучше, объявите переменную `$width` в терминах `px` для начала.
  Таким образом, если у `$width` уже есть единицы измерения, вы получите красивое сообщение об ошибке вместо компиляции поддельного CSS.

  [unit arithmetic]: values/numbers#units
<% end %>

## Процитированные строки

В большинстве случаев интерполяция вводит тот же текст, который использовался бы, если бы выражение использовалось как [значение свойства][property value].
Но есть одно исключение: кавычки вокруг цитируемых строк удаляются (даже если эти цитируемые строки находятся в списках).
Это позволяет писать строки в кавычках, содержащие синтаксис, недопустимый в SassScript (например, селекторы), и интерполировать их в правила стиля.

[property value]: style-rules/declarations

<% example do %>
  .example {
    unquoted: #{"string"};
  }
  ===
  .example
    unquoted: #{"string"}
<% end %>

<% heads_up do %>
  While it's tempting to use this feature to convert quoted strings to unquoted
  strings, it's a lot clearer to use the [`string.unquote()` function][].
  Instead of `#{$string}`, write `string.unquote($string)`!

  [`string.unquote()` function]: modules/string#unquote
<% end %>
