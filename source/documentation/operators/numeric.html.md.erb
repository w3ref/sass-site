---
title: Числовые операторы
table_of_contents: true
introduction: >
  Sass поддерживает стандартный набор математических операторов для [чисел](../values/numbers).
  Они автоматически конвертируют между совместимыми единицами.
  units.
---

* `<expression> + <expression>` добавляет значение первого [выражения][expression] ко второму.
* `<expression> - <expression>` вычитает значение первого [выражения][expression] из второго.
* `<expression> * <expression>` умножает значение первого [выражения][expression] на второе.
* `<expression> % <expression>` возвращает остаток от значения первого [выражения][expression], деленный на второе. Это известно как [оператор *modulo*][*modulo* operator].

[expression]: ../syntax/structure#expressions
[*modulo* operator]: https://en.wikipedia.org/wiki/Modulo_operation

<% example(autogen_css: false) do %>
  @debug 10s + 15s; // 25s
  @debug 1in - 10px; // 0.8958333333in
  @debug 5px * 3px; // 15px*px
  @debug 1in % 9px; // 0.0625in
  ===
  @debug 10s + 15s  // 25s
  @debug 1in - 10px  // 0.8958333333in
  @debug 5px * 3px  // 15px*px
  @debug 1in % 9px  // 0.0625in
<% end %>

Безразмерные числа можно использовать с числами любой единицы.

<% example(autogen_css: false) do %>
  @debug 100px + 50; // 150px
  @debug 4s * 10; // 40s
  ===
  @debug 100px + 50  // 150px
  @debug 4s * 10  // 40s
<% end %>

Числа с несовместимыми единицами измерения нельзя использовать с добавлением, вычитанием или по модулю.

<% example(autogen_css: false) do %>
  @debug 100px + 10s;
  //     ^^^^^^^^^^^
  // Error: Incompatible units px and s.
  ===
  @debug 100px + 10s
  //     ^^^^^^^^^^^
  // Error: Incompatible units px and s.
<% end %>

## Унарные операторы

Вы также можете писать `+` и `-` как унарные операторы, которые принимают только одно значение:

* `+<expression>` возвращает значение выражения, не изменяя его.
* `-<expression>` возвращает отрицательную версию значения выражения.

<% example(autogen_css: false) do %>
  @debug +(5s + 7s); // 12s
  @debug -(50px + 30px); // -80px
  @debug -(10px - 15px); // 5px
  ===
  @debug +(5s + 7s)  // 12s
  @debug -(50px + 30px)  // -80px
  @debug -(10px - 15px)  // 5px
<% end %>

<% heads_up do %>
  Поскольку `-` может относиться как к вычитанию, так и к унарному отрицанию, может возникнуть путаница, что есть что в списке, разделенном пробелами.
  На всякий случай:

  * При вычитании всегда пишите пробелы с обеих сторон от символа `-`.
  * Для отрицательного числа или унарного отрицания ставьте пробел перед знаком `-`, но не после него.
  * Заключите унарное отрицание в круглые скобки, если оно находится в списке, разделенном пробелами.

  Различные значения `-` в Sass имеют приоритет в следующем порядке:

  1. `-` как часть идентификатора. Единственное исключение - юниты; Sass обычно позволяет использовать любой действительный идентификатор в качестве идентификатора, но единицы измерения не могут содержать дефис, за которым следует цифра.
  2. `-` между выражением и буквальным числом без пробелов, которое анализируется как вычитание.
  3. Символ `-` в начале буквального числа, которое анализируется как отрицательное число.
  4. Символ `-` между двумя числами независимо от пробелов, который анализируется как вычитание.
  5. Символ `-` перед значением, отличным от буквального числа, которое анализируется как унарное отрицание.

  <% example(autogen_css: false) do %>
    @debug a-1; // a-1
    @debug 5px-3px; // 2px
    @debug 5-3; // 2
    @debug 1 -2 3; // 1 -2 3

    $number: 2;
    @debug 1 -$number 3; // -1 3
    @debug 1 (-$number) 3; // 1 -2 3
    ===
    @debug a-1  // a-1
    @debug 5px-3px  // 2px
    @debug 5-3  // 2
    @debug 1 -2 3  // 1 -2 3

    $number: 2
    @debug 1 -$number 3  // -1 3
    @debug 1 (-$number) 3  // 1 -2 3
  <% end %>
<% end %>

## Деление

<% impl_status dart: '1.33.0', libsass: false, ruby: false, feature: 'math.div()' %>

В отличие от других математических операций, деление в Sass выполняется с помощью функции [`math.div()`].
Хотя многие языки программирования используют `/` в качестве оператора деления, в CSS `/` используется как разделитель (как в `font: 15px/32px` или `hsl(120 100% 50% / 0.8)`).
Хотя Sass действительно поддерживает использование `/` в качестве оператора деления, это устарело и [будет удалено][will be removed] в будущей версии.

[`math.div()`]: ../modules/math#div
[will be removed]: ../breaking-changes/slash-div

### Значения, разделенные косой чертой

На данный момент, хотя Sass по-прежнему поддерживает `/` как оператор деления, он должен иметь возможность устранять неоднозначность между `/` как разделителем и `/` как делением.
Чтобы это работало, если два числа разделены символом `/`, Sass будет печатать результат как разделенный косой чертой, а не разделенный, если не выполняется одно из этих условий:

* Любое выражение не является буквальным числом.
* Результат сохраняется в переменной или возвращается функцией.
* Операция заключена в круглые скобки, если только эти скобки не находятся за пределами списка, содержащего операцию.
* Результат используется как часть другой операции (кроме `/`).

Вы можете использовать [`list.slash()`] для принудительного использования `/` в качестве разделителя.

[`list.slash`]: ../modules/list#slash

<% example(autogen_css: false) do %>
  @use "sass:list";

  @debug 15px / 30px; // 15px/30px
  @debug (10px + 5px) / 30px; // 0.5
  @debug list.slash(10px + 5px, 30px); // 15px/30px

  $result: 15px / 30px;
  @debug $result; // 0.5

  @function fifteen-divided-by-thirty() {
    @return 15px / 30px;
  }
  @debug fifteen-divided-by-thirty(); // 0.5

  @debug (15px/30px); // 0.5
  @debug (bold 15px/30px sans-serif); // bold 15px/30px sans-serif
  @debug 15px/30px + 1; // 1.5
  ===
  @use "sass:list";

  @debug 15px / 30px  // 15px/30px
  @debug (10px + 5px) / 30px  // 0.5
  @debug list.slash(10px + 5px, 30px)  // 15px/30px

  $result: 15px / 30px
  @debug $result  // 0.5

  @function fifteen-divided-by-thirty()
    @return 15px / 30px

  @debug fifteen-divided-by-thirty()  // 0.5

  @debug (15px/30px)  // 0.5
  @debug (bold 15px/30px sans-serif)  // bold 15px/30px sans-serif
  @debug 15px/30px + 1  // 1.5
<% end %>

<%= partial 'documentation/snippets/number-units' %>
