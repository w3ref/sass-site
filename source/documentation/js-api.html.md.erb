---
title: JavaScript API
table_of_contents: true
introduction: >
  Обе основные реализации Sass поддерживают один и тот же JavaScript API.
  [Dart Sass](/dart-sass) распространяется как чистый Javascript [пакет `sass`](https://www.npmjs.com/package/sass), а [LibSass](/libsass) распространяется как собственное расширение в [пакете `node-sass`](https://www.npmjs.com/package/node-sass).
---

## Применение

Модуль Sass предоставляет две функции с похожими API.

### `renderSync()`

Эта функция синхронно компилирует файл Sass в CSS. В случае успеха он возвращает [результат][result], а в случае неудачи выдает [ошибку][error].
Он принимает [объект параметров][options object], для которого должен быть установлен либо [параметр `file`][`file` option], либо [параметр`data`][`data` option].

[result]: #result-object
[error]: #error-object
[options object]: #options
[`file` option]: #file
[`data` option]: #data

```js
var sass = require('sass'); // or require('node-sass');

var result = sass.renderSync({file: "style.scss"});
// ...
```

### `render()`

<% impl_status dart: true, node: '3.0.0' %>

Эта функция асинхронно компилирует файл Sass в CSS и вызывает стандартный обратный вызов Node с [результатом][result] или [ошибкой][error] по завершении рендеринга.
Он принимает [объект параметров][options object], для которого должен быть установлен либо [парамет][`file` option], либо [параметр][`data` option].

<% heads_up do %>
При использовании Dart Sass, **[`renderSync()`][] по умолчанию почти в два раза быстрее, чем `render()`**, из-за накладных расходов, связанных с выполнением всего процесса оценки асинхронным.
Чтобы избежать этого снижения производительности, вы можете передать [параметр `fiber`][`fiber` option] в `render()`.

[`renderSync()`]: #rendersync
[`fiber` option]: #fiber
<% end %>

```js
var sass = require('sass'); // or require('node-sass');

sass.render({
  file: "style.scss"
}, function(err, result) {
  // ...
});
```

### `info`

<% impl_status dart: true, node: '2.0.0' %>

Свойство `info` содержит строку, которая включает разделенную табуляцией информацию о реализации Sass.
Для Dart Sass это версия Dart Sass и версия компилятора [dart2js][], используемая для его компиляции в JavaScript; для LibSass - это версия LibSass и версия [Node Sass][], в которую он обернут.

[dart2js]: https://webdev.dartlang.org/tools/dart2js
[Node Sass]: https://www.npmjs.com/package/node-sass

```js
console.log(sass.info);
// dart-sass	<%= impl_version(:dart) %>	(Sass Compiler)	[Dart]
// dart2js	2.0.0	(Dart Compiler)	[Dart]
```

### Объект Результат

Когда [`renderSync()`][] или [`render()`][] завершаются успешно, они предоставляют объект результата, который содержит информацию о компиляции.
Этот объект имеет следующие свойства:

[`renderSync()`]: #rendersync
[`render()`]: #render

#### `result.css`

Скомпилированный CSS в виде [Buffer][].
Его можно преобразовать в строку, вызвав [`Buffer.toString()`][].

[Buffer]: https://nodejs.org/api/buffer.html
[`Buffer.toString()`]: https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end

```js
var result = sass.renderSync({file: "style.scss"});

console.log(result.css.toString());
```

#### `result.map`

Исходная карта, которая сопоставляет скомпилированный CSS с исходными файлами, из которых он был сгенерирован, как [Buffer][].
Его можно преобразовать в строку, вызвав [`Buffer.toString()`][].

Это `null` или `undefined`, если только оба

* [опция `sourceMap`][`sourceMap` option] является строкой; или же
* опция `sourceMap` имеет значение `true` *и* установлена [опция `outFile`][`outFile` option].

Исходная карта использует абсолютные [`file:` URL-адреса][`file:` URLs] для ссылки на исходные файлы Sass, за исключением случаев, когда исходный файл исходит из параметра [`data` option][], и в этом случае он указывает свой URL как `stdin`.

[`sourceMap` option]: #sourcemap
[`outFile` option]: #outfile
[`file:` URLs]: https://en.wikipedia.org/wiki/File_URI_scheme

```js
var result = sass.renderSync({
  file: "style.scss",
  sourceMap: true,
  outFile: "style.css"
})

console.log(result.map.toString());
```

#### `result.stats.includedFiles`

Массив абсолютных путей ко всем файлам Sass, загруженным во время компиляции.
Если таблица стилей была загружена из [импортера][importer], который вернул содержимое таблицы стилей, необработанная строка `@use` или `@import`, которая загрузила эту таблицу стилей, включается в этот массив.

[importer]: #importer

#### `result.stats.entry`

Абсолютный путь к входному файлу, переданному как [параметр `file`][`file` option], или `"data"`, если вместо него был передан [параметр `data`][`data` option].

#### `result.stats.start`

Количество миллисекунд между 1 Января 1970 00:00:00 UTC и временем начала компиляции Sass.

#### `result.stats.end`

Количество миллисекунд между 1 Января 1970 00:00:00 UTC и временем завершения компиляции Sass.

#### `result.stats.duration`

Количество миллисекунд, которое потребовалось для компиляции файла Sass. Это всегда равно [`result.stats.start`][] минус [`result.stats.end`][].

[`result.stats.start`]: #result-stats-start
[`result.stats.end`]: #result-stats-end

### Объект Ошибка

Когда [`renderSync()`][] или [`render()`][] терпят неудачу, они предоставляют [объект `Error` object][], который содержит информацию о компиляции.
Этот объект имеет следующие свойства в дополнение к стандартным свойствам `Error`:

[`Error` object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error

#### `error.formatted`

Строковое представление ошибки.
В [Node Sass][] это более подробно, чем в [`error.toString()`][] или [`error.message`][].
В [Dart Sass][] он предоставляет ту же информацию.

[Dart Sass]: /dart-sass
[`error.toString()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString
[`error.message`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message

#### `error.file`

Таблица стилей, в которой произошла ошибка. Если ошибка произошла в таблице стилей, загруженной с диска, это абсолютный путь к этой таблице стилей.
Если ошибка произошла в таблице стилей, загруженной из [импортера][importer], вернувшего содержимое таблицы стилей, это необработанная строка из `@use` или `@import`, которые загрузили эту таблицу стилей.
Если это произошло в содержимом [параметра `data`][`data` option], это строка `"stdin"`.

#### `error.line`

Строка в [`error.file`][], в которой произошла ошибка.

[`error.file`]: #error-file

#### `error.column`

Столбец [`error.line`][] в [`error.file`][], в котором произошла ошибка.

[`error.line`]: #error-line

#### `error.status`

[Статус выхода][exit status], который следует использовать, если эта ошибка приводит к завершению работы включающей программы.

[exit status]: https://en.wikipedia.org/wiki/Exit_status

## Параметры

### Ввод

Эти параметры управляют тем, как Sass загружает входные файлы.

#### `file`

<% impl_status dart: '1.11.0', node: :partial, feature: "Plain CSS Files" do %>
  Node Sass и более старые версии Dart Sass поддерживают загрузку файлов с расширением `.css`, но вопреки спецификации они обрабатываются как файлы SCSS, а не анализируются как CSS.
  Это поведение устарело в Node Sass, и в настоящее время разрабатывается обновление, чтобы вместо этого загрузить их как простой CSS.

  Все версии Node Sass и Dart Sass в остальном поддерживают параметр `file`, как описано ниже.
<% end %>

Эта строковая опция - это путь к файлу для загрузки и компиляции Sass.
Если расширение файла - `.scss`, он будет проанализирован как [SCSS][];
если это `.sass`, он будет проанализирован как [синтаксис с отступом][indented syntax];
а если это `.css`, он будет проанализирован как [простой CSS][plain CSS].
Если у него нет расширения, он будет проанализирован как SCSS.

[SCSS]: syntax#scss
[indented syntax]: syntax#the-indented-syntax
[plain CSS]: at-rules/import#importing-css

Если оба параметра `file` и [`data`][`data` option] переданы, параметр `file` используется как путь к таблице стилей для сообщения об ошибках, но параметр `data` используется как содержимое таблица стилей.
В этом случае расширение опции `file` *не* используется для определения синтаксиса таблицы стилей.

```js
sass.renderSync({file: "style.scss"});
```

#### `data`

Эта строковая опция предоставляет содержимое таблицы стилей для компиляции. Если также не передан [параметр `file`][`file` option], URL-адрес таблицы стилей установлен на `"stdin"`.

По умолчанию эта таблица стилей анализируется как [SCSS][].
Это можно контролировать с помощью [параметра `indentedSyntax`][`indentedSyntax` option].

[`indentedSyntax` option]: #indentedsyntax

```js
sass.renderSync({
  data: `
h1 {
  font-size: 40px;
}`
});
```

### `indentedSyntax`

Этот флаг контролирует, анализируется ли [параметр `data`][`data` option] как [синтаксис с отступом][indented syntax] или нет.
По умолчанию это `false`.
Это не влияет на таблицы стилей, загруженные с использованием [параметра `file`][`file` option].

```js
sass.renderSync({
  data: `
h1
  font-size: 40px`,
  indentedSyntax: true
});
```

### `includePaths`

<% impl_status dart: '1.15.0', node: '3.9.0', feature: "SASS_PATH" do %>
  Более ранние версии Dart Sass и Node Sass не поддерживали переменную окружения `SASS_PATH`.
<% end %>

Этот параметр массива строк предоставляет [пути загрузки][load paths] для Sass для поиска импорта.
Более ранние пути загрузки имеют приоритет над более поздними.

[load paths]: at-rules/import#load-paths

```js
sass.renderSync({
  file: "style.scss",
  includePaths: ["node_modules/bootstrap/dist/css"]
});
```

Пути загрузки также загружаются из `SASS_PATH` [переменная среды][environment variable], если она установлена.
Эта переменная должна быть списком путей, разделенных `;` (в Windows) или `:` (в других операционных системах).
Пути загрузки из опции `includePaths` имеют приоритет над путями загрузки из `SASS_PATH`.

[environment variable]: https://en.wikipedia.org/wiki/Environment_variable

```shellsession
$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css
```

### Вывод

Эти параметры управляют тем, как Sass создает выходные файлы.

#### `outputStyle`

Эта строковая опция управляет стилем вывода результирующего CSS.
Есть четыре возможных стиля вывода:

* `"expanded"` (по умолчанию для Dart Sass) записывает каждый селектор и объявление в отдельной строке.
* `"compressed"` удаляет как можно больше лишних символов и записывает всю таблицу стилей в одну строку.
* `"nested"` (значение по умолчанию для Node Sass, не поддерживаемое Dart Sass) делает отступ правил CSS для соответствия вложенности исходного кода Sass.
* `compact` (не поддерживается Dart Sass) помещает каждое правило CSS в отдельную строку.

```js
var source = `
h1 {
  font-size: 40px;
  code {
    font-face: Roboto Mono;
  }
}`;

var result = sass.renderSync({
  data: source,
  outputStyle: "expanded"
});
console.log(result.css.toString());
// h1 {
//   font-size: 40px;
// }
// h1 code {
//   font-face: Roboto Mono;
// }

result = sass.renderSync({
  data: source,
  outputStyle: "compressed"
});
console.log(result.css.toString());
// h1{font-size:40px}h1 code{font-face:Roboto Mono}

result = sass.renderSync({
  data: source,
  outputStyle: "nested"
});
console.log(result.css.toString());
// h1 {
//   font-size: 40px; }
//   h1 code {
//     font-face: Roboto Mono; }

result = sass.renderSync({
  data: source,
  outputStyle: "compact"
});
console.log(result.css.toString());
// h1 { font-size: 40px; }
// h1 code { font-face: Roboto Mono; }
```

#### `precision`

<% impl_status dart: false, node: true do %>
  По соображениям производительности Dart Sass не позволяет настраивать свою точность.
  Он всегда поддерживает 10 цифр числовой точности.
<% end %>

Эта целочисленная опция определяет [точность][precision], которая будет использоваться при генерации CSS, включающего числа.
По умолчанию для Node Sass установлено значение 5.

[precision]: values/numbers#precision

```js
var result = sass.renderSync({
  data: `
@use "sass:math";

h1 {
  font-size: math.div(100px, 3);
}`,
  precision: 20
});

console.log(result.css.toString());
// h1 {
//  font-size: 33.333333333333336px; }
```

#### `indentType`

<% impl_status dart: true, node: '3.0.0' %>

Эта строковая опция определяет, должен ли сгенерированный CSS использовать для отступов пробелы (со значением `"space"`) или табуляции (со значением `"tab"`).
По умолчанию это `"space"`.

```js
var result = sass.renderSync({
  file: "style.scss",
  indentType: "tab",
  indentWidth: 1
});

result.css.toString();
// "h1 {\n\tfont-size: 40px;\n}\n"
```

#### `indentWidth`

<% impl_status dart: true, node: '3.0.0' %>

Этот целочисленный параметр определяет, сколько пробелов или табуляции (в зависимости от [параметра `indentType`][`indentType` option]) следует использовать для каждого уровня отступа в сгенерированном CSS.
По умолчанию оно равно 2 и должно быть от 0 до 10 (включительно).

[`indentType` option]: #indenttype

```js
var result = sass.renderSync({
  file: "style.scss",
  indentWidth: 4
});

console.log(result.css.toString());
// h1 {
//    font-size: 40px;
// }
```

#### `linefeed`

<% impl_status dart: true, node: '3.0.0' %>

Эта строковая опция определяет, какая последовательность символов используется в конце каждой строки в сгенерированном CSS.
Может иметь следующие значения:

* `lf` (по умолчанию) использует U+000A LINE FEED.
* `lfcr` использует U+000A LINE FEED, за которым следует U+000D CARRIAGE RETURN.
* `cr` (по умолчанию) использует U+000D CARRIAGE RETURN.
* `crlf` использует U+000D CARRIAGE RETURN, за которым следует U+000A LINE FEED.

```js
var result = sass.renderSync({
  file: "style.scss",
  linefeed: "crlf"
});

console.log(result.css.toString());
// "h1 {\r\n  font-size: 40px;\r\n}\r\n"
```

#### `sourceComments`

<% impl_status dart: false, node: true do %>
  Эта опция не поддерживается Dart Sass, потому что исходные карты рекомендуются как лучший способ определить, где определено правило стиля.
<% end %>

Этот флаг заставляет Sass генерировать комментарии для каждого правила стиля, которые указывают, где каждое правило стиля было определено в исходной таблице стилей.
По умолчанию это `false`.

```js
var result = sass.renderSync({
  file: "style.scss",
  sourceComments: true
});

console.log(result.css.toString());
// /* line 1, style.scss */
// h1 {
//   font-size: 40px;
// }
```

### Исходные карты

<%= partial 'documentation/snippets/source-maps' %>

Sass JS API делает исходные карты доступными с помощью [поля `result.map`][`result.map` field].

[`result.map` field]: #result-map

#### `sourceMap`

Этот флаг контролирует создание исходных карт.

Если эта опция является строкой, это путь, по которому, как ожидается, будет записана исходная карта, который используется для ссылки на исходную карту из сгенерированного CSS и для ссылки *из* исходной карты на исходные файлы Sass.
Обратите внимание: если параметр `sourceMap` является строкой, а [параметр `outFile`][`outFile` option] не передан, Sass предполагает, что CSS будет записан в тот же каталог, что и [параметр `file`][`file` option], если он прошедший.

Если этот параметр имеет значение `true`, предполагается, что путь является параметром `outFile` с добавленным в конец `.map`.
Если это `true` и опция `outFile` не передана, это не имеет никакого эффекта.

```js
var result = sass.renderSync({
  file: "style.scss",
  sourceMap: "out.map"
})
console.log(result.css.toString());
// h1 {
//   font-size: 40px;
// }
// /*# sourceMappingURL=out.map */

result = sass.renderSync({
  file: "style.scss",
  sourceMap: true,
  outFile: "out.css"
})
console.log(result.css.toString());
// h1 {
//   font-size: 40px;
// }
// /*# sourceMappingURL=out.css.map */
```

#### `outFile`

Эта строковая опция - это место, в которое Sass ожидает сохранения сгенерированного CSS.
Он используется для определения URL-адреса, используемого для ссылки из сгенерированного CSS на исходную карту и *из* исходной карты в исходные файлы Sass.

<% heads_up do %>
  Несмотря на название, Sass *не* записывает вывод CSS в этот файл.
  Вызывающий должен сделать это сам.
<% end %>

```js
result = sass.renderSync({
  file: "style.scss",
  sourceMap: true,
  outFile: "out.css"
})
console.log(result.css.toString());
// h1 {
//   font-size: 40px;
// }
// /*# sourceMappingURL=out.css.map */
```

#### `omitSourceMapUrl`

Этот флаг заставляет Sass не связывать сгенерированный CSS с исходной картой.

```js
var result = sass.renderSync({
  file: "style.scss",
  sourceMap: "out.map",
  omitSourceMapUrl: true
})
console.log(result.css.toString());
// h1 {
//   font-size: 40px;
// }
```

#### `sourceMapContents`

Этот флаг сообщает Sass о необходимости встраивать все содержимое файлов Sass, которые внесли свой вклад в сгенерированный CSS, в исходную карту.
Это может привести к очень большим исходным картам, но это гарантирует, что источник будет доступен на любом компьютере, независимо от того, как обслуживается CSS.

```js
sass.renderSync({
  file: "style.scss",
  sourceMap: "out.map",
  sourceMapContents: true
})
```

#### `sourceMapEmbed`

Этот флаг сообщает Sass о необходимости встраивания содержимого файла исходной карты в сгенерированный CSS, а не создания отдельного файла и ссылки на него из CSS.

```js
sass.renderSync({
  file: "style.scss",
  sourceMap: "out.map",
  sourceMapEmbed: true
})
```

#### `sourceMapRoot`

Эта строковая опция добавляется ко всем ссылкам из исходной карты на исходные файлы Sass.

### Плагины

Эти параметры используют обратные вызовы JavaScript для расширения функциональности компиляции Sass.

#### `fiber`

При использовании Dart Sass, **`renderSync()` более чем в два раза быстрее, чем `render()`**, из-за накладных расходов на асинхронные обратные вызовы.
Чтобы избежать этого снижения производительности, `render()` может использовать пакет [`fibers`][fibers] для вызова асинхронных импортеров из синхронного пути кода. Чтобы включить это, передайте класс `Fiber` параметру `fiber`:

[fibers]: https://www.npmjs.com/package/fibers

```js
var sass = require("sass");
var Fiber = require("fibers");

sass.render({
  file: "input.scss",
  importer: function(url, prev, done) {
    // ...
  },
  fiber: Fiber
}, function(err, result) {
  // ...
});
```

Эта опция разрешена, но не будет иметь никакого эффекта при использовании Node Sass или при использовании функции `renderSync()`.

#### `functions`

Этот параметр определяет дополнительные встроенные функции Sass, доступные во всех таблицах стилей.
Это объект, ключи которого являются сигнатурами функций Sass, а значения - функциями JavaScript.
Каждая функция должна принимать те же аргументы, что и ее подпись.
Если подпись принимает [произвольные аргументы][arbitrary arguments], функция JavaScript
должна принимать единственный аргумент.

[arbitrary arguments]: at-rules/function#taking-arbitrary-arguments

Функции передаются в виде JavaScript-представлений [типов значений Sass][Sass value types] и должны возвращать то же самое.
Все функции могут возвращаться синхронно, но функции, переданные в асинхронную [][`render()` function], также могут принимать дополнительный обратный вызов, которому они могут асинхронно передавать результат функции после ее завершения.

[Sass value types]: #value-types
[`render()` function]: #render

Если функция синхронно выдает ошибку, об этой ошибке сообщается вызывающему объекту функции, и компиляция таблицы стилей завершается ошибкой.
В настоящее время нет возможности асинхронно сообщить об ошибке.

<% heads_up do %>
  При написании пользовательских функций важно убедиться, что все аргументы имеют ожидаемые вами типы.
  В противном случае таблицы стилей пользователей могут дать сбой из-за трудных для отладки способов или, что еще хуже, компилируются в бессмысленный CSS.
<% end %>

```js
sass.render({
  data: `
h1 {
  font-size: pow(2, 5) * 1px;
}`,
  functions: {
    // This function uses the synchronous API, and can be passed to either
    // renderSync() or render().
    'pow($base, $exponent)': function(base, exponent) {
      if (!(base instanceof sass.types.Number)) {
        throw "$base: Expected a number.";
      } else if (base.getUnit()) {
        throw "$base: Expected a unitless number.";
      }

      if (!(exponent instanceof sass.types.Number)) {
        throw "$exponent: Expected a number.";
      } else if (exponent.getUnit()) {
        throw "$exponent: Expected a unitless number.";
      }

      return new sass.types.Number(
          Math.pow(base.getValue(), exponent.getValue()));
    },

    // This function uses the asynchronous API, and can only be passed to
    // render().
    'sqrt($number)': function(number, done) {
      if (!(number instanceof sass.types.Number)) {
        throw "$number: Expected a number.";
      } else if (number.getUnit()) {
        throw "$number: Expected a unitless number.";
      }

      done(new sass.types.Number(Math.sqrt(number.getValue())));
    }
  }
}, function(err, result) {
  console.log(result.css.toString());
  // h1 {
  //   font-size: 32px;
  // }
});
```

#### `importer`

<% impl_status dart: true, node: '3.0.0' do %>
  Версии Node Sass до 3.0.0 не поддерживают массивы импортеров и не поддерживают импортеры, возвращающие объекты `Error`.

  Версии Node Sass до 2.0.0 вообще не поддерживают параметр `importer`.
<% end %>

<% impl_status dart: '1.20.2', node: false, feature: "Import order" do %>
  Версии Dart Sass до 1.20.2 предпочитали разрешать импорт с использованием путей загрузки ([includePaths](#includepaths)) перед их разрешением с помощью настраиваемых импортеров.

  Все версии Node Sass в настоящее время передают импорт импортерам перед их загрузкой относительно файла, в котором появляется `@import`.
  Такое поведение считается неправильным, и на него не следует полагаться, потому что оно нарушает принцип *локальности*, который гласит, что должна быть возможность рассуждать о таблице стилей, не зная всего о том, как настроена вся система.
  Если пользователь пытается импортировать таблицу стилей относительно другой таблицы стилей, этот импорт должен *всегда* работать.
  Невозможно, чтобы какая-то конфигурация где-то еще могла его сломать.
<% end %>

Эта опция определяет один или несколько дополнительных обработчиков для загрузки файлов, когда встречается [правило `@use`][`@use` rule] или [ правило `@import`][`@import` rule].
Это может быть либо отдельная функция JavaScript, либо массив функций.
Этим функциям всегда передаются два аргумента:

[`@use` rule]: at-rules/use
[`@import` rule]: at-rules/import

1. URL-адрес правила `@use` или `@import` в виде строки, точно такой, как он отображается в таблице стилей.
2. Строка, идентифицирующая таблицу стилей, содержащую `@use` или `@import`. Формат этого идентификатора зависит от того, как эта таблица стилей была загружена:
   * Если таблица стилей была загружена из файловой системы, это абсолютный путь к ее файлу.
   * Если таблица стилей была загружена из импортера, который вернул ее содержимое, это URL-адрес правила `@use` или `@import`, которое загрузило ее.
   * Если таблица стилей была получена из [параметра `data`][`data` option], это строка `"stdin"`.

Импортеры должны вернуть один из следующих типов:

* Объект с ключом `contents`, значением которого является содержимое таблицы стилей (в синтаксисе SCSS). Это заставляет Sass загружать содержимое этой таблицы стилей.
* Объект с ключом `file`, значением которого является путь на диске. Это заставляет Sass загружать этот файл, как если бы он был импортирован напрямую.
* `null`, что указывает на то, что он не распознает URL, и вместо этого следует попробовать другой импортер.
* [Объект `Error`][`Error` object], указывающий на сбой импорта.

Все импортеры могут возвращаться синхронно, но импортеры, переданные асинхронной [функции `render()`][`render()` function], также могут принимать дополнительный обратный вызов, которому они могут асинхронно передавать результат импорта после его завершения.

Импорт разрешается попыткой в следующем порядке:

* Загрузка файла, относящегося к файлу, в котором появилось `@use` или `@import`.

* Каждый пользовательский импортер.

* Загрузка файла относительно текущего рабочего каталога.

* Каждый путь загрузки в [includePaths](#includepaths)

* Каждый путь загрузки, указанный в переменной среды `SASS_PATH`, которая должна быть разделена точкой с запятой в Windows и двоеточием в другом месте.

<% impl_status dart: '1.33.0', node: false, feature: "this.fromImport" %>

Импортер может определить, вызывается ли он из правила `@import`, проверив `this.fromImport`.
Его следует использовать *только* для определения, загружать или нет [файлы только для импорта][import-only files].

[import-only files]: https://sass-lang.com/documentation/at-rules/import#import-only-files

```js
sass.render({
  file: "style.scss",
  importer: [
    // This importer uses the synchronous API, and can be passed to either
    // renderSync() or render().
    function(url, prev) {
      // This generates a stylesheet from scratch for `@use "big-headers"`.
      if (url != "big-headers") return null;

      return {
        contents: `
h1 {
  font-size: 40px;
}`
      };
    },

    // This importer uses the asynchronous API, and can only be passed to
    // render().
    function(url, prev, done) {
      // Convert `@use "foo/bar"` to "node_modules/foo/sass/bar".
      var components = url.split('/');
      var innerPath = components.slice(1).join('/');
      done({
        file: `node_modules/${components.first}/sass/${innerPath}`
      });
    }
  ]
}, function(err, result) {
  // ...
});
```

### Остальные

#### `quietDeps`

<% impl_status dart: '1.35.0', node: false %>

Если для этой опции установлено значение `true`, Sass не будет выводить предупреждения, вызванные зависимостями.
«Зависимость» определяется как любой файл, загруженный через [путь загрузки][load path] или [импортер][importer].
Таблицы стилей, импортированные относительно точки входа, не считаются зависимостями.

[load path]: #includepath

Это полезно для отключения предупреждений об устаревании, которые вы не можете исправить самостоятельно.
Однако, пожалуйста, *также* сообщите своим зависимостям об устаревших версиях, чтобы их можно было исправить как можно скорее!

<% heads_up do %>
  Если `render()` или `renderSync()` вызывается без параметра [параметра `file`][`file` option], *все* таблицы стилей, которые он загружает, будут считаться зависимостями.
  Поскольку у него нет собственного пути, все, что он загружает, исходит из пути загрузки, а не относительного импорта.
<% end %>

#### `verbose`

<% impl_status dart: '1.35.0', node: false %>

По умолчанию Dart Sass будет печатать только пять экземпляров одного и того же предупреждения об устаревании для каждой компиляции, чтобы не наводнять пользователей шумом консоли.
Если вы установите для `verbose` значение `true`, вместо этого он будет печатать каждое обнаруженное предупреждение об устаревании.

## Типы значений

Для поддержки [пользовательских функций][custom functions], Sass предоставляет доступ к оболочкам JavaScript для различных [типов значений][value types]. Все они представлены в пространстве имен `types` в основном модуле Sass.

[custom functions]: #functions
[value types]: values

<% heads_up do %>
  Все типы значений поддерживают методы, которые изменяют объекты значений.
  Пользователям настоятельно не рекомендуется использовать эти методы (за исключением типов [`Map`][`Map` type] и [`List`][`List` type], где они необходимы для создания новых значений), поскольку они не соответствуют общему принципу, согласно которому Ценности Sass неизменны.
  Пользователи должны создавать новые объекты, а не изменять существующие.


  [`Map` type]: #types-map
  [`List` type]: #types-list
<% end %>

### `types.Number`

Этот класс представляет [числа Sass][Sass number].

[Sass number]: values/numbers

#### `new types.Number(value[, unit = ''])`

Создает новый номер Sass с заданным числовым значением и строковой единицей.
[Комплексные единицы][Complex units] анализируются из строки единиц измерения: единицы числителя отделяются от знаменателя символом `/`.
Множественные числители и/или знаменатели могут быть разделены знаком `*`.

[Complex units]: values/numbers#units

```js
new sass.types.Number(0.5); // == 0.5
new sass.types.Number(10, "px"); // == 10px
new sass.types.Number(10, "px*px"); // == 10px * 1px
new sass.types.Number(10, "px/s"); // == math.div(10px, 1s)
new sass.types.Number(10, "px*px/s*s"); // == 10px * math.div(math.div(1px, 1s), 1s)
```

#### `number.getValue()`

Возвращает значение числа без учета единиц измерения.

<% heads_up do %>
  Это означает, что `96px` и `1in` будут возвращать разные значения, даже если они имеют одинаковую длину.
<% end %>

```js
var number = new sass.types.Number(10, "px");
console.log(number.getValue()); // 10
```

#### `number.getUnit()`

Возвращает единицы измерения числа в виде строки.
Сложные единицы возвращаются в том же формате, в котором их принимает [конструктор][new Number].

[new Number]: #new-types-number-value-unit

```js
// number is `10px`.
console.log(number.getUnit()); // "px"

// number is `math.div(10px, 1s)`.
console.log(number.getUnit()); // "px/s"
```

#### `number.setValue(value)`

Устанавливает значение числа независимо от его единиц измерения.

#### `number.setUnit(unit)`

Устанавливает единицы измерения числа, независимо от его числового значения.
Сложные единицы указываются в том же формате, что и [конструктор][new Number].

### `types.String`

Этот класс представляет [строку Sass][Sass string].

[Sass string]: values/strings

<% heads_up do %>
  Этот API в настоящее время не предоставляет возможности различать строку [в кавычках][quoted] и [без кавычек][unquoted].

  [quoted]: values/strings#quoted
  [unquoted]: values/strings#unquoted
<% end %>

#### `new types.String(value)`

Создает новую строку Sass без кавычек с заданным значением.

<% heads_up do %>
  В настоящее время этот API не предоставляет возможности создания строки [в кавычках][quoted].

  [quoted]: values/strings#quoted
<% end %>

```js
new sass.types.String("Arial"); // == Arial
```

#### `string.getValue()`

Возвращает содержимое строки.
Если строка содержит escape-последовательности, эти escape-символы включаются буквально, если они [без кавычек][unquoted], а значения escape-символов включаются, если они [в кавычках][quoted].

[unquoted]: values/strings#unquoted
[quoted]: values/strings#quoted

```js
// string is `Arial`.
string.getValue(); // "Arial"

// string is `"Helvetica Neue"`.
string.getValue(); // "Helvetica Neue"

// string is `\1F46D`.
string.getValue(); // "\\1F46D"

// string is `"\1F46D"`.
string.getValue(); // "👭"
```

#### `string.setValue(value)`

Устанавливает содержимое строки.

<% heads_up do %>
  Даже если строка была изначально заключена в кавычки, это приведет к тому, что она не будет заключена в кавычки.
<% end %>

### `types.Color`

Этот класс представляет [цвет Sass][Sass color].

[Sass color]: values/colors

#### `new types.Color(red, green, blue[, alpha = 1])`

Создает новый цвет Sass с заданными красным, зеленым, синим и альфа-каналами.
Красный, зеленый и синий каналы должны быть целыми числами от 0 до 255 (включительно), а альфа должна быть от 0 до 1 (включительно).

```js
new sass.types.Color(107, 113, 127); // #6b717f
new sass.types.Color(0, 0, 0, 0); // rgba(0, 0, 0, 0)
```

#### `new types.Color(argb)`

Создает новый цвет Sass с альфа, красным, зеленым и синим каналами, взятыми из соответствующих двухбайтовых фрагментов шестнадцатеричного числа.

```js
new sass.types.Color(0xff6b717f); // #6b717f
new sass.types.Color(0x00000000); // rgba(0, 0, 0, 0)
```

#### `color.getR()`

Возвращает красный канал цвета как целое число от 0 до 255.

```js
// color is `#6b717f`.
color.getR(); // 107

// color is `#b37399`.
color.getR(); // 179
```

#### `color.getG()`

Возвращает зеленый канал цвета как целое число от 0 до 255.

```js
// color is `#6b717f`.
color.getG(); // 113

// color is `#b37399`.
color.getG(); // 115
```

#### `color.getB()`

Возвращает синий канал цвета как целое число от 0 до 255.

```js
// color is `#6b717f`.
color.getG(); // 127

// color is `#b37399`.
color.getG(); // 153
```

#### `color.getA()`

Возвращает альфа-канал цвета в виде числа от 0 до 1.

```js
// color is `#6b717f`.
color.getA(); // 1

// color is `transparent`.
color.getA(); // 0
```

#### `color.setR(red)`

Устанавливает красный канал цвета. Значение должно быть целым числом от 0 до 255 (включительно).

#### `color.setG(green)`

Устанавливает зеленый канал цвета. Значение должно быть целым числом от 0 до 255 (включительно).

#### `color.setB(blue)`

Устанавливает синий канал цвета. Значение должно быть целым числом от 0 до 255 (включительно).

#### `color.setA(alpha)`

Устанавливает альфа-канал цвета. Значение должно быть целым числом от 0 до 255 (включительно).

### `types.Boolean`

Этот класс представляет [логическое Sass][Sass boolean].

[Sass boolean]: values/booleans

Пользовательские функции должны уважать понятие [истинности][truthiness] Sass, рассматривая `false` и `null` как ложные, а все остальное как истинное.

[truthiness]: at-rules/control/if#truthiness-and-falsiness

<% heads_up do %>
  Вызов `new sass.types.Boolean()` запрещен.
<% end %>

#### `types.Boolean.TRUE`

Значение Sass `true`.

#### `types.Boolean.FALSE`

Значение Sass `false`.

#### `boolean.getValue()`

Возвращает `true`, если логическое значение является значением Sass `true`, и `false`, если это значение Sass `false`.

```js
// boolean is `true`.
boolean.getValue(); // true
boolean === sass.types.Boolean.TRUE; // true

// boolean is `false`.
boolean.getValue(); // false
boolean === sass.types.Boolean.FALSE; // true
```

### `types.List`

Этот класс представляет [список Sass][Sass list].

[Sass list]: values/lists

<% heads_up do %>
  В методах этого типа списков используется индексирование на основе 0, хотя в списках Sass используется индексирование на основе 1.
  Эти методы также не поддерживают использование отрицательных чисел для индексации в обратном направлении от конца списка.
<% end %>

#### `new types.List(length[, comma = true])`

Создает новый список Sass с заданным количеством элементов.
Если `comma` истинна, список разделен запятыми; в противном случае - через пробел.

<% heads_up do %>
  Начальные значения элементов списка не определены.
  Эти элементы должны быть установлены с помощью [метода `setValue()`][`setValue()` method] перед доступом к ним или передачей списка обратно в Sass.

  [`setValue()` method]: #list-setvalue-index-value
<% end %>

```js
var list = new sass.types.List(3);
list.setValue(0, new sass.types.Number(10, "px"));
list.setValue(1, new sass.types.Number(15, "px"));
list.setValue(2, new sass.types.Number(32, "px"));
list; // 10px, 15px, 32px
```

#### `list.getValue(index)`

Возвращает элемент по заданному (отсчитываемому от 0) индексу в списке.

```js
// list is `10px, 15px, 32px`
list.getValue(0); // 10px
list.getValue(2); // 32px
```

#### `list.getSeparator()`

Возвращает `true`, если список разделен запятыми, и `false` в противном случае.

```js
// list is `10px, 15px, 32px`
list.getSeparator(); // true

// list is `1px solid`
list.getSeparator(); // false
```

#### `list.getLength()`

Возвращает количество элементов в списке.

```js
// list is `10px, 15px, 32px`
list.getLength(); // 3

// list is `1px solid`
list.getLength(); // 2
```

#### `list.setValue(index, value)`

Устанавливает элемент по заданному (отсчитываемому от 0) индексу в списке к заданному значению.

```js
// list is `10px, 15px, 32px`
list.setValue(1, new sass.types.Number(18, "px"));
list; // 10px, 18px, 32px
```

#### `list.setSeparator(comma)`

Устанавливает, разделяется ли список запятыми.

### `types.Map`

Этот класс представляет [карту Sass][Sass map].

[Sass map]: values/maps

<% heads_up do %>
  Этот тип карты представлен в виде списка пар ключ-значение, а не отображения ключей в значения.
  Единственный способ найти значение, связанное с данным ключом, - это итерация по проверке карты для этого ключа.

   Карты, созданные с помощью этого API, по-прежнему не могут иметь повторяющиеся ключи.
<% end %>

#### `new types.Map(length)`

Создает новую карту Sass с заданным количеством пар ключ/значение.

<% heads_up do %>
  Начальные ключи и значения карты не определены.
  Они должны быть установлены с помощью [метода `setKey()`][`setKey()` method] и [метода `setValue()`][`setValue()` method] перед доступом к ним или передачей карты обратно в Sass.

  [`setKey()` method]: #map-setkey-index-key
  [`setValue()` method]: #map-setvalue-index-value
<% end %>

```js
var map = new sass.types.Map(2);
map.setKey(0, new sass.types.String("width"));
map.setValue(0, new sass.types.Number(300, "px"));
map.setKey(1, new sass.types.String("height"));
map.setValue(1, new sass.types.Number(100, "px"));
map; // (width: 300px, height: 100px)
```

#### `map.getKey(index)`

Возвращает ключ в паре ключ/значение по заданному (отсчитываемому от 0) индексу на карте.

```js
// map is `(width: 300px, height: 100px)`
map.getKey(0); // width
map.getKey(1); // height
```

#### `map.getValue(index)`

Возвращает значение в паре ключ/значение по заданному (отсчитываемому от 0) индексу на карте.

```js
// map is `(width: 300px, height: 100px)`
map.getValue(0); // 300px
map.getValue(1); // 100px
```

#### `map.getLength()`

Возвращает количество пар ключ/значение на карте.

```js
// map is `("light": 200, "medium": 400, "bold": 600)`
map.getLength(); // 3

// map is `(width: 300px, height: 100px)`
map.getLength(); // 2
```

#### `map.setKey(index, key)`

Устанавливает ключ пары ключ/значение по заданному (основанному на 0) индексу на карте в заданное значение.

```js
// map is `("light": 200, "medium": 400, "bold": 600)`
map.setKey(0, new sass.types.String("lighter"));
map; // (lighter: 200, "medium": 400, "bold": 600)
```

#### `map.setValue(index, value)`

Устанавливает значение пары ключ/значение по заданному (основанному на 0) индексу на карте в заданное значение.

```js
// map is `("light": 200, "medium": 400, "bold": 600)`
map.setKey(1, new sass.types.Number(300));
map; // ("light": 200, "medium": 300, "bold": 600)
```

### `types.Null`

Этот класс представляет [значение Sass `null`][Sass `null` value].

[Sass `null` value]: values/null

<% heads_up do %>
  Вызов `new sass.types.Null()` запрещен.
<% end %>

#### `types.Null.NULL`

Значение Sass `null`.

## Интеграции

Большинство популярных систем сборки Node.js имеют интеграции, доступные для JS API:

* Webpack использует [пакет `sass-loader`][`sass-loader` package].
* Gulp использует [пакет `gulp-sass`][`gulp-sass` package].
* Broccoli использует [пакет `broccoli-sass-source-maps`][`broccoli-sass-source-maps` package].
* Ember использует [пакет `ember-cli-sass`][`ember-cli-sass` package].
* Grunt использует [пакет `grunt-sass`][`grunt-sass` package].

[`sass-loader` package]: https://www.npmjs.com/package/sass-loader
[`gulp-sass` package]: https://www.npmjs.com/package/gulp-sass
[`broccoli-sass-source-maps` package]: https://www.npmjs.com/package/broccoli-sass-source-maps
[`ember-cli-sass` package]: https://www.npmjs.com/package/ember-cli-sass
[`grunt-sass` package]: https://www.npmjs.com/package/grunt-sass
