---
title: sass:selector
---

<%= partial '../snippets/built-in-module-status' %>

## Значения селектора

Функции в этом модуле проверяют и управляют селекторами.
Всякий раз, когда они возвращают селектор, это всегда разделенный запятыми [список][list] (список селектора), содержащий списки, разделенные пробелами (сложные селекторы), которые содержат [строки без кавычек][unquoted strings] (составные селекторы).
Например, селектор `.main aside:hover, .sidebar p` будет возвращен как:

[list]: ../values/lists
[unquoted strings]: ../values/strings#unquoted

```scss
@debug ((unquote(".main") unquote("aside:hover")),
        (unquote(".sidebar") unquote("p")));
// .main aside:hover, .sidebar p
```

Аргументы селектора для этих функций могут быть в том же формате, но они также могут быть обычными строками (в кавычках или без кавычек) или их комбинацией.
Например, `".main aside:hover, .sidebar p"` является допустимым аргументом селектора.


<% function 'selector.is-superselector($super, $sub)',
            'is-superselector($super, $sub)',
            returns: 'boolean' do %>
  Возвращает, соответствует ли селектор `$super` всем элементам, которым соответствует селектор `$sub`.

  По-прежнему возвращает истину, даже если `$super` соответствует *большему количеству* элементов, чем `$sub`.

  Селекторы `$super` и `$sub` могут содержать [селекторы-заполнители][placeholder selectors], но не [родительские селекторы][parent selectors].

  [placeholder selectors]: ../style-rules/placeholder-selectors
  [parent selectors]: ../style-rules/parent-selector

  <% example(autogen_css: false) do %>
    @debug selector.is-superselector("a", "a.disabled"); // true
    @debug selector.is-superselector("a.disabled", "a"); // false
    @debug selector.is-superselector("a", "sidebar a"); // true
    @debug selector.is-superselector("sidebar a", "a"); // false
    @debug selector.is-superselector("a", "a"); // true
    ===
    @debug selector.is-superselector("a", "a.disabled")  // true
    @debug selector.is-superselector("a.disabled", "a")  // false
    @debug selector.is-superselector("a", "sidebar a")  // true
    @debug selector.is-superselector("sidebar a", "a")  // false
    @debug selector.is-superselector("a", "a")  // true
  <% end %>
<% end %>


<% function 'selector.append($selectors...)',
            'selector-append($selectors...)',
            returns: 'selector' do %>
  Комбинирует `$selectors` без [дочерних комбинаторов][descendant combinators] — то есть без пробелов между ними.

  [descendant combinators]: https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors

  Если какой-либо селектор в `$selectors` является списком селекторов, каждый сложный селектор комбинируется отдельно.

  Селекторы `$selectors` могут содержать [селекторы-заполнители][placeholder selectors], но не [родительские селекторы][parent selectors].

  [placeholder selectors]: ../style-rules/placeholder-selectors
  [parent selectors]: ../style-rules/parent-selector

  Смотрите также [`selector.nest()`](#nest).

  <% example(autogen_css: false) do %>
    @debug selector.append("a", ".disabled"); // a.disabled
    @debug selector.append(".accordion", "__copy"); // .accordion__copy
    @debug selector.append(".accordion", "__copy, __image");
    // .accordion__copy, .accordion__image
    ===
    @debug selector.append("a", ".disabled")  // a.disabled
    @debug selector.append(".accordion", "__copy")  // .accordion__copy
    @debug selector.append(".accordion", "__copy, __image")
    // .accordion__copy, .accordion__image
  <% end %>
<% end %>


<% function 'selector.extend($selector, $extendee, $extender)',
            'selector-extend($selector, $extendee, $extender)',
            returns: 'selector' do %>
  Расширяет `$selector` так же, как [правило `@extend`][`@extend` rule].

  [`@extend` rule]: ../at-rules/extend

  Возвращает копию `$selector`, измененную следующим правилом `@extend`:

  ```scss
  #{$extender} {
    @extend #{$extendee};
  }
  ```

  Другими словами, заменяет все экземпляры `$extendee` в `$selector` на `$extendee, $extender`.
  Если `$selector` не содержит `$extendee`, возвращает его как есть.

  Селекторы `$selector`, `$extendee` и `$extender` могут содержать [селекторы-заполнители][placeholder selectors], но не [родительские селекторы][parent selectors].

  [placeholder selectors]: ../style-rules/placeholder-selectors
  [parent selectors]: ../style-rules/parent-selector

  Смотрите также [`selector.replace()`](#replace).

  <% example(autogen_css: false) do %>
    @debug selector.extend("a.disabled", "a", ".link"); // a.disabled, .link.disabled
    @debug selector.extend("a.disabled", "h1", "h2"); // a.disabled
    @debug selector.extend(".guide .info", ".info", ".content nav.sidebar");
    // .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar
    ===
    @debug selector.extend("a.disabled", "a", ".link")  // a.disabled, .link.disabled
    @debug selector.extend("a.disabled", "h1", "h2")  // a.disabled
    @debug selector.extend(".guide .info", ".info", ".content nav.sidebar")
    // .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar
  <% end %>
<% end %>


<% function 'selector.nest($selectors...)',
            'selector-nest($selectors...)',
            returns: 'selector' do %>
  Объединяет селекторы `$selectors`, как если бы они были вложены друг в друга в таблице стилей.

  Селекторы `$selectors` могут содержать [селекторы-заполнители][placeholder selectors].
  В отличие от других функций-селекторов, все они, кроме первой, также могут содержать [родительские селекторы][parent selectors].

  [placeholder selectors]: ../style-rules/placeholder-selectors
  [parent selectors]: ../style-rules/parent-selector

  Смотрите также [`selector.append()`](#append).

  <% example(autogen_css: false) do %>
    @debug selector.nest("ul", "li"); // ul li
    @debug selector.nest(".alert, .warning", "p"); // .alert p, .warning p
    @debug selector.nest(".alert", "&:hover"); // .alert:hover
    @debug selector.nest(".accordion", "&__copy"); // .accordion__copy
    ===
    @debug selector.nest("ul", "li")  // ul li
    @debug selector.nest(".alert, .warning", "p")  // .alert p, .warning p
    @debug selector.nest(".alert", "&:hover")  // .alert:hover
    @debug selector.nest(".accordion", "&__copy")  // .accordion__copy
  <% end %>
<% end %>


<% function 'selector.parse($selector)',
            'selector-parse($selector)',
            returns: 'selector' do %>
  Возвращает `$selector` в формате [значение селектора](#selector-values).

  <% example(autogen_css: false) do %>
    @debug selector.parse(".main aside:hover, .sidebar p");
    // ((unquote(".main") unquote("aside:hover")),
    //  (unquote(".sidebar") unquote("p")))
    ===
    @debug selector.parse(".main aside:hover, .sidebar p")
    // ((unquote(".main") unquote("aside:hover")),
    //  (unquote(".sidebar") unquote("p")))
  <% end %>
<% end %>


<% function 'selector.replace($selector, $original, $replacement)',
            'selector-replace($selector, $original, $replacement)',
            returns: 'selector' do %>
  Возвращает копию `$selector`, в которой все экземпляры `$original` заменены на `$replacement`.

  При этом используется [правило `@extend`][`@extend` rule] [интеллектуального объединения][intelligent unification], чтобы убедиться, что `$replacement` легко интегрируется в `$selector`.
  Если `$selector` не содержит `$original`, возвращает его как есть.

  [`@extend` rule]: ../at-rules/extend
  [intelligent unification]: ../at-rules/extend#how-it-works

  Селекторы `$selector`, `$original` и `$replacement` могут содержать [селекторы местозаполнителей][placeholder selectors], но не [родительские селекторы][parent selectors].

  [placeholder selectors]: ../style-rules/placeholder-selectors
  [parent selectors]: ../style-rules/parent-selector

  Смотрите также [`selector.extend()`](#extend).

  <% example(autogen_css: false) do %>
    @debug selector.replace("a.disabled", "a", ".link"); // .link.disabled
    @debug selector.replace("a.disabled", "h1", "h2"); // a.disabled
    @debug selector.replace(".guide .info", ".info", ".content nav.sidebar");
    // .guide .content nav.sidebar, .content .guide nav.sidebar
    ===
    @debug selector.replace("a.disabled", "a", ".link")  // .link.disabled
    @debug selector.replace("a.disabled", "h1", "h2")  // a.disabled
    @debug selector.replace(".guide .info", ".info", ".content nav.sidebar")
    // .guide .content nav.sidebar, .content .guide nav.sidebar
  <% end %>
<% end %>


<% function 'selector.unify($selector1, $selector2)',
            'selector-unify($selector1, $selector2)',
            returns: 'selector | null' do %>
  Возвращает селектор, который соответствует только элементам, совпадающим *как с* `$selector1`, так и с `$selector2`.

  Возвращает `null`, если `$selector1` и `$selector2` не совпадают ни с одним из одних и тех же элементов или если нет селектора, который мог бы выразить их перекрытие.

  Подобно селекторам, сгенерированным [правилом `@extend`][`@extend` rule], возвращаемый селектор не гарантирует совпадения *всех* элементов, соответствующих как `$selector1`, так и `$selector2`, если они оба являются сложными селекторами.

  [`@extend` rule]: ../at-rules/extend#html-heuristics

  <% example(autogen_css: false) do %>
    @debug selector.unify("a", ".disabled"); // a.disabled
    @debug selector.unify("a.disabled", "a.outgoing"); // a.disabled.outgoing
    @debug selector.unify("a", "h1"); // null
    @debug selector.unify(".warning a", "main a"); // .warning main a, main .warning a
    ===
    @debug selector.unify("a", ".disabled")  // a.disabled
    @debug selector.unify("a.disabled", "a.outgoing")  // a.disabled.outgoing
    @debug selector.unify("a", "h1")  // null
    @debug selector.unify(".warning a", "main a")  // .warning main a, main .warning a
  <% end %>
<% end %>


<% function 'selector.simple-selectors($selector)',
            'simple-selectors($selector)',
            returns: 'list' do %>
  Возвращает список простых селекторов в `$selector`.

  `$selector` должен быть единственной строкой, содержащей составной селектор.
  Это означает, что он не может содержать комбинаторов (включая пробелы) или запятых.

  Возвращаемый список разделен запятыми, а простые селекторы представляют собой строки без кавычек.

  <% example(autogen_css: false) do %>
    @debug selector.simple-selectors("a.disabled"); // a, .disabled
    @debug selector.simple-selectors("main.blog:after"); // main, .blog, :after
    ===
    @debug selector.simple-selectors("a.disabled")  // a, .disabled
    @debug selector.simple-selectors("main.blog:after")  // main, .blog, :after
  <% end %>
<% end %>
