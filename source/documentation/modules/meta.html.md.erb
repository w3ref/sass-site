---
title: sass:meta
---

<%= partial '../snippets/built-in-module-status' %>

## Миксины

<% function 'meta.load-css($url, $with: null)' do %>
  <% impl_status dart: '(unreleased)', libsass: false, ruby: false do %>
    Только Dart Sass в настоящее время поддерживает этот миксин.
  <% end %>

  Загружает [модуль][module] по адресу `$url` и включает его CSS, как если бы он был написан как содержимое этого миксина.
  Параметр `$with` предоставляет [конфигурацию][configuration] для модулей; если он передан, это должна быть карта между именами переменных (без `$`) и значениями этих переменных для использования в загруженном модуле.

  [module]: ../at-rules/use
  [configuration]: ../at-rules/use#configuration

  Если `$url` является относительным, он интерпретируется как относительный к файлу, в который включен `meta.load-css()`.

  **Как [правило `@use`][`@use` rule]**:

  [`@use` rule]: ../at-rules/use

  * Это будет оценивать данный модуль только один раз, даже если он загружен несколько раз разными способами.

  * Это не может предоставить конфигурацию для модуля, который уже был загружен, независимо от того, был ли он уже загружен с конфигурацией.

  **В отличие от[правила `@use`][`@use` rule]**:

  * Это не делает какие-либо члены загруженного модуля доступными в текущем модуле.

  * Это можно использовать в любом месте таблицы стилей.
    Его можно даже вложить в правила стиля для создания вложенных стилей!

  * URL загружаемого модуля может быть получен из переменной и включать [интерполяцию][interpolation].

    [interpolation]: ../interpolation

  <% heads_up do %>
    Параметр `$url` должен быть строкой, содержащей URL-адрес, аналогичный тому, который вы передаете правилу `@use`.
    Это не должен быть URL-адрес CSS `url()`!
  <% end %>

  <% example(autogen_css: false) do %>
    // dark-theme/_code.scss
    $border-contrast: false !default;

    code {
      background-color: #6b717f;
      color: #d2e1dd;
      @if $border-contrast {
        border-color: #dadbdf;
      }
    }
    ---
    // style.scss
    @use "sass:meta";

    body.dark {
      @include meta.load-css("dark-theme/code",
          $with: ("border-contrast": true));
    }
    ===
    // dark-theme/_code.sass
    $border-contrast: false !default

    code
      background-color: #6b717f
      color: #d2e1dd
      @if $border-contrast
        border-color: #dadbdf
    ---
    // style.sass
    @use "sass:meta"

    body.dark
      $configuration: ("border-contrast": true)
      @include meta.load-css("dark-theme/code", $with: $configuration)
    ===
    body.dark code {
      background-color: #6b717f;
      color: #d2e1dd;
      border-color: #dadbdf;
    }
  <% end %>
<% end %>

## Функции

<% function 'meta.call($function, $args...)', 'call($function, $args...)' do %>
  <%= partial 'documentation/snippets/call-impl-status' %>

  Вызывает `$function` с `$args` и возвращает результат.

  `$function` должна быть [функцией][function], возвращаемой [`meta.get-function()`][].

  [function]: ../values/functions
  [`meta.get-function()`]: #get-function

  <%= partial 'code-snippets/example-first-class-function' %>
<% end %>


<% function 'meta.content-exists()',
            'content-exists()',
            returns: 'boolean' do %>
  Возвращает, был ли текущий миксин передан блоком [`@content` block][].

  [`@content` block]: ../at-rules/mixin#content-blocks

  Выдает ошибку, если вызывается вне примеси.

  <% example(autogen_css: false) do %>
    @mixin debug-content-exists {
      @debug meta.content-exists();
      @content;
    }

    @include debug-content-exists; // false
    @include debug-content-exists { // true
      // Content!
    }
    ===
    @mixin debug-content-exists
      @debug meta.content-exists()
      @content


    @include debug-content-exists  // false
    @include debug-content-exists   // true
      // Content!
  <% end %>
<% end %>


<% function 'meta.feature-exists($feature)',
            'feature-exists($feature)',
            returns: 'boolean' do %>
  Возвращает, поддерживает ли текущая реализация Sass `$feature`.

  `$feature` должна быть строкой. Признанные в настоящее время функции:

  * `global-variable-shadowing`, что означает, что локальная переменная будет [затенять][shadow] глобальную переменную, если у нее нет флага `!global`.
  * `extend-selector-pseudoclass`, что означает, что [правило `@extend`][`@extend` rule] будет влиять на селекторы, вложенные в псевдоклассы, такие как `:not()`.
  * `units-level3`, что означает, что [арифметика единиц измерения][unit arithmetic] поддерживает единицы измерения, определенные в [Значения и единицы измерения CSS Уровень 3][CSS Values and Units Level 3].
  * `at-error`, что означает, что поддерживается [правило `@error`][`@error` rule].
  * `custom-property`, что означает, что значения [объявления настраиваемого свойства][custom property declaration] не поддерживают никаких [выражений][expressions], кроме [][interpolation].

  [shadow]: ../variables#shadowing
  [`@extend` rule]: ../at-rules/extend
  [unit arithmetic]: ../values/numbers#units
  [CSS Values and Units Level 3]: http://www.w3.org/TR/css3-values
  [`@error` rule]: ../at-rules/error
  [custom property declaration]: ../style-rules/declarations#custom-properties
  [expressions]: ../syntax/structure#expressions
  [interpolation]: ../interpolation

  Возвращает `false` для любой нераспознанной функции `$feature`.

  <% example(autogen_css: false) do %>
    @debug meta.feature-exists("at-error"); // true
    @debug meta.feature-exists("unrecognized"); // false
    ===
    @debug meta.feature-exists("at-error")  // true
    @debug meta.feature-exists("unrecognized")  // false
  <% end %>
<% end %>


<% function 'meta.function-exists($name)',
            'function-exists($name)',
            returns: 'boolean' do %>
  Возвращает, определена ли функция с именем `$name`, либо как встроенная, либо как определяемая пользователем функция.

  <% example(autogen_css: false) do %>
    @debug meta.function-exists("scale-color"); // true
    @debug meta.function-exists("add"); // false

    @function add($num1, $num2) {
      @return $num1 + $num2;
    }
    @debug meta.function-exists("add"); // true
    ===
    @debug meta.function-exists("scale-color")  // true
    @debug meta.function-exists("add")  // false

    @function add($num1, $num2)
      @return $num1 + $num2

    @debug meta.function-exists("add")  // true
  <% end %>
<% end %>


<% function 'meta.get-function($name, $css: false, $module: null)',
            'get-function($name, $css: false, $module: null)',
            returns: 'function' do %>
  Возвращает [функцию][function] с именем `$name`.

  [function]: ../values/functions

  Если `$module` равен `null`, это возвращает функцию с именем `$name` без пространства имен (включая [глобальные встроенные функции][global built-in functions]).
  В противном случае `$module` должен быть строкой, соответствующей пространству имен [правила `@use`][`@use` rule] в текущем файле, и в этом случае возвращается функция в этом модуле с именем `$name`.

  [global built-in functions]: ../modules#global-functions
  [`@use` rule]: ../at-rules/use

  По умолчанию это вызывает ошибку, если `$name` не относится к функции Sass.
  Однако, если `$css` имеет значение `true`, вместо этого возвращается [простая функция CSS][plain CSS function].

  [user-defined]: ../at-rules/function
  [plain CSS function]: ../at-rules/function#plain-css-functions

  Возвращенная функция может быть вызвана с помощью [`meta.call()`](#call).

  <%= partial 'code-snippets/example-first-class-function' %>
<% end %>


<% function 'meta.global-variable-exists($name, $module: null)',
            'global-variable-exists($name, $module: null)',
            returns: 'boolean' do %>
  Возвращает, существует ли [глобальная переменная][global variable] с именем `$name` (без `$`).

  [global variable]: ../variables#scope

  Если `$module` равен `null`, это возвращает, существует ли переменная с именем `$name` без пространства имен.
  В противном случае, `$module` должен быть строкой, соответствующей пространству имен [правила `@use`][`@use` rule] в текущем файле, и в этом случае возвращается, имеет ли этот модуль переменную с именем `$name`.

  [`@use` rule]: ../at-rules/use

  Смотрите также [`meta.variable-exists()`](#variable-exists).

  <% example(autogen_css: false) do %>
    @debug meta.global-variable-exists("var1"); // false

    $var1: value;
    @debug meta.global-variable-exists("var1"); // true

    h1 {
      // $var2 is local.
      $var2: value;
      @debug meta.global-variable-exists("var2"); // false
    }
    ===
    @debug meta.global-variable-exists("var1")  // false

    $var1: value
    @debug meta.global-variable-exists("var1")  // true

    h1
      // $var2 is local.
      $var2: value
      @debug meta.global-variable-exists("var2")  // false
  <% end %>
<% end %>


<% function 'meta.inspect($value)',
            'inspect($value)',
            returns: 'unquoted string' do %>
  Возвращает строковое представление `$value`.

  Возвращает представление *любого* значения Sass, а не только тех, которые могут быть представлены в CSS.
  Таким образом, не гарантируется, что его возвращаемое значение является действительным CSS.

  <% heads_up do %>
    Эта функция предназначена для отладки; его выходной формат не гарантирует единообразия для разных версий или реализаций Sass.
  <% end %>

  <% example(autogen_css: false) do %>
    @debug meta.inspect(10px 20px 30px); // unquote("10px 20px 30px")
    @debug meta.inspect(("width": 200px)); // unquote('("width": 200px)')
    @debug meta.inspect(null); // unquote("null")
    @debug meta.inspect("Helvetica"); // unquote('"Helvetica"')
    ===
    @debug meta.inspect(10px 20px 30px)  // unquote("10px 20px 30px")
    @debug meta.inspect(("width": 200px))  // unquote('("width": 200px)')
    @debug meta.inspect(null)  // unquote("null")
    @debug meta.inspect("Helvetica")  // unquote('"Helvetica"')
  <% end %>
<% end %>


<% function 'meta.keywords($args)', 'keywords($args)', returns: 'map' do %>
  Возвращает ключевые слова, переданные в миксин или функцию, которая принимает [произвольные аргументы][arbitrary arguments].
  Аргумент `$args` должен быть [списком аргументов][argument list].

  [arbitrary arguments]: ../at-rules/mixin#taking-arbitrary-arguments
  [argument list]: ../values/lists#argument-lists

  Ключевые слова возвращаются в виде сопоставления имен аргументов в виде строк без кавычек (не включая `$`) со значениями этих аргументов.

  <%= partial 'code-snippets/example-mixin-arbitrary-keyword-arguments' %>
<% end %>


<% function 'meta.mixin-exists($name, $module: null)',
            'mixin-exists($name, $module: null)',
            returns: 'boolean' do %>
  Возвращает, существует ли [миксин][mixin] с именем `$name`.

  [mixin]: ../at-rules/mixin

  Если `$module` равен `null`, это возвращает, существует ли миксин с именем `$name` без пространства имен.
  В противном случае, `$module` должен быть строкой, соответствующей пространству имен [правила `@use`][`@use` rule] в текущем файле, и в этом случае возвращается, имеет ли этот модуль миксин с именем `$name`.

  [`@use` rule]: ../at-rules/use


  <% example(autogen_css: false) do %>
    @debug meta.mixin-exists("shadow-none"); // false

    @mixin shadow-none {
      box-shadow: none;
    }

    @debug meta.mixin-exists("shadow-none"); // true
    ===
    @debug meta.mixin-exists("shadow-none")  // false

    @mixin shadow-none
      box-shadow: none


    @debug meta.mixin-exists("shadow-none")  // true
  <% end %>
<% end %>


<% function 'meta.module-functions($module)',
            returns: 'map' do %>
  <%= partial '../snippets/module-system-function-status' %>

  Возвращает все функции, определенные в модуле, в виде сопоставления имен функций с [значениями функций][function values].

  [function values]: ../values/functions

  Параметр `$module` должен быть строкой, соответствующей пространству имен [правила `@use`][`@use` rule] в текущем файле.

  [`@use` rule]: ../at-rules/use

  <% example(autogen_css: false) do %>
    // _functions.scss
    @function pow($base, $exponent) {
      $result: 1;
      @for $_ from 1 through $exponent {
        $result: $result * $base;
      }
      @return $result;
    }
    ---
    @use "sass:map";
    @use "sass:meta";

    @use "functions";

    @debug meta.module-functions("functions"); // ("pow": get-function("pow"))

    @debug meta.call(map.get(meta.module-variables("functions"), "pow"), 3, 4); // 16
    ===
    // _functions.sass
    @function pow($base, $exponent)
      $result: 1
      @for $_ from 1 through $exponent
        $result: $result * $base

      @return $result
    ---
    @use "sass:map"
    @use "sass:meta"

    @use "functions"

    @debug meta.module-functions("functions") // ("pow": get-function("pow"))

    @debug meta.call(map.get(meta.module-variables("functions"), "pow"), 3, 4) // 16
  <% end %>
<% end %>


<% function 'meta.module-variables($module)',
            returns: 'map' do %>
  <%= partial '../snippets/module-system-function-status' %>

  Возвращает все переменные, определенные в модуле, в виде сопоставления имен переменных (без `$`) со значениями этих переменных.

  Параметр `$module` должен быть строкой, соответствующей пространству имен [правила `@use`][`@use` rule] в текущем файле.

  [`@use` rule]: ../at-rules/use

  <% example(autogen_css: false) do %>
    // _variables.scss
    $hopbush: #c69;
    $midnight-blue: #036;
    $wafer: #e1d7d2;
    ---
    @use "sass:meta";

    @use "variables";

    @debug meta.module-variables("variables");
    // (
    //   "hopbush": #c69,
    //   "midnight-blue": #036,
    //   "wafer": #e1d7d2
    // )
    ===
    // _variables.sass
    $hopbush: #c69
    $midnight-blue: #036
    $wafer: #e1d7d2
    ---
    @use "sass:meta"

    @use "variables"

    @debug meta.module-variables("variables")
    // (
    //   "hopbush": #c69,
    //   "midnight-blue": #036,
    //   "wafer": #e1d7d2
    // )
  <% end %>
<% end %>


<% function 'meta.type-of($value)',
            'type-of($value)',
            returns: 'unquoted string' do %>
  Возвращает тип `$value`.

  Это может вернуть следующие значения:

  * [`number`](../values/numbers)
  * [`string`](../values/strings)
  * [`color`](../values/colors)
  * [`list`](../values/lists)
  * [`map`](../values/maps)
  * [`bool`](../values/booleans)
  * [`null`](../values/null)
  * [`function`](../values/functions)
  * [`arglist`](../values/lists#argument-lists)

  В будущем могут быть добавлены новые возможные значения.
  Он может возвращать либо `list`, либо `map` для `()`, в зависимости от того, был ли он возвращен [функцией карты][map function].

  [map function]: map

  <% example(autogen_css: false) do %>
    @debug meta.type-of(10px); // number
    @debug meta.type-of(10px 20px 30px); // list
    @debug meta.type-of(()); // list
    ===
    @debug meta.type-of(10px)  // number
    @debug meta.type-of(10px 20px 30px)  // list
    @debug meta.type-of(())  // list
  <% end %>
<% end %>


<% function 'meta.variable-exists($name)',
            'variable-exists($name)',
            returns: 'boolean' do %>
  Возвращает, существует ли переменная с именем `$name` (без `$`) в текущей [области][scope].

  [scope]: ../variables#scope

  Смотрите также [`meta.global-variable-exists()`](#global-variable-exists).

  <% example(autogen_css: false) do %>
    @debug meta.variable-exists("var1"); // false

    $var1: value;
    @debug meta.variable-exists("var1"); // true

    h1 {
      // $var2 is local.
      $var2: value;
      @debug meta.variable-exists("var2"); // true
    }
    ===
    @debug meta.variable-exists("var1")  // false

    $var1: value
    @debug meta.variable-exists("var1")  // true

    h1
      // $var2 is local.
      $var2: value
      @debug meta.variable-exists("var2")  // true
  <% end %>
<% end %>
