---
title: sass:list
---

<%= partial '../snippets/built-in-module-status' %>

<% fun_fact do %>
  В Sass каждая [карта][map] считается списком, содержащим список из двух элементов для каждой пары ключ / значение.
  Например, `(1: 2, 3: 4)` считается как `(1 2, 3 4)`.
  Так что все эти функции работают и с картами!

  [map]: ../values/maps

  Отдельные значения также считаются списками.
  Все эти функции рассматривают `1px` как список, содержащий значение `1px`.
<% end %>


<% function 'list.append($list, $val, $separator: auto)',
            'append($list, $val, $separator: auto)',
            returns: 'list' do %>
  Возвращает копию `$list` с добавлением `$val` в конец.

  Если `$separator` - это `comma`, `space` или `slash`, возвращаемый список разделен запятыми, пробелами или косой чертой соответственно.
  Если это `auto` (по умолчанию), возвращаемый список будет использовать тот же разделитель, что и `$list` (или `space`, если `$list` не имеет разделителя).
  Другие значения не допускаются.

  [separator]: ../values/lists

  Обратите внимание, что в отличие от [`list.join()`](#join), если `$val` является списком, он вложен в возвращаемый список, а не все его элементы добавляются в возвращаемый список.

  <% example(autogen_css: false) do %>
    @debug list.append(10px 20px, 30px); // 10px 20px 30px
    @debug list.append((blue, red), green); // blue, red, green
    @debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)
    @debug list.append(10px, 20px, $separator: comma); // 10px, 20px
    @debug list.append((blue, red), green, $separator: space); // blue red green
    ===
    @debug list.append(10px 20px, 30px)  // 10px 20px 30px
    @debug list.append((blue, red), green)  // blue, red, green
    @debug list.append(10px 20px, 30px 40px)  // 10px 20px (30px 40px)
    @debug list.append(10px, 20px, $separator: comma)  // 10px, 20px
    @debug list.append((blue, red), green, $separator: space)  // blue red green
  <% end %>
<% end %>


<% function 'list.index($list, $value)',
            'index($list, $value)',
            returns: 'number | null' do %>
  Возвращает [индекс][index] из `$value` в `$list`.

  [index]: ../values/lists#indexes

  Если `$value` не появляется в `$list`, возвращается [`null`][].
  Если `$value` появляется несколько раз в `$list`, возвращается индекс его первого появления.

  [`null`]: ../values/null

  <%= partial 'code-snippets/example-list-index' %>
<% end %>


<% function 'list.is-bracketed($list)',
            'is-bracketed($list)',
            returns: 'boolean' do %>
  Возвращает, есть ли в `$list` квадратные скобки.

  <% example(autogen_css: false) do %>
    @debug list.is-bracketed(1px 2px 3px); // false
    @debug list.is-bracketed([1px, 2px, 3px]); // true
    ===
    @debug list.is-bracketed(1px 2px 3px)  // false
    @debug list.is-bracketed([1px, 2px, 3px])  // true
  <% end %>
<% end %>


<% function 'list.join($list1, $list2, $separator: auto, $bracketed: auto)',
            'join($list1, $list2, $separator: auto, $bracketed: auto)',
            returns: 'list' do %>
  Возвращает новый список, содержащий элементы `$list1`, за которыми следуют элементы `$list2`.

  <% heads_up do %>
    Поскольку отдельные значения считаются одноэлементными списками, можно использовать `list.join()` для добавления значения в конец списка.
    Однако *это не рекомендуется*, поскольку, если это значение является списком, оно будет объединено, что, вероятно, не то, что вы ожидаете.

    Вместо этого используйте [`list.append()`](#append), чтобы добавить одно значение в список.
    Используйте `list.join()` только для объединения двух списков в один.
  <% end %>

  Если `$separator` - это `comma`, `space` или `slash`, возвращаемый список разделен запятыми, пробелами или косой чертой соответственно.
  Если это `auto` (по умолчанию), возвращаемый список будет использовать тот же разделитель, что и `$list` (или `space`, если `$list` не имеет разделителя).
  Другие значения не допускаются.

  Если `$bracketed` имеет значение `true`, возвращаемый список заключен в квадратные скобки.
  Если это `false`, в возвращаемом списке нет скобок. Если это `auto` (по умолчанию), возвращаемый список будет заключен в квадратные скобки, если `$list1` имеет значение.
  Другие значения не допускаются.

  <% example(autogen_css: false) do %>
    @debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px
    @debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def
    @debug list.join(10px, 20px); // 10px 20px
    @debug list.join(10px, 20px, $separator: comma); // 10px, 20px
    @debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def
    @debug list.join([10px], 20px); // [10px 20px]
    @debug list.join(10px, 20px, $bracketed: true); // [10px 20px]
    ===
    @debug list.join(10px 20px, 30px 40px)  // 10px 20px 30px 40px
    @debug list.join((blue, red), (#abc, #def))  // blue, red, #abc, #def
    @debug list.join(10px, 20px)  // 10px 20px
    @debug list.join(10px, 20px, comma)  // 10px, 20px
    @debug list.join((blue, red), (#abc, #def), space)  // blue red #abc #def
    @debug list.join([10px], 20px)  // [10px 20px]
    @debug list.join(10px, 20px, $bracketed: true)  // [10px 20px]
  <% end %>
<% end %>


<% function 'list.length($list)', 'length($list)', returns: 'number' do %>
  Возвращает длину `$list`.

  Это также может вернуть количество пар на карте.

  <% example(autogen_css: false) do %>
    @debug list.length(10px); // 1
    @debug list.length(10px 20px 30px); // 3
    @debug list.length((width: 10px, height: 20px)); // 2
    ===
    @debug list.length(10px)  // 1
    @debug list.length(10px 20px 30px)  // 3
    @debug list.length((width: 10px, height: 20px))  // 2
  <% end %>
<% end %>


<% function 'list.separator($list)',
            'list-separator($list)',
            returns: 'unquoted string' do %>
  Возвращает имя разделителя, используемого `$list`, either `space`, `comma` или `slash`.

  Если `$list` не имеет разделителя, возвращает `space`.

  <% example(autogen_css: false) do %>
    @debug list.separator(1px 2px 3px); // space
    @debug list.separator(1px, 2px, 3px); // comma
    @debug list.separator('Helvetica'); // space
    @debug list.separator(()); // space
    ===
    @debug list.separator(1px 2px 3px)  // space
    @debug list.separator(1px, 2px, 3px)  // comma
    @debug list.separator('Helvetica')  // space
    @debug list.separator(())  // space
  <% end %>
<% end %>


<% function 'list.nth($list, $n)', 'nth($list, $n)' do %>
  Возвращает элемент `$list` с [мндексом][index] `$n`.

  [index]: ../values/lists#indexes

  Если `$n` отрицательно, отсчет начинается с конца `$list`.
  Выдает ошибку, если нет элемента с индексом `$n`.

  <%= partial 'code-snippets/example-list-nth' %>
<% end %>


<% function 'list.set-nth($list, $n, $value)',
            'set-nth($list, $n, $value)',
            returns: 'list' do %>
  Возвращает копию `$list` с элементом в [индекс][index] `$n`, замененным на `$value`.

  [index]: ../values/lists#indexes

  Если `$n` отрицательно, отсчет начинается с конца `$list`.
  Выдает ошибку, если нет существующего элемента с индексом `$n`.

  <% example(autogen_css: false) do %>
    @debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
    @debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
    @debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto
    ===
    @debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
    @debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
    @debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto
  <% end %>
<% end %>


<% function 'list.slash($elements...)', returns: 'list' do %>
  Возвращает разделенный косой чертой список, содержащий `$elements`.

  <% heads_up do %>
    Эта функция - временное решение для создания списков, разделенных косой чертой.
    В конце концов, они будут написаны буквально с косой чертой, как в `1px / 2px / solid`, но пока [косые черты используются для разделения][slashes are used for division], поэтому Sass не может использовать их для нового синтаксиса, пока старый синтаксис не будет удален.

    [slashes are used for division]: ../breaking-changes/slash-div
  <% end %>

  <% example(autogen_css: false) do %>
    @debug list.slash(1px, 50px, 100px); // 10px / 50px / 100px
    ===
    @debug list.slash(1px, 50px, 100px)  // 10px / 50px / 100px
  <% end %>
<% end %>


<% function 'list.zip($lists...)', 'zip($lists...)', returns: 'list' do %>
  Объединяет каждый список в `$lists` в один список подсписок.

  Каждый элемент в возвращаемом списке содержит все элементы в этой позиции в `$lists`.
  Возвращаемый список является самым коротким списком в `$lists`.

  Возвращаемый список всегда разделяется запятыми, а подсписки всегда разделяются пробелами.

  <% example(autogen_css: false) do %>
    @debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long
    @debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid
    ===
    @debug list.zip(10px 50px 100px, short mid long)  // 10px short, 50px mid, 100px long
    @debug list.zip(10px 50px 100px, short mid)  // 10px short, 50px mid
  <% end %>
<% end %>
