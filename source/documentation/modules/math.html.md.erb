---
title: sass:math
---

<%= partial '../snippets/built-in-module-status' %>

## Переменные

<% function 'math.$e' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Равно значению [математической константы *e*][mathematical constant *e*].

  [mathematical constant *e*]: https://en.wikipedia.org/wiki/E_(mathematical_constant)

  <% example(autogen_css: false) do %>
    @debug math.$e; // 2.7182818285
    ===
    @debug math.$e // 2.7182818285
  <% end %>
<% end %>


<% function 'math.$pi' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Равно значению [математической константы *π*][mathematical constant *π*].

  [mathematical constant *π*]: https://en.wikipedia.org/wiki/Pi

  <% example(autogen_css: false) do %>
    @debug math.$pi; // 3.1415926536
    ===
    @debug math.$pi // 3.1415926536
  <% end %>
<% end %>


## Ограничивающие функции

<% function 'math.ceil($number)', 'ceil($number)', returns: 'number' do %>
  Округляет `$number` до следующего наибольшего целого числа.

  <% example(autogen_css: false) do %>
    @debug math.ceil(4); // 4
    @debug math.ceil(4.2); // 5
    @debug math.ceil(4.9); // 5
    ===
    @debug math.ceil(4)  // 4
    @debug math.ceil(4.2)  // 5
    @debug math.ceil(4.9)  // 5
  <% end %>
<% end %>


<% function 'math.clamp($min, $number, $max)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Ограничивает `$number` диапазоном от `$min` до `$max`.
  Если `$number` меньше `$min`, возвращается `$min`, а если оно больше `$max`, возвращается `$max`.

  `$min`, `$number` и `$max` должны иметь совместимые единицы измерения или все без единиц измерения.

  <% example(autogen_css: false) do %>
    @debug math.clamp(-1, 0, 1); // 0
    @debug math.clamp(1px, -1px, 10px); // 1px
    @debug math.clamp(-1in, 1cm, 10mm); // 10mm
    ===
    @debug math.clamp(-1, 0, 1) // 0
    @debug math.clamp(1px, -1px, 10px) // 1px
    @debug math.clamp(-1in, 1cm, 10mm) // 10mm
  <% end %>
<% end %>


<% function 'math.floor($number)', 'floor($number)', returns: 'number' do %>
  Округляет `$number` до следующего наименьшего целого числа.

  <% example(autogen_css: false) do %>
    @debug math.floor(4); // 4
    @debug math.floor(4.2); // 4
    @debug math.floor(4.9); // 4
    ===
    @debug math.floor(4)  // 4
    @debug math.floor(4.2)  // 4
    @debug math.floor(4.9)  // 4
  <% end %>
<% end %>


<% function 'math.max($number...)', 'max($number...)', returns: 'number' do %>
  Возвращает наибольшее из одного или нескольких чисел.

  <% example(autogen_css: false) do %>
    @debug math.max(1px, 4px); // 4px

    $widths: 50px, 30px, 100px;
    @debug math.max($widths...); // 100px
    ===
    @debug math.max(1px, 4px)  // 4px

    $widths: 50px, 30px, 100px
    @debug math.max($widths...)  // 100px
  <% end %>
<% end %>


<% function 'math.min($number...)', 'min($number...)', returns: 'number' do %>
  Возвращает наименьшее из одного или нескольких чисел.

  <% example(autogen_css: false) do %>
    @debug math.min(1px, 4px); // 1px

    $widths: 50px, 30px, 100px;
    @debug math.min($widths...); // 30px
    ===
    @debug math.min(1px, 4px)  // 1px

    $widths: 50px, 30px, 100px
    @debug math.min($widths...)  // 30px
  <% end %>
<% end %>


<% function 'math.round($number)', 'round($number)', returns: 'number' do %>
  Округляет `$number` до ближайшего целого числа.

  <% example(autogen_css: false) do %>
    @debug math.round(4); // 4
    @debug math.round(4.2); // 4
    @debug math.round(4.9); // 5
    ===
    @debug math.round(4)  // 4
    @debug math.round(4.2)  // 4
    @debug math.round(4.9)  // 5
  <% end %>
<% end %>


## Функции расстояний

<% function 'math.abs($number)', 'abs($number)', returns: 'number' do %>
  Возвращает [абсолютное значение][absolute value] числа `$number`.
  Если `$number` отрицательно, это возвращает `-$number`, а если `$number` положительно, оно возвращает `$number` как есть.

  [absolute value]: https://en.wikipedia.org/wiki/Absolute_value

  <% example(autogen_css: false) do %>
    @debug math.abs(10px); // 10px
    @debug math.abs(-10px); // 10px
    ===
    @debug math.abs(10px) // 10px
    @debug math.abs(-10px) // 10px
  <% end %>
<% end %>


<% function 'math.hypot($number...)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает длину *n*-мерного [вектора][vector], который имеет компоненты, равные каждому `$number`.
  Например, для трех чисел *a*, *b* и *c*, это возвращает квадратный корень из *a² + b² + c²*.

  Все числа должны иметь совместимые единицы измерения или все без единиц измерения.
  А поскольку единицы измерения чисел могут отличаться, в выходных данных берется единица первого числа.

  [vector]: https://en.wikipedia.org/wiki/Euclidean_vector

  <% example(autogen_css: false) do %>
    @debug math.hypot(3, 4); // 5

    $lengths: 1in, 10cm, 50px;
    @debug math.hypot($lengths...); // 4.0952775683in
    ===
    @debug math.hypot(3, 4) // 5

    $lengths: 1in, 10cm, 50px
    @debug math.hypot($lengths...) // 4.0952775683in
  <% end %>
<% end %>


## Экспоненциальные функции

<% function 'math.log($number, $base: null)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [логарифм][logarithm] числа `$number` относительно `$base`.
  Если `$base` равно `null`, вычисляется [натуральный логарифм][natural log].

  `$number` и `$base` не должны иметь единиц измерения.

  [logarithm]: https://en.wikipedia.org/wiki/Logarithm
  [natural log]: https://en.wikipedia.org/wiki/Natural_logarithm

  <% example(autogen_css: false) do %>
    @debug math.log(10); // 2.302585093
    @debug math.log(10, 10); // 1
    ===
    @debug math.log(10) // 2.302585093
    @debug math.log(10, 10) // 1
  <% end %>
<% end %>


<% function 'math.pow($base, $exponent)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возводит `$base` [в степень][to the power of] `$exponent`.

  `$base` и `$exponent` должны быть безразмерными.

  [to the power of]: https://en.wikipedia.org/wiki/Exponentiation

  <% example(autogen_css: false) do %>
    @debug math.pow(10, 2); // 100
    @debug math.pow(100, math.div(1, 3)); // 4.6415888336
    @debug math.pow(5, -2); // 0.04
    ===
    @debug math.pow(10, 2) // 100
    @debug math.pow(100, math.div(1, 3)) // 4.6415888336
    @debug math.pow(5, -2) // 0.04
  <% end %>
<% end %>


<% function 'math.sqrt($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [квадратный корень][square root] из `$number`.

  `$number` должны быть безразмерными.

  [square root]: https://en.wikipedia.org/wiki/Square_root

  <% example(autogen_css: false) do %>
    @debug math.sqrt(100); // 10
    @debug math.sqrt(math.div(1, 3)); // 0.5773502692
    @debug math.sqrt(-1); // NaN
    ===
    @debug math.sqrt(100) // 10
    @debug math.sqrt(math.div(1, 3)) // 0.5773502692
    @debug math.sqrt(-1) // NaN
  <% end %>
<% end %>


## Тригонометрические функции

<% function 'math.cos($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [косинус][cosine] числа `$number`.

  `$number` должно быть углом (его единицы измерения должны быть совместимы с градусом `deg`) или безразмерным.
  Если в `$number` нет единиц измерения, предполагается, что оно выражено в `rad`.

  [cosine]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

  <% example(autogen_css: false) do %>
    @debug math.cos(100deg); // -0.1736481777
    @debug math.cos(1rad); // 0.5403023059
    @debug math.cos(1); // 0.5403023059
    ===
    @debug math.cos(100deg) // -0.1736481777
    @debug math.cos(1rad) // 0.5403023059
    @debug math.cos(1) // 0.5403023059
  <% end %>
<% end %>


<% function 'math.sin($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [синус][sine] числа `$number`.

  `$number` должно быть углом (его единицы измерения должны быть совместимы с `deg`) или безразмерным.
  Если в `$number` нет единиц измерения, предполагается, что оно выражено в `rad`.

  [sine]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

  <% example(autogen_css: false) do %>
    @debug math.sin(100deg); // 0.984807753
    @debug math.sin(1rad); // 0.8414709848
    @debug math.sin(1); // 0.8414709848
    ===
    @debug math.sin(100deg) // 0.984807753
    @debug math.sin(1rad) // 0.8414709848
    @debug math.sin(1) // 0.8414709848
  <% end %>
<% end %>


<% function 'math.tan($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [тангенс][tangent] числа `$number`.

  `$number` должно быть углом (его единицы измерения должны быть совместимы с `deg`) или безразмерным.
  Если в `$number` нет единиц измерения, предполагается, что оно выражено в `rad`.

  [tangent]: https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions

  <% example(autogen_css: false) do %>
    @debug math.tan(100deg); // -5.6712818196
    @debug math.tan(1rad); // 1.5574077247
    @debug math.tan(1); // 1.5574077247
    ===
    @debug math.tan(100deg) // -5.6712818196
    @debug math.tan(1rad) // 1.5574077247
    @debug math.tan(1) // 1.5574077247
  <% end %>
<% end %>


<% function 'math.acos($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [арккосинус][arccosine] числа `$number` в `deg`.

  `$number` должны быть безразмерными.

  [arccosine]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

  <% example(autogen_css: false) do %>
    @debug math.acos(0.5); // 60deg
    @debug math.acos(2); // NaNdeg
    ===
    @debug math.acos(0.5) // 60deg
    @debug math.acos(2) // NaNdeg
  <% end %>
<% end %>


<% function 'math.asin($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [арксинус][arcsine] числа `$number` в `deg`.

  `$number` должны быть безразмерными.

  [arcsine]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

  <% example(autogen_css: false) do %>
    @debug math.asin(0.5); // 30deg
    @debug math.asin(2); // NaNdeg
    ===
    @debug math.asin(0.5) // 30deg
    @debug math.asin(2) // NaNdeg
  <% end %>
<% end %>


<% function 'math.atan($number)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [арктангенс][arctangent] числа `$number` в `deg`.

  `$number` должны быть безразмерными.

  [arctangent]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties

  <% example(autogen_css: false) do %>
    @debug math.atan(10); // 84.2894068625deg
    ===
    @debug math.atan(10) // 84.2894068625deg
  <% end %>
<% end %>


<% function 'math.atan2($y, $x)', returns: 'number' do %>
  <% impl_status dart: '1.25.0', libsass: false, ruby: false %>

  Возвращает [арктангенс с двумя аргументами][2-argument arctangent] числа `$y` и `$x` в `deg`.

  `$y` и `$x` должны иметь совместимые единицы или быть без единиц измерения.

  [2-argument arctangent]: https://en.wikipedia.org/wiki/Atan2

  <% fun_fact do %>
    `math.atan2($y, $x)` отличается от `atan(math.div($y, $x))`, поскольку сохраняет квадрант рассматриваемой точки.
    Например, `math.atan2(1, -1)` соответствует точке `(-1, 1)` и возвращает `135deg`.
    Напротив, `math.atan(math.div(1, -1))` и `math.atan(math.div(-1, 1))` сначала разрешаются в `atan(-1)`, поэтому оба возвращают `-45deg`.
  <% end %>

  <% example(autogen_css: false) do %>
    @debug math.atan2(-1, 1); // 135deg
    ===
    @debug math.atan2(-1, 1) // 135deg
  <% end %>
<% end %>


## Функции единиц

<% function 'math.compatible($number1, $number2)',
            'comparable($number1, $number2)',
            returns: 'boolean' do %>
  Возвращает, есть ли у `$number1` и `$number2` совместимые единицы измерения.

  Если это возвращает `true`, `$number1` и `$number2` можно безопасно [добавить][added], [вычесть][subtracted] и [сравнить][compared].
  В противном случае это приведет к ошибкам.

  [added]: ../operators/numeric
  [subtracted]: ../operators/numeric
  [compared]: ../operators/relational

  <% heads_up do %>
    Глобальное имя этой функции - <code>compa<strong>ra</strong>ble</code>, но когда она была добавлена в модуль `sass:math` имя было изменено на <code>compa<strong>ti</strong>ble</code>, чтобы более четко передать, что делает функция.
  <% end %>

  <% example(autogen_css: false) do %>
    @debug math.compatible(2px, 1px); // true
    @debug math.compatible(100px, 3em); // false
    @debug math.compatible(10cm, 3mm); // true
    ===
    @debug math.compatible(2px, 1px)  // true
    @debug math.compatible(100px, 3em)  // false
    @debug math.compatible(10cm, 3mm)  // true
  <% end %>
<% end %>


<% function 'math.is-unitless($number)',
            'unitless($number)',
            returns: 'boolean' do %>
  Возвращает, не имеет ли `$number` единиц измерения.

  <% example(autogen_css: false) do %>
    @debug math.is-unitless(100); // true
    @debug math.is-unitless(100px); // false
    ===
    @debug math.is-unitless(100)  // true
    @debug math.is-unitless(100px)  // false
  <% end %>
<% end %>


<% function 'math.unit($number)',
            'unit($number)',
            returns: 'quoted string' do %>
  Возвращает строковое представление единиц `$number`.

  <% heads_up do %>
    Эта функция предназначена для отладки; его выходной формат не гарантирует единообразия для разных версий или реализаций Sass.
  <% end %>

  <% example(autogen_css: false) do %>
    @debug math.unit(100); // ""
    @debug math.unit(100px); // "px"
    @debug math.unit(5px * 10px); // "px*px"
    @debug math.unit(math.div(5px, 1s)); // "px/s"
    ===
    @debug math.unit(100)  // ""
    @debug math.unit(100px)  // "px"
    @debug math.unit(5px * 10px)  // "px*px"
    @debug math.unit(math.div(5px, 1s))  // "px/s"
  <% end %>
<% end %>


## Прочие функции

<% function 'math.div($number1, $number2)', returns: 'number' do %>
  <% impl_status dart: '1.33.0', libsass: false, ruby: false %>

  Возвращает результат деления `$number1` на `$number2`.

  Любые единицы, общие для обоих номеров, будут аннулированы.
  Единицы в `$number1`, которых нет в `$number2`, попадут в числитель возвращаемого значения, а единицы в `$number2`, которых нет в `$number1`, попадут в его знаменатель.

  <% heads_up do %>
    В целях обратной совместимости это возвращает *точно такой же результат*, как [устаревший оператор `/`][the deprecated `/` operator], включая объединение двух строк с символом `/` между ними.
    Однако со временем это поведение будет удалено, и его не следует использовать в новых таблицах стилей.

    [the deprecated `/` operator]: ../breaking-changes/slash-div
  <% end %>

  <% example(autogen_css: false) do %>
    @debug math.div(1, 2); // 0.5
    @debug math.div(100px, 5px); // 20
    @debug math.div(100px, 5); // 20px
    @debug math.div(100px, 5s); // 20px/s
    ===
    @debug math.div(1, 2)  // 0.5
    @debug math.div(100px, 5px)  // 20
    @debug math.div(100px, 5)  // 20px
    @debug math.div(100px, 5s)  // 20px/s
  <% end %>
<% end %>


<% function 'math.percentage($number)',
            'percentage($number)',
            returns: 'number' do %>
  Преобразует безразмерное `$number` (обычно десятичное число от 0 до 1) в процент.

  <% fun_fact do %>
    Эта функция идентична `$number * 100%`.
  <% end %>

  <% example(autogen_css: false) do %>
    @debug math.percentage(0.2); // 20%
    @debug math.percentage(math.div(100px, 50px)); // 200%
    ===
    @debug math.percentage(0.2)  // 20%
    @debug math.percentage(math.div(100px, 50px))  // 200%
  <% end %>
<% end %>


<% function 'math.random($limit: null)',
            'random($limit: null)',
            returns: 'number' do %>
  Если `$limit` равен `null`, возвращает случайное десятичное число от 0 до 1.

  <% example(autogen_css: false) do %>
    @debug math.random(); // 0.2821251858
    @debug math.random(); // 0.6221325814
    ===
    @debug math.random()  // 0.2821251858
    @debug math.random()  // 0.6221325814
  <% end %>

  * * *

  Если `$limit` является числом больше или равным 1, возвращает случайное целое число от 1 до `$limit`.

  <% example(autogen_css: false) do %>
    @debug math.random(10); // 4
    @debug math.random(10000); // 5373
    ===
    @debug math.random(10)  // 4
    @debug math.random(10000)  // 5373
  <% end %>
<% end %>
