---
title: Операторы
introduction: >
  Sass поддерживает несколько полезных операторов `operators` для работы с разными значениями.
  К ним относятся стандартные математические операторы, такие как `+` и `*`, а также операторы для различных других типов:
---

<%= partial 'documentation/snippets/operator-list', locals: {parens: false} %>

<% heads_up do %>
  В начале истории Sass он добавил поддержку математических операций с [цветами][colors].
  Эти операции работали с каждым из каналов RGB каждого цвета отдельно, поэтому добавление двух цветов приведет к получению цвета с суммой их красных каналов в качестве красного канала и так далее.

  [colors]: values/colors

  Это поведение было не очень полезным, поскольку его поканальная арифметика RGB не соответствовала тому, как люди воспринимают цвет.
  [Цветовые функции][Color functions] были добавлены, которые намного более полезны, а цветовые операции устарели.
  Они по-прежнему поддерживаются в LibSass и Ruby Sass, но выдают предупреждения, и пользователям настоятельно рекомендуется их избегать.

  [Color functions]: modules/color
<% end %>

## Порядок операций

Sass имеет довольно стандартный [порядок операций][order of operations], от самого жесткого до самого слабого:

[order of operations]: https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages

1. Унарные операторы [`not`][], [`+`, `-`][] и [`/`][].
2. [Операторы `*`, `/` и `%`][`*`, `/`, and `%` operators].
3. [Операторы `+` and `-`][`+` and `-` operators].
4. [Операторы `>`, `>=`, `<` и `<=`][`>`, `>=`, `<` and `<=` operators].
5. [Операторы `==` и `!=`][`==` and `!=` operators].
6. [Оператор `and`][`and` operator].
7. [Оператор `or`][`or` operator].
8. [Оператор `=`][`=` operator], если он доступен.

[`not`]: operators/boolean
[`+`, `-`]: operators/numeric#unary-operators
[`/`]: operators/string#unary-operators
[`*`, `/`, and `%` operators]: operators/numeric
[`+` and `-` operators]: operators/numeric
[`>`, `>=`, `<` and `<=` operators]: operators/relational
[`==` and `!=` operators]: operators/equality
[`and` operator]: operators/boolean
[`or` operator]: operators/boolean
[`=` operator]: #single-equals

<% example(autogen_css: false) do %>
  @debug 1 + 2 * 3 == 1 + (2 * 3); // true
  @debug true or false and false == true or (false and false); // true
  ===
  @debug 1 + 2 * 3 == 1 + (2 * 3)  // true
  @debug true or false and false == true or (false and false)  // true
<% end %>

### Круглые скобки

Вы можете явно управлять порядком операций, используя круглые скобки.
Операция в круглых скобках всегда оценивается перед любыми операциями вне скобок.
Скобки могут быть даже вложенными, и в этом случае в первую очередь будут оцениваться самые внутренние круглые скобки.

<% example(autogen_css: false) do %>
  @debug (1 + 2) * 3; // 9
  @debug ((1 + 2) * 3 + 4) * 5; // 65
  ===
  @debug (1 + 2) * 3  // 9
  @debug ((1 + 2) * 3 + 4) * 5  // 65
<% end %>

## Одиночные равные

Sass поддерживает специальный оператор `=`, который разрешен только в аргументах функции, который просто создает [строку без кавычек][unquoted string] с двумя операндами, разделенными символом `=`.
Это существует для обратной совместимости с очень старым синтаксисом, предназначенным только для IE.

[unquoted string]: values/strings#unquoted

<% example do %>
  .transparent-blue {
    filter: chroma(color=#0000ff);
  }
  ===
  .transparent-blue
    filter: chroma(color=#0000ff)
<% end %>
