---
title: Объявления свойств
table_of_contents: true
introduction: >
  В Sass, как и в CSS, объявления свойств определяют стиль элементов, соответствующих селектору.
  Но Sass добавляет дополнительные функции, упрощающие их написание и автоматизацию.
  Прежде всего, значением объявления может быть любое [выражение SassScript](../syntax/structure#expressions), которое будет вычислено и включено в результат.
---

<% example do %>
  .circle {
    $size: 100px;
    width: $size;
    height: $size;
    border-radius: $size * 0.5;
  }
  ===
  .circle
    $size: 100px
    width: $size
    height: $size
    border-radius: $size * 0.5
<% end %>

## Интерполяция

Имя свойства может включать [интерполяцию][interpolation], что позволяет динамически генерировать свойства по мере необходимости.
Вы даже можете интерполировать все название свойства!

[interpolation]: ../interpolation

<% example do %>
  @mixin prefix($property, $value, $prefixes) {
    @each $prefix in $prefixes {
      -#{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
  }

  .gray {
    @include prefix(filter, grayscale(50%), moz webkit);
  }
  ===
  @mixin prefix($property, $value, $prefixes)
    @each $prefix in $prefixes
      -#{$prefix}-#{$property}: $value

    #{$property}: $value


  .gray
    @include prefix(filter, grayscale(50%), moz webkit)
<% end %>

## Вложенность

Многие свойства CSS начинаются с одного и того же префикса, который действует как своего рода пространство имен.
Например, `font-family`, `font-size` и `font-weight` начинаются с `font-`.
Sass делает это проще и менее избыточным, позволяя вложить объявления свойств.
Имена внешних свойств добавляются к внутренним через дефис.

<% example do %>
  .enlarge {
    font-size: 14px;
    transition: {
      property: font-size;
      duration: 4s;
      delay: 2s;
    }

    &:hover { font-size: 36px; }
  }
  ===
  .enlarge
    font-size: 14px
    transition:
      property: font-size
      duration: 4s
      delay: 2s

    &:hover
      font-size: 36px
<% end %>

Некоторые из этих свойств CSS имеют сокращенные версии, в которых пространство имен используется в качестве имени свойства.
Для них вы можете записать как сокращенное значение, *так и* более явные вложенные версии.

<% example do %>
  .info-page {
    margin: auto {
      bottom: 10px;
      top: 2px;
    }
  }
  ===
  .info-page
    margin: auto
      bottom: 10px
      top: 2px
<% end %>

## Скрытые декларации

Иногда вам нужно, чтобы объявление свойства отображалось только время от времени.
Если значением объявления является [`null`][] или пустая [строка без кавычек][unquoted string], Sass вообще не будет компилировать это объявление в CSS.

[`null`]: ../values/null
[unquoted string]: ../values/strings#unquoted

<% example do %>
  $rounded-corners: false;

  .button {
    border: 1px solid black;
    border-radius: if($rounded-corners, 5px, null);
  }
  ===
  $rounded-corners: false

  .button
    border: 1px solid black
    border-radius: if($rounded-corners, 5px, null)
<% end %>

## Настраиваемые свойства

<% impl_status dart: true, libsass: '3.5.0', ruby: '3.5.0', feature: 'SassScript Syntax' do %>
  Более старые версии LibSass и Ruby Sass анализировали объявления настраиваемых свойств так же, как и любое другое объявление свойств, позволяя использовать полный диапазон выражений SassScript в качестве значений.
  Даже при использовании этих версий рекомендуется использовать интерполяцию для внедрения значений SassScript для прямой совместимости.

  Смотрите [страницу критических изменений][the breaking change page] для получения более подробной информации.

  [the breaking change page]: ../breaking-changes/css-vars
<% end %>

[Пользовательские свойства CSS][CSS custom properties], также известные как переменные CSS, имеют необычный синтаксис объявления: они допускают практически любой текст в значениях объявления.
Более того, эти значения доступны для JavaScript, поэтому любое значение может иметь отношение к пользователю.
Сюда входят значения, которые обычно анализируются как SassScript.

[CSS Custom Properties]: https://developer.mozilla.org/en-US/docs/Web/CSS/--*

Из-за этого Sass анализирует объявления настраиваемых свойств иначе, чем объявления других свойств.
Все токены, включая те, которые выглядят как SassScript, передаются в CSS как есть.
Единственное исключение - [интерполяция][interpolation], единственный способ добавить динамические значения в настраиваемое свойство.

<!-- TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass -->

<% example do %>
  $primary: #81899b;
  $accent: #302e24;
  $warn: #dfa612;

  :root {
    --primary: #{$primary};
    --accent: #{$accent};
    --warn: #{$warn};

    // Несмотря на то, что это похоже на переменную Sass, это действительный CSS, поэтому он не оценивается.
    --consumed-by-js: $primary;
  }
  ===
  $primary: #81899b
  $accent: #302e24
  $warn: #dfa612

  :root
    --primary: #{$primary}
    --accent: #{$accent}
    --warn: #{$warn}

    // Несмотря на то, что это похоже на переменную Sass, это действительный CSS, поэтому он не оценивается.
    --consumed-by-js: $primary
  ===
  :root {
    --primary: #81899b;
    --accent: #302e24;
    --warn: #dfa612;
    --consumed-by-js: $primary;
  }
<% end %>

<% heads_up do %>
  К сожалению, [интерполяция][interpolation] удаляет кавычки из строк, что затрудняет использование строк в кавычках в качестве значений для настраиваемых свойств, когда они поступают из переменных Sass. В качестве обходного пути вы можете использовать функцию `meta.inspect()`][`meta.inspect()` function], чтобы сохранить кавычки.

  [interpolation]: ../interpolation
  [`meta.inspect()` function]: ../modules/meta#inspect

  <% example do %>
    @use "sass:meta";

    $font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto;
    $font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;

    :root {
      --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)};
      --font-family-monospace: #{meta.inspect($font-family-monospace)};
    }
    ===
    @use "sass:meta"

    $font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto
    $font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas

    :root
      --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)}
      --font-family-monospace: #{meta.inspect($font-family-monospace)}
    ===
    :root {
      --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto;
      --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;
    }
  <% end %>
<% end %>
