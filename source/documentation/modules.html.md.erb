---
title: Встроенные модули
introduction: >
  Sass предоставляет множество встроенных модулей, которые содержат полезные функции (и иногда миксины).
  Эти модули могут быть загружены с помощью [правила `@use`](at-rules/use), как любая пользовательская таблица стилей, и их функции могут быть вызваны [как любой другой участник модуля](at-rules/use#loading-members).
  Все URL-адреса встроенных модулей начинаются с `sass:`, чтобы указать, что они являются частью самого Sass.
overview: true
---

<% content_for :before_introduction do %>
  <%= partial 'snippets/built-in-module-status' %>
<% end %>

<% heads_up do %>
  До того, как была представлена модульная система Sass, все функции Sass были всегда доступны глобально.
  Многие функции по-прежнему имеют глобальные псевдонимы (они перечислены в их документации).
  Команда Sass не рекомендует их использовать и в конечном итоге откажется от них, но пока они остаются доступными для совместимости со старыми версиями Sass и с LibSass (который еще не поддерживает модульную систему).

  [Несколько функций][A few functions] доступны *только* глобально даже в новой модульной системе, либо потому, что у них есть особое поведение оценки ([`if()`][]), либо потому, что они добавляют дополнительное поведение поверх встроенных Функции CSS ([`rgb()`][] и [`hsl()`][]).
  Они не будут считаться устаревшими и могут использоваться свободно.

  [a few functions]: #global-functions
  [`if()`]: #if
  [`rgb()`]: #rgb
  [`hsl()`]: #hsl
<% end %>

<% example do %>
  @use "sass:color";

  .button {
    $primary-color: #6b717f;
    color: $primary-color;
    border: 1px solid color.scale($primary-color, $lightness: 20%);
  }
  ===
  @use "sass:color"

  .button
    $primary-color: #6b717f
    color: $primary-color
    border: 1px solid color.scale($primary-color, $lightness: 20%)
  ===
  .button {
    color: #6b717f;
    border: 1px solid #878d9a;
  }
<% end %>

Sass предоставляет следующие встроенные модули:

* [Модуль `sass:math`][`sass:math` module] предоставляет функции, которые работают с [числами][numbers].

* [Модуль `sass:string`][`sass:string` module] упрощает объединение, поиск или разделение [строк][].

* [Модуль `sass:color`][`sass:color` module] генерирует новые [цвета][colors] на основе существующих, что упрощает создание цветовых тем.

* [Модуль `sass:list`][`sass:list` module] позволяет вам получать доступ и изменять значения в [списках][lists].

* [Модуль `sass:map`][`sass:map` module] позволяет искать значение, связанное с ключом, в [карте]][map] и многое другое.

* [Модуль `sass:selector`][`sass:selector` module] предоставляет доступ к мощному механизму выбора Sass.

* [Модуль `sass:meta`][`sass:meta` module] раскрывает детали внутренней работы Sass.

[`sass:math` module]: modules/math
[numbers]: values/numbers
[`sass:string` module]: modules/string
[strings]: values/strings
[`sass:color` module]: modules/color
[colors]: values/colors
[`sass:list` module]: modules/list
[lists]: values/lists
[`sass:map` module]: modules/map
[map]: values/maps
[`sass:selector` module]: modules/selector
[`sass:meta` module]: modules/meta

## Глобальные функции

<% function 'hsl($hue $saturation $lightness)',
            'hsl($hue $saturation $lightness / $alpha)',
            'hsl($hue, $saturation, $lightness, $alpha: 1)',
            'hsla($hue $saturation $lightness)',
            'hsla($hue $saturation $lightness / $alpha)',
            'hsla($hue, $saturation, $lightness, $alpha: 1)',
            returns: 'color' do %>
  <% impl_status dart: '1.15.0', libsass: false, ruby: false, feature: "Level 4 Syntax" do %>
    LibSass и Ruby Sass поддерживают только следующие подписи:

    * `hsl($hue, $saturation, $lightness)`
    * `hsla($hue, $saturation, $lightness, $alpha)`

    Обратите внимание, что для этих реализаций аргумент `$alpha` *обязателен*, если используется имя функции `hsla()`, и *запрещен*, если используется имя функции `hsl()`.
  <% end %>

  <% impl_status dart: true, libsass: false, ruby: '3.7.0', feature: "Percent Alpha" do %>
    LibSass и более старые версии Ruby Sass не поддерживают альфа-значения, указанные в процентах.
  <% end %>

  Возвращает цвет с заданными [оттенком, насыщенностью и яркостью][hue, saturation, and lightness] и заданным альфа-каналом.

  [hue, saturation, and lightness]: https://en.wikipedia.org/wiki/HSL_and_HSV

  Оттенок - это число от `0deg` до `360deg` градусов (включительно) и может быть безразмерным.
  Насыщенность и яркость - это числа от `0%` до `100%` (включительно) и могут *не* быть безразмерными.
  Альфа-канал может быть указан либо как безразмерное число от 0 до 1 (включительно), либо как процентное соотношение между `0%` и `100%` (включительно).

  [unitless]: values/numbers#units

  <% fun_fact do %>
    Вы можете передать [специальные функции][special functions], такие как `calc()` или `var()` вместо любого аргумента в `hsl()`.
    Вы даже можете использовать `var()` вместо нескольких аргументов, так как он может быть заменен несколькими значениями!
    Когда функция цвета вызывается таким образом, она возвращает строку без кавычек, используя ту же сигнатуру, с которой она была вызвана.

    [special functions]: syntax/special-functions

    <% example(autogen_css: false) do %>
      @debug hsl(210deg 100% 20% / var(--opacity)); // hsl(210deg 100% 20% / var(--opacity))
      @debug hsla(var(--peach), 20%); // hsla(var(--peach), 20%)
      ===
      @debug hsl(210deg 100% 20% / var(--opacity))  // hsl(210deg 100% 20% / var(--opacity))
      @debug hsla(var(--peach), 20%)  // hsla(var(--peach), 20%)
    <% end %>
  <% end %>

  <% heads_up do %>
    [Специальные правила синтаксического анализа][special parsing rules] Sass для значений, разделенных косой чертой, затрудняют передачу переменных для `$lightness` или `$alpha` при использовании сигнатуры `hsl($hue $saturation $lightness / $alpha)`. Вместо этого рассмотрите возможность использования `hsl($hue, $saturation, $lightness, $alpha)`.

    [special parsing rules]: operators/numeric#slash-separated-values
  <% end %>

  <% example(autogen_css: false) do %>
    @debug hsl(210deg 100% 20%); // #036
    @debug hsl(34, 35%, 92%); // #f2ece4
    @debug hsl(210deg 100% 20% / 50%); // rgba(0, 51, 102, 0.5)
    @debug hsla(34, 35%, 92%, 0.2); // rgba(242, 236, 228, 0.2)
    ===
    @debug hsl(210deg 100% 20%) // #036
    @debug hsl(34, 35%, 92%) // #f2ece4
    @debug hsl(210deg 100% 20% / 50%)  // rgba(0, 51, 102, 0.5)
    @debug hsla(34, 35%, 92%, 0.2)  // rgba(242, 236, 228, 0.2)
  <% end %>
<% end %>


<% function "if($condition, $if-true, $if-false)" do %>
  Возвращает `$if-true`, если `$condition` равно [правде][truthy] и `$if-false` в противном случае.

  Эта функция отличается тем, что она даже не оценивает аргумент, который не возвращается, поэтому ее можно безопасно вызывать, даже если неиспользованный аргумент вызовет ошибку.

  [truthy]: at-rules/control/if#truthiness-and-falsiness

  <% example(autogen_css: false) do %>
    @debug if(true, 10px, 15px); // 10px
    @debug if(false, 10px, 15px); // 15px
    @debug if(variable-defined($var), $var, null); // null
    ===
    @debug if(true, 10px, 15px)  // 10px
    @debug if(false, 10px, 15px)  // 15px
    @debug if(variable-defined($var), $var, null)  // null
  <% end %>
<% end %>


<% function 'rgb($red $green $blue)',
            'rgb($red $green $blue / $alpha)',
            'rgb($red, $green, $blue, $alpha: 1)',
            'rgb($color, $alpha)',
            'rgba($red $green $blue)',
            'rgba($red $green $blue / $alpha)',
            'rgba($red, $green, $blue, $alpha: 1)',
            'rgba($color, $alpha)',
            returns: 'color' do %>
  <% impl_status dart: '1.15.0', libsass: false, ruby: false, feature: "Level 4 Syntax" do %>
    LibSass и Ruby Sass поддерживают только следующие подписи:

    * `rgb($red, $green, $blue)`
    * `rgba($red, $green, $blue, $alpha)`
    * `rgba($color, $alpha)`

    Обратите внимание, что для этих реализаций аргумент `$alpha` *обязателен*, если используется имя функции `rgba()`, и *запрещен*, если используется имя функции `rgb()`.
  <% end %>

  <% impl_status dart: true, libsass: false, ruby: '3.7.0', feature: "Percent Alpha" do %>
    LibSass и более старые версии Ruby Sass не поддерживают альфа-значения, указанные в процентах.
  <% end %>

  Если переданы `$red`, `$green`, `$blue`и, необязательно, `$alpha`, возвращается цвет с указанными красным, зеленым, синим и альфа-каналами.

  Каждый канал может быть указан либо как число [без единиц измерения][unitless] от 0 до 255 (включительно), либо как процентное соотношение между `0%` и `100%` (включительно).
  Альфа-канал может быть указан либо как безразмерное число от 0 до 1 (включительно), либо как процентное соотношение между `0%` и `100%` (включительно).

  [unitless]: values/numbers#units

  <% fun_fact do %>
    Вы можете передать [специальные функции][special functions], такие как `calc()` или `var()` вместо любого аргумента в `rgb()`.
    Вы даже можете использовать `var()` вместо нескольких аргументов, так как он может быть заменен несколькими значениями!
    Когда функция цвета вызывается таким образом, она возвращает строку без кавычек, используя ту же сигнатуру, с которой она была вызвана.

    [special functions]: syntax/special-functions

    <% example(autogen_css: false) do %>
      @debug rgb(0 51 102 / var(--opacity)); // rgb(0 51 102 / var(--opacity))
      @debug rgba(var(--peach), 0.2); // rgba(var(--peach), 0.2)
      ===
      @debug rgb(0 51 102 / var(--opacity))  // rgb(0 51 102 / var(--opacity))
      @debug rgba(var(--peach), 0.2)  // rgba(var(--peach), 0.2)
    <% end %>
  <% end %>

  <% heads_up do %>
    [Специальные правила синтаксического анализа][special parsing rules] Sass для значений, разделенных косой чертой, затрудняют передачу переменных для `$blue` или `$alpha` при использовании сигнатуры `rgb($red $green $blue / $alpha)`. Вместо этого рассмотрите возможность использования `rgb($red, $green, $blue, $alpha)`.

    [special parsing rules]: operators/numeric#slash-separated-values
  <% end %>

  <% example(autogen_css: false) do %>
    @debug rgb(0 51 102); // #036
    @debug rgb(95%, 92.5%, 89.5%); // #f2ece4
    @debug rgb(0 51 102 / 50%); // rgba(0, 51, 102, 0.5)
    @debug rgba(95%, 92.5%, 89.5%, 0.2); // rgba(242, 236, 228, 0.2)
    ===
    @debug rgb(0 51 102)  // #036
    @debug rgb(95%, 92.5%, 89.5%)  // #f2ece4
    @debug rgb(0 51 102 / 50%)  // rgba(0, 51, 102, 0.5)
    @debug rgba(95%, 92.5%, 89.5%, 0.2)  // rgba(242, 236, 228, 0.2)
  <% end %>

  ---

  Если переданы `$color` и `$alpha`, возвращается `$color` с заданным каналом `$alpha` вместо исходного альфа-канала.

  <% example(autogen_css: false) do %>
    @debug rgb(#f2ece4, 50%); // rgba(242, 236, 228, 0.5);
    @debug rgba(rgba(0, 51, 102, 0.5), 1); // #003366
    ===
    @debug rgb(#f2ece4, 50%)  // rgba(242, 236, 228, 0.5)
    @debug rgba(rgba(0, 51, 102, 0.5), 1)  // #003366
  <% end %>
<% end %>
