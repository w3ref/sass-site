## Единицы

Sass имеет мощную поддержку для управления юнитами в зависимости от того, как работают [вычисления реальных юнитов][real-world unit calculations].
Когда два числа умножаются, их единицы также умножаются.
Когда одно число делится на другое, результат берет единицы числителя из первого числа и его единицы знаменателя из второго.
Число может иметь любое количество единиц в числителе и/или знаменателе.

[real-world unit calculations]: https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement

<% example(autogen_css: false) do %>
  @debug 4px * 6px; // 24px*px (read "square pixels")
  @debug math.div(5px, 2s); // 2.5px/s (read "pixels per second")

  // 3.125px*deg/s*em (read "pixel-degrees per second-em")
  @debug 5px * math.div(math.div(30deg, 2s), 24em);

  $degrees-per-second: math.div(20deg, 1s);
  @debug $degrees-per-second; // 20deg/s
  @debug math.div(1, $degrees-per-second); // 0.05s/deg
  ===
  @debug 4px * 6px  // 24px*px (read "square pixels")
  @debug math.div(5px, 2s)  // 2.5px/s (read "pixels per second")

  // 3.125px*deg/s*em (read "pixel-degrees per second-em")
  @debug 5px * math.div(math.div(30deg, 2s), 24em)

  $degrees-per-second: math.div(20deg, 1s)
  @debug $degrees-per-second  // 20deg/s
  @debug math.div(1, $degrees-per-second)  // 0.05s/deg
<% end %>

<% heads_up do %>
  Поскольку CSS не поддерживает сложные единицы измерения, такие как квадратные пиксели, использование числа со сложными единицами измерения в качестве [значения свойства][property value] приведет к ошибке.
  Однако это замаскированная особенность; если у вас не получается подходящая единица измерения, это обычно означает, что что-то не так с вашими расчетами!
  И помните, вы всегда можете использовать [правило `@debug`][`@debug` rule], чтобы проверить единицы любой переменной или [выражение][expression].

  [property value]: /documentation/style-rules/declarations
  [`@debug` rule]: /documentation/at-rules/debug
  [expression]: /documentation/syntax/structure#expressions
<% end %>

Sass будет автоматически конвертировать между совместимыми модулями, хотя, какой модуль он выберет для результата, зависит от того, какую реализацию Sass вы используете.
Если вы попытаетесь объединить несовместимые модули, такие как `1in + 1em`, Sass выдаст ошибку.

<% example(autogen_css: false) do %>
  // CSS defines one inch as 96 pixels.
  @debug 1in + 6px; // 102px or 1.0625in

  @debug 1in + 1s;
  //     ^^^^^^^^
  // Error: Incompatible units s and in.
  ===
  // CSS defines one inch as 96 pixels.
  @debug 1in + 6px  // 102px or 1.0625in

  @debug 1in + 1s
  //     ^^^^^^^^
  // Error: Incompatible units s and in.
<% end %>

Как и в реальных расчетах единиц измерения, если числитель содержит единицы, совместимые с единицами знаменателя (например, `math.div(96px, 1in)`), они будут отменены.
Это упрощает определение отношения, которое можно использовать для преобразования единиц. В приведенном ниже примере мы устанавливаем желаемую скорость равной одной секунде на 50 пикселей, а затем умножаем ее на количество пикселей, охватываемых переходом, чтобы получить необходимое время.

<%# TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass %>

<% example do %>
  $transition-speed: math.div(1s, 50px);

  @mixin move($left-start, $left-stop) {
    position: absolute;
    left: $left-start;
    transition: left ($left-stop - $left-start) * $transition-speed;

    &:hover {
      left: $left-stop;
    }
  }

  .slider {
    @include move(10px, 120px);
  }
  ===
  $transition-speed: math.div(1s, 50px)

  @mixin move($left-start, $left-stop)
    position: absolute
    left: $left-start
    transition: left ($left-stop - $left-start) * $transition-speed

    &:hover
      left: $left-stop



  .slider
    @include move(10px, 120px)
  ===
  .slider {
    position: absolute;
    left: 10px;
    transition: left 2.2s;
  }
  .slider:hover {
    left: 120px;
  }
<% end %>

<% heads_up do %>
  Если ваша арифметика дает неправильную единицу, вам, вероятно, нужно проверить свои математические данные.
  Возможно, вы отказываетесь от единиц для того количества, в котором они должны быть!
  Чистота модулей позволяет Sass выдавать полезные ошибки, когда что-то не так.

  Особенно следует избегать использования интерполяции типа `#{$number}px`.
  На самом деле это не создает числа!
  Он создает [строку без кавычек][unquoted string], которая *выглядит* как число, но не будет работать ни с какими [числовыми операциями][number operations] или [функциями][functions].
  Попробуйте сделать вашу математическую единицу чистой, чтобы в `$number` уже была единица `px`, или напишите `$number * 1px`.

  [unquoted string]: /documentation/values/strings#unquoted
  [number operations]: /documentation/operators/numeric
  [functions]: /documentation/modules/math
<% end %>

<% heads_up do %>
  Проценты в Sass работают так же, как и все остальные единицы.
  Они *не* взаимозаменяемы с десятичными знаками, потому что в CSS десятичные дроби и проценты означают разные вещи.
  Например, `50%` - это число, единицей измерения которого является `%`, и Sass считает, что оно отличается от числа `0.5`.

  Вы можете преобразовывать десятичные дроби в проценты, используя арифметику единиц измерения.
  `math.div($percentage, 100%)` вернет соответствующее десятичное число, а `$decimal * 100%` вернет соответствующий процент.
  Вы также можете использовать [функцию `math.percentage()`][`math.percentage()` function] как более явный способ записи `$decimal * 100%`.

  [`math.percentage()` function]: /documentation/modules/math#percentage
<% end %>
