---
title: "Критическое изменение: Недопустимые комбинаторы"
introduction: >
  Исторически Sass очень снисходительно относился к использованию начальных,
  конечных и повторяющихся комбинаторов в селекторах.
  Эти комбинаторы устарели, за исключением случаев, когда они полезны для вложения.
---

Sass исторически поддерживал три недопустимых использования комбинаторов:

* Ведущие комбинаторы, как в `+ .error {color: red}`.

* Завершающие комбинаторы, как в `.error + {color: red}`.

* Повторяющиеся комбинаторы, как в `div > > .error {color: red}`.

Ни один из них не является допустимым CSS, и все они заставят браузеры игнорировать рассматриваемое правило стиля.
Их поддержка значительно усложнила реализацию Sass и особенно усложнила исправление различных ошибок, связанных с правилом `@extend`.
Таким образом, мы [приняли решение][made the decision] прекратить поддержку этих видов использования.

[made the decision]: https://github.com/sass/sass/issues/3340

**Есть одно существенное исключение**: начальные и конечные комбинаторы все еще могут использоваться для целей вложенности.
Например, следующее все еще очень поддерживается:

<% example do %>
  .sidebar > {
    .error {
      color: red;
    }
  }
  ===
  .sidebar >
    .error
      color: red
<% end %>

Sass выдаст ошибку только в том случае, если селектор все еще имеет начальный или конечный комбинатор _после разрешения вложенности_.
С другой стороны, повторяющиеся комбинаторы всегда будут ошибками.

Чтобы убедиться, что существующие таблицы стилей, которые (вероятно случайно) содержат недопустимые комбинаторы, мы будем поддерживать переходный период до следующего основного выпуска Dart Sass.

## Переходный период

<% impl_status dart: '1.54.0', libsass: false, ruby: false %>

Во-первых, мы будем выдавать предупреждения об устаревании для всех двойных комбинаторов, а также ведущих или конечных комбинаторов, которые попадают в селекторы после разрешения вложенности.

<%= partial '../snippets/silence-deprecations' %>

Кроме того, мы сразу начнем исключать из скомпилированного CSS селекторы, которые, как мы знаем, являются недействительными, за одним исключением: мы _не будем_ пропускать селекторы, начинающиеся с ведущего комбинатора, поскольку они могут использоваться из вложенного `@import` правило или миксин `meta.load-css()`.
Однако мы не поддерживаем этот шаблон и прекратим его поддержку в Dart Sass 2.0.0.
