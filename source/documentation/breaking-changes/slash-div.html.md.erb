---
title: "Критическое изменение: слэш как разделение"
introduction: >
  В настоящее время Sass рассматривает `/` как операцию деления в одних контекстах и как разделитель в других.
  Это затрудняет пользователям Sass определение значения любого заданного символа `/` и затрудняет работу с новыми функциями CSS, которые используют `/` в качестве разделителя.
---

<% impl_status dart: :partial, libsass: false, ruby: false %>

Сегодня Sass использует [сложную эвристику][complex heuristics], чтобы выяснить, следует ли рассматривать символ `/` как разделение или разделитель.
Даже в этом случае в качестве разделителя он просто создает строку без кавычек, которую трудно проверить изнутри Sass.
Поскольку все больше и больше функций CSS, таких как [CSS Grid][] и [новый синтаксис `rgb()` и `hsl()`][new `rgb()` and `hsl()` syntax] используют `/` в качестве разделителя, это становится все более и более болезненным для пользователей Sass.

[complex heuristics]: ../operators/numeric#slash-separated-values
[CSS Grid]: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row
[new `rgb()` and `hsl()` syntax]: https://drafts.csswg.org/css-color/#rgb-functions

Поскольку Sass - это надмножество CSS, мы сопоставляем синтаксис CSS, переопределяя `/` как *только* разделитель.
`/` будет рассматриваться как новый тип разделителя списков, аналогичный тому, как `,` работает сегодня.
Вместо этого деление будет записано с использованием новой функции `math.div()`.
Эта функция будет вести себя точно так же, как сегодня `/`.

Это устаревание не влияет на использование `/` внутри выражений `calc()`.

<% example do %>
  @use "sass:math";

  // Future Sass, пока не работает!
  .item3 {
    $row: span math.div(6, 2) / 7; // Список из двух элементов, разделенных косой чертой.
    grid-row: $row;
  }
  ===
  @use "sass:math"

  // Future Sass, пока не работает!
  .item3
    $row: span math.div(6, 2) / 7 // Список из двух элементов, разделенных косой чертой.
    grid-row: $row
  ===
  .item3 {
    grid-row: span 3 / 7;
  }
<% end %>

## Переходный период

<% impl_status dart: "1.33.0", libsass: false, ruby: false,
               feature: "math.div() and list.slash()" %>

Чтобы облегчить переход, мы начали с добавления функции `math.div()`.
Оператор `/` пока еще выполняет деление, но при этом также выводит предупреждение об устаревании.
Пользователи должны переключить все подразделения на использование `math.div()`.

<%= partial '../snippets/silence-deprecations' %>

<% example(autogen_css: false) do %>
  @use "sass:math";

  // НЕПРАВИЛЬНО, не будет работать в будущих версиях Sass.
  @debug (12px/4px); // 3

  // ПРАВИЛЬНО, будет работать в будущих версиях Sass.
  @debug math.div(12px, 4px); // 3
  ===
  @use "sass:math"

  // НЕПРАВИЛЬНО, не будет работать в будущих версиях Sass.
  @debug (12px/4px) // 3

  // ПРАВИЛЬНО, будет работать в будущих версиях Sass.
  @debug math.div(12px, 4px) // 3
<% end %>

Списки, разделенные косой чертой, также будут доступны в переходный период.
Поскольку они пока не могут быть созданы с помощью `/`, для их создания будет добавлена функция `list.slash()`.
Вы также сможете передать `"slash"` в качестве разделителя `$separator` [функции `list.join()`][`list.join()` function] и [функции `list.append()`][`list.append()` function].

[`list.join()` function]: ../modules/list#join
[`list.append()` function]: ../modules/list#append

<% example do %>
  @use "sass:list";
  @use "sass:math";

  .item3 {
    $row: list.slash(span math.div(6, 2), 7);
    grid-row: $row;
  }
  ===
  @use "sass:list"
  @use "sass:math"

  .item3
    $row: list.slash(span math.div(6, 2), 7)
    grid-row: $row
  ===
  .item3 {
    grid-row: span 3 / 7;
  }
<% end %>

<% impl_status dart: "1.40.0", libsass: false, ruby: false, feature: "First-class calc" %>

В качестве альтернативы пользователи могут заключать операции деления в выражение `calc()`, которое Sass упростит до одного числа.

<% example(autogen_css: false) do %>
  // НЕПРАВИЛЬНО, не будет работать в будущих версиях Sass.
  @debug (12px/4px); // 3

  // ПРАВИЛЬНО, будет работать в будущих версиях Sass.
  @debug calc(12px / 4px); // 3
  ===
  // НЕПРАВИЛЬНО, не будет работать в будущих версиях Sass.
  @debug (12px/4px) // 3

  // ПРАВИЛЬНО, будет работать в будущих версиях Sass.
  @debug calc(12px / 4px) // 3
<% end %>

## Автоматическая миграция

Вы можете использовать [Sass мигратор][the Sass migrator] для автоматического обновления ваших таблиц стилей для использования `math.div()` и `list.slash()`.

[the Sass migrator]: https://github.com/sass/migrator#readme

```shellsession
$ npm install -g sass-migrator
$ sass-migrator division **/*.scss
```
