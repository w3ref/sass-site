---
title: "Критическое изменение: Расширение составных селекторов"
introduction: >
  LibSass в настоящее время позволяет [расширять](../at-rules/extend) составные селекторы, такие как `.message.info`, но способ его расширения не соответствует тому, как должен работать `@extend`.
---

<% impl_status dart: true, libsass: false, ruby: false %>

Когда один селектор расширяет другой, Sass стилизует все элементы, которые соответствуют расширителю, как если бы они также соответствуют расширяемому классу.
Другими словами, если вы напишете `.heads-up {@extend .info}`, это будет работать так же, как вы заменили `class="heads-up"` в вашем HTML на `class="heads-up info"`.

Следуя этой логике, можно ожидать, что `.heads-up {@extend .message.info}` будет работать как замена `class="heads-up"` на `class="heads-up info message"`.
Но сейчас в LibSass и Ruby Sass это работает не так - вместо добавления `.heads-up` к каждому селектору, имеющему *или `.info`, или `.message`*, он добавляет его только к селекторам, имеющим *вместе `.info.message`*.

<% example(autogen_css: false) do %>
  // Оба они должны быть расширены, но этого не произойдет.
  .message {
    border: 1px solid black;
  }
  .info {
    font-size: 1.5rem;
  }

  .heads-up {
    @extend .message.info;
  }
  ===
  // Оба они должны быть расширены, но этого не произойдет.
  .message
    border: 1px solid black

  .info
    font-size: 1.5rem


  .heads-up
    @extend .message.info
<% end %>

Чтобы решить эту проблему, избегайте путаницы и сохраняйте чистоту и эффективность реализации.
Возможность расширения составных селекторов не поддерживается в Dart Sass и будет удалена в будущей версии LibSass.
Для совместимости пользователи должны расширять каждый простой селектор отдельно:

<% example do %>
  .message {
    border: 1px solid black;
  }
  .info {
    font-size: 1.5rem;
  }

  .heads-up {
    @extend .message, .info;
  }
  ===
  .message
    border: 1px solid black

  .info
    font-size: 1.5rem


  .heads-up
    @extend .message, .info
<% end %>

<% heads_up do %>
  Поскольку Sass не знает деталей HTML, который будет стилизован CSS, любой `@extend` может потребовать создания дополнительных селекторов, которые не будут применяться, в частности, к вашему HTML.
  Это особенно верно при отказе от расширенных составных селекторов.

  В большинстве случаев эти дополнительные селекторы не вызовут никаких проблем и добавят только пару дополнительных байтов в сжатый CSS.
  Но некоторые таблицы стилей могут больше полагаться на старое поведение.
  В этом случае мы рекомендуем заменить составной селектор на [селектор-заполнитель][placeholder selector].

  [placeholder selector]: ../style-rules/placeholder-selectors

  <% example do %>
    // Instead of just `.message.info`.
    %message-info, .message.info {
      border: 1px solid black;
      font-size: 1.5rem;
    }

    .heads-up {
      // Instead of `.message.info`.
      @extend %message-info;
    }
    ===
    // Instead of just `.message.info`.
    %message-info, .message.info
      border: 1px solid black
      font-size: 1.5rem


    .heads-up
      // Instead of `.message.info`.
      @extend %message-info
  <% end %>
<% end %>
