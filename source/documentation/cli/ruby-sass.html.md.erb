---
title: Интерфейс командной строки Ruby Sass
table_of_contents: true
---

<% heads_up do %>

[Ruby Sass достиг конца жизненного цикла][Ruby Sass has reached end of life] и в настоящее время полностью не поддерживается.
Пожалуйста, переключитесь на [Dart Sass][] или [LibSass][] при первой возможности.

[Ruby Sass has reached end of life]: /blog/ruby-sass-is-unsupported
[Dart Sass]: /dart-sass
[LibSass]: /libsass
<% end %>

## Применение

Исполняемый файл Ruby Sass может быть вызван в одном из двух режимов.

### Режим "один к одному"

```
sass [input.scss] [output.css]
```

В режиме «один к одному» один входной файл (`input.scss`) компилируется в единственное место вывода (`output.css`).
Если расположение вывода не передано, скомпилированный CSS выводится на терминал.
Если ввод *или* вывод не передается, CSS считывается из [стандартного ввода][standard input] и выводится на терминал.

[standard input]: https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)

Входной файл анализируется как [SCSS][], если его расширение - `.scss`, или как [синтаксис с отступом][indented syntax], если его расширение - `.sass`.
Если у него нет одного из этих двух расширений или если он поступает со стандартного ввода, он по умолчанию анализируется как синтаксис с отступом.
Это можно контролировать с помощью [флага `--scss`][`--scss` flag].

[SCSS]: ../syntax#scss
[indented syntax]: ../syntax#the-indented-syntax
[`--scss` flag]: #scss

### Режим "многие ко многим"

```
sass [<input.css>:<output.css>] [<input/>:<output/>] [input.css] [input/]...
```

В режиме «многие-ко-многим» один или несколько входных файлов компилируются в один или несколько выходных файлов.
Входы отделяются от выходов двоеточиями. Он также может компилировать все файлы Sass в каталоге в файлы CSS с такими же именами в другом каталоге.
Режим «многие-ко-многим» включается, когда любой аргумент содержит двоеточие, *или* когда передается [флаг `--update`][`--update` flag] или [флаг `--watch`][`--watch` flag].

[`--update` flag]: #update
[`--watch` flag]: #watch

Если входной файл передается без соответствующего выходного файла, он компилируется в файл CSS, названный в честь входного файла, но с расширением, замененным на `.css`.
Если входной каталог передается без соответствующего выходного каталога, все файлы Sass в нем компилируются в файлы CSS в том же каталоге.

```shellsession
$ sass style.scss:style.css
      write style.css
      write style.css.map
$ sass light.scss:light.css dark.scss:dark.css
      write light.css
      write light.css.map
      write dark.css
      write dark.css.map
$ sass themes:public/css
      write public/css/light.css
      write public/css/light.css.map
      write public/css/dark.css
      write public/css/dark.css.map
```

При компиляции целых каталогов Sass игнорирует [частичные файлы][partial files], имена которых начинаются с `_`.
Вы можете использовать партиалы для разделения таблиц стилей без создания кучи ненужных выходных файлов.

[partial files]: ../at-rules/use#partials

В режиме «многие ко многим» будут компилироваться только таблицы стилей, зависимости которых были изменены позже, чем был сгенерирован соответствующий файл CSS.
Он также будет печатать сообщения о состоянии при обновлении таблиц стилей.

## Опции

### Общий

#### `--load-path`

Этот параметр (сокращенно `-I`) добавляет дополнительный [путь загрузки][load path] для Sass для поиска таблиц стилей.
Его можно передавать несколько раз, чтобы обеспечить несколько путей загрузки.
Более ранние пути загрузки имеют приоритет над более поздними.

[load path]: ../at-rules/use#load-paths

```shellsession
$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css
```

Пути загрузки также загружаются из `SASS_PATH` [переменная среды][environment variable], если она установлена.
Эта переменная должна быть списком путей, разделенных `;` (в Windows) или `:` (в других операционных системах).
Пути загрузки в `SASS_PATH` имеют приоритет над путями загрузки, переданными в командной строке.

[environment variable]: https://en.wikipedia.org/wiki/Environment_variable

```shellsession
$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css
```

#### `--require`

Эта опция (сокращенно `-r`) загружает [Ruby gem][] перед запуском Sass.
Его можно использовать для загрузки функций, определенных в Ruby, в среду Sass.

[Ruby gem]: https://rubygems.org/

```shellsession
$ sass --require=rails-sass-images style.scss style.css
```

#### `--compass`

Этот флаг загружает [Compass framework][] и делает его миксины и функции доступными для использования в Sass.

[Compass framework]: http://compass-style.org/

```shellsession
$ sass --compass style.scss style.css
```

#### `--style`

Эта опция (сокращенно `-t`) управляет стилем вывода результирующего CSS.
Ruby Sass поддерживает четыре стиля вывода:

* `nested` (по умолчанию) изменяет правила CSS для соответствия вложенности исходного кода Sass.
* `expanded` записывает каждый селектор и объявление в отдельной строке.
* `compact` помещает каждое правило CSS в отдельную строку.
* `compressed` удаляет как можно больше лишних символов и записывает всю таблицу стилей в одну строку.

```shellsession
$ sass --style=nested
h1 {
  font-size: 40px; }
  h1 code {
    font-face: Roboto Mono; }

$ sass --style=expanded style.scss
h1 {
  font-size: 40px;
}
h1 code {
  font-face: Roboto Mono;
}

$ sass --style=compact style.scss
h1 { font-size: 40px; }
h1 code { font-face: Roboto Mono; }

$ sass --style=compressed style.scss
h1{font-size:40px}h1 code{font-face:Roboto Mono}
```

#### `--help`

Этот флаг (сокращенно `-h` и `-?`) печатает краткое изложение этой документации.

```shellsession
$ sass --help
Usage: sass [options] [INPUT] [OUTPUT]

Description:
  Converts SCSS or Sass files to CSS.

...
```

#### `--version`

Этот флаг печатает текущую версию Sass.

```shellsession
$ sass --version
<%= impl_version(:ruby) %>
```

### Наблюдение и Обновление

Эти параметры влияют на [режим многие-ко-многим][many-to-many mode].

[many-to-many mode]: #many-to-many-mode

#### `--watch`

Включает [режим многие-ко-многим][many-to-many mode] и заставляет Sass оставаться открытым и продолжать компилировать таблицы стилей всякий раз, когда они или их зависимости изменяются.

```shellsession
$ sass --watch themes:public/css
      write public/css/light.css
      write public/css/light.css.map

​# Then when you edit themes/dark.scss...
      write public/css/dark.css
      write public/css/dark.css.map
```

#### `--poll`

Этот флаг, который может быть передан только вместе с `--watch`, сообщает Sass, что нужно время от времени вручную проверять наличие изменений в исходных файлах, вместо того, чтобы полагаться на то, что операционная система уведомит его, когда что-то изменится. Это может быть необходимо, если вы редактируете Sass на удаленном диске, где система уведомлений операционной системы не работает.

```shellsession
$ sass --watch --poll themes:public/css
      write public/css/light.css
      write public/css/light.css.map

​# Then when you edit themes/dark.scss...
      write public/css/dark.css
      write public/css/dark.css.map
```

#### `--update`

Этот флаг включает [режим многие-ко-многим][many-to-many mode], даже если ни один из аргументов не является парами, разделенными двоеточиями.

```shellsession
$ sass --update style.scss
      write style.css
      write style.css.map
```

#### `--force`

Этот флаг (сокращенно `-f`) можно передавать только в [режиме многие-ко-многим][many-to-many mode].
Это приводит к тому, что файлы Sass *всегда* компилируются в файлы CSS, а не компилируются только тогда, когда исходные файлы более актуальны, чем выходные данные.

Флаг `--force` нельзя передавать вместе с [флагом `--watch`][`--watch` flag].

```shellsession
$ sass --force style.scss:style.css
      write style.css
      write style.css.map
```

#### `--stop-on-error`

Этот флаг можно передавать только в [режиме многие-ко-многим][many-to-many mode].
Он сообщает Sass немедленно прекратить компиляцию при обнаружении ошибки, а не пытаться скомпилировать другие файлы Sass, которые могут не содержать ошибок.

```shellsession
$ sass --stop-on-error themes:public/css
Error: Invalid CSS after "h1 {font-size: ": expected expression (e.g. 1px, bold), was "}"
        on line 1 of test.scss
  Use --trace for backtrace.
```

### Ввод и Вывод

Эти параметры управляют тем, как Sass загружает свои входные файлы и как создает выходные файлы.

#### `--scss`

Этот флаг сообщает Sass о необходимости синтаксического анализа [стандартный ввод][standard input] как [SCSS][].

```shellsession
$ echo "h1 {font-size: 40px}" | sass --scss
h1 {
  font-size: 40px;
}
```

#### `--sourcemap`

Эта опция контролирует, как Sass генерирует исходные карты, то есть файлы, которые сообщают браузерам или другим инструментам, использующим CSS, как этот CSS соответствует файлам Sass, из которых он был сгенерирован.
Они позволяют просматривать и даже редактировать ваши файлы Sass в браузерах.
Смотрите инструкции по использованию исходных карт в [Chrome][] и [Firefox][].
Имеет четыре возможных значения:

[Chrome]: https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps
[Firefox]: https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support

* `auto` (по умолчанию) использует относительные URL-адреса для ссылки с исходной карты на таблицы стилей Sass, где это возможно, и абсолютные [URL-адреса `file:`][`file:` URLs] в противном случае.
* `file` всегда использует абсолютные абсолютные URL-адреса `file:` для ссылки с исходной карты на таблицы стилей Sass.
* `inline` включает текст стилей Sass напрямую в исходную карту.
* `none` вообще не генерирует исходные карты.

[`file:` URLs]: https://en.wikipedia.org/wiki/File_URI_scheme

```shellsession
​# Generates a URL like "../sass/style.scss".
$ sass --sourcemap=auto sass/style.scss css/style.css

​# Generates a URL like "file:///home/style-wiz/sassy-app/sass/style.scss".
$ sass --sourcemap=file sass/style.scss css/style.css

​# Includes the full text of sass/style.scss in the source map.
$ sass --sourcemap=inline sass/style.scss css/style.css

​# Doesn't generate a source map.
$ sass --sourcemap=none sass/style.scss css/style.css
```

#### `--stdin`

Этот флаг (сокращенно `-s`) указывает Sass читать входной файл из [стандартного ввода][standard input].
Когда он передан, входной файл не может быть передан.

```shellsession
$ echo -e 'h1\n  font-size: 40px' | sass --stdin
h1 {
  font-size: 40px;
}
```

Флаг `--stdin` нельзя использовать с [режимом многие-ко-многим][many-to-many mode].

#### `--default-encoding`

Эта опция (сокращенно `-E`) управляет [кодировкой символов][character encoding] по умолчанию, которую Sass будет использовать для загрузки исходных файлов, которые не [явно указывают][explicitly specify] кодировку символов.
По умолчанию используется кодировка операционной системы по умолчанию.

[character encoding]: https://en.wikipedia.org/wiki/Character_encoding
[explicitly specify]: ../syntax/parsing#input-encoding

```shellsession
$ sass --default-encoding=Shift-JIS style.scss style.css
```

#### `--unix-newlines`

Этот флаг указывает Sass генерировать выходные файлы, строки которых разделены символом U+000A LINE FEED, в отличие от операционной системы по умолчанию (в Windows это U+000D CARRIAGE RETURN, за которым следует U+000A LINE FEED).
Это всегда верно для систем, в которых по умолчанию используются символы новой строки в стиле Unix.

```shellsession
$ sass --unix-newlines style.scss style.css
```

#### `--debug-info`

Этот флаг (сокращенно `-g`) заставляет Sass выдавать фиктивные запросы `@media`, которые указывают, где каждое правило стиля было определено в исходной таблице стилей.

<% heads_up do %>
Этот флаг существует только для обратной совместимости.
Исходные карты теперь являются рекомендуемым способом сопоставления CSS обратно с Sass, который его сгенерировал.
<% end %>

```shellsession
$ sass --debug-info style.scss
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/style-wiz\/sassy-app\/style\.scss}line{font-family:\000031}}
h1 {
  font-size: 40px; }
```

#### `--line-comments`

Этот флаг (также доступный как `--line-numbers`, сокращенно `-l`) заставляет Sass генерировать комментарии для каждого правила стиля, которые указывают, где каждое правило стиля было определено в исходной таблице стилей.

```shellsession
$ sass --line-numbers style.scss
/* line 1, style.scss */
h1 {
  font-size: 40px; }
```

### Другие опции

#### `--interactive`

Этот флаг (сокращенно `-i`) указывает Sass работать в интерактивном режиме, где вы можете написать [SassScript-выражения][SassScript expressions] и увидеть их результаты.
Интерактивный режим также поддерживает [переменные][variables].

[SassScript expressions]: ../syntax/structure#expressions
[variables]: ../variables

```shellsession
$ sass --interactive
>> 1px + 1in
97px
>> $map: ("width": 100px, "height": 70px)
("width": 100px, "height": 70px)
>> map-get($map, "width")
100px
```

#### `--check`

Этот флаг (сокращенно `-c`) указывает Sass проверять, что синтаксис его входного файла действителен, не выполняя этот файл. Если синтаксис действителен, он завершается со [статусом][status] 0.
Его нельзя использовать в [режиме многие-ко-многим][many-to-many mode].

[status]: https://en.wikipedia.org/wiki/Exit_status

```shellsession
$ sass --check style.scss
```

#### `--precision`

Эта опция сообщает Sass, сколько цифр [точности][precision] использовать при выводе десятичных чисел.

[precision]: ../values/numbers#precision

```shellsession
$ echo -e 'h1\n  font-size: (100px / 3)' | sass --precision=20
h1 {
  font-size: 33.333333333333336px; }
```

#### `--cache-location`

Эта опция сообщает Sass, где хранить свой кеш проанализированных файлов, чтобы он мог работать быстрее в будущих вызовах.
По умолчанию это `.sass-cache`.

```shellsession
$ sass --cache-location=/tmp/sass-cache style.scss style.css
```

#### `--no-cache`

Этот флаг (сокращенно `-C`) говорит Sass не кэшировать проанализированные файлы вообще.

```shellsession
$ sass --no-cache style.scss style.css
```

#### `--trace`

Этот флаг указывает Sass напечатать полную трассировку стека Ruby при обнаружении ошибки.
Команда Sass использует его для отладки ошибок.

```shellsession
Traceback (most recent call last):
        25: from /usr/share/gems/sass/bin/sass:13:in `<main>'
        24: from /usr/share/gems/sass/lib/sass/exec/base.rb:18:in `parse!'
        23: from /usr/share/gems/sass/lib/sass/exec/base.rb:50:in `parse'
        22: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:63:in `process_result'
        21: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:396:in `run'
        20: from /usr/share/gems/sass/lib/sass/engine.rb:290:in `render'
        19: from /usr/share/gems/sass/lib/sass/engine.rb:414:in `_to_tree'
        18: from /usr/share/gems/sass/lib/sass/scss/parser.rb:41:in `parse'
        17: from /usr/share/gems/sass/lib/sass/scss/parser.rb:137:in `stylesheet'
        16: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'
        15: from /usr/share/gems/sass/lib/sass/scss/parser.rb:707:in `block_child'
        14: from /usr/share/gems/sass/lib/sass/scss/parser.rb:681:in `ruleset'
        13: from /usr/share/gems/sass/lib/sass/scss/parser.rb:689:in `block'
        12: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'
        11: from /usr/share/gems/sass/lib/sass/scss/parser.rb:708:in `block_child'
        10: from /usr/share/gems/sass/lib/sass/scss/parser.rb:743:in `declaration_or_ruleset'
         9: from /usr/share/gems/sass/lib/sass/scss/parser.rb:820:in `try_declaration'
         8: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1281:in `rethrow'
         7: from /usr/share/gems/sass/lib/sass/scss/parser.rb:807:in `block in try_declaration'
         6: from /usr/share/gems/sass/lib/sass/scss/parser.rb:999:in `value!'
         5: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1161:in `sass_script'
         4: from /usr/share/gems/sass/lib/sass/script/parser.rb:68:in `parse'
         3: from /usr/share/gems/sass/lib/sass/script/parser.rb:855:in `assert_expr'
         2: from /usr/share/gems/sass/lib/sass/script/lexer.rb:240:in `expected!'
         1: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1305:in `expected'
test.scss:1: Invalid CSS after "h1 {font-size: ": expected expression (e.g. 1px, bold), was "}" (Sass::SyntaxError)
```
#### `--quiet`

Этот флаг (сокращенно `-q`) указывает Sass не выдавать никаких предупреждений при компиляции.
По умолчанию Sass выдает предупреждения при использовании устаревших функций или при обнаружении [правила `@warn`][`@warn` rule].
Он также отключает [правило `@debug`][`@debug` rule].

[`@warn` rule]: ../at-rules/warn
[`@debug` rule]: ../at-rules/debug

```shellsession
$ sass --quiet style.scss style.css
```
