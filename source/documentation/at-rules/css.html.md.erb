---
title: At-Правила CSS
table_of_contents: true
---

<% impl_status dart: '1.15.0', libsass: false, ruby: false, feature: "Name Interpolation" do %>
  LibSass, Ruby Sass и более старые версии Dart Sass не поддерживают [интерполяцию][interpolation] в именах at-правил.
  Они поддерживают интерполяцию значений.

  [interpolation]: ../interpolation
<% end %>

Sass поддерживает все at-правила, которые являются частью собственно CSS.
Чтобы сохранить гибкость и совместимость с будущими версиями CSS, Sass имеет общую поддержку, которая по умолчанию охватывает почти все at-правила.
At-правило CSS записывается как `@<name> <value>`, `@<name> { ... }` или `@<name> <value> { ... }`.
Имя должно быть идентификатором, а значение (если оно существует) может быть чем угодно.
И имя, и значение могут содержать [интерполяцию][interpolation].

[interpolation]: ../interpolation

<% example do %>
  @namespace svg url(http://www.w3.org/2000/svg);

  @font-face {
    font-family: "Open Sans";
    src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2");
  }

  @counter-style thumbs {
    system: cyclic;
    symbols: "\1F44D";
  }
  ===
  @namespace svg url(http://www.w3.org/2000/svg)

  @font-face
    font-family: "Open Sans"
    src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2")

  @counter-style thumbs
    system: cyclic
    symbols: "\1F44D"
<% end %>

Если at-правило CSS вложено в правило стиля, эти два правила автоматически меняются местами, так что at-правило находится на верхнем уровне вывода CSS, а правило стиля находится внутри него.
Это упрощает добавление условного стиля без необходимости переписывать селектор правила стиля.

<% example do %>
  .print-only {
    display: none;

    @media print { display: block; }
  }
  ===
  .print-only
    display: none

    @media print
      display: block
<% end %>

## `@media`

<% impl_status dart: '1.11.0', libsass: false, ruby: '3.7.0', feature: 'Range Syntax' do %>
  LibSass и более старые версии Dart Sass и Ruby Sass не поддерживают медиа-запросы с функциями, написанными в [контекст диапазона][range context].
  Они поддерживают другие стандартные медиа-запросы.

  [range context]: https://www.w3.org/TR/mediaqueries-4/#mq-range-context

  <% example(autogen_css: false) do %>
    @media (width <= 700px) {
      body {
        background: green;
      }
    }
    ===
    @media (width <= 700px)
      body
        background: green
    ===
    @media (width <= 700px) {
      body {
        background: green;
      }
    }
  <% end %>
<% end %>

[Правило `@media`][`@media` rule] выполняет все вышеперечисленное и многое другое.
Помимо возможности интерполяции, он позволяет использовать [выражения SassScript][SassScript expressions] непосредственно в [запросы функций][feature queries].

[`@media` rule]: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
[SassScript expressions]: ../syntax/structure#expressions
[feature queries]: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features

<% example do %>
  $layout-breakpoint-small: 960px;

  @media (min-width: $layout-breakpoint-small) {
    .hide-extra-small {
      display: none;
    }
  }
  ===
  $layout-breakpoint-small: 960px

  @media (min-width: $layout-breakpoint-small)
    .hide-extra-small
      display: none
<% end %>

По возможности Sass также объединяет вложенные друг в друга медиа-запросы, чтобы упростить поддержку браузеров, которые еще не поддерживают вложенные правила `@media`.

<% example do %>
  @media (hover: hover) {
    .button:hover {
      border: 2px solid black;

      @media (color) {
        border-color: #036;
      }
    }
  }
  ===
  @media (hover: hover)
    .button:hover
      border: 2px solid black

      @media (color)
        border-color: #036
<% end %>

## `@supports`

[Правило `@supports`][`@supports` rule] также позволяет использовать [выражения SassScript expressions][SassScript expressions] в запросах объявления.

[`@supports` rule]: https://developer.mozilla.org/en-US/docs/Web/CSS/@supports

<% example do %>
  @mixin sticky-position {
    position: fixed;
    @supports (position: sticky) {
      position: sticky;
    }
  }

  .banner {
    @include sticky-position;
  }
  ===
  @mixin sticky-position
    position: fixed
    @supports (position: sticky)
      position: sticky



  .banner
    @include sticky-position
<% end %>

## `@keyframes`

[Правило `@keyframes` rule][`@keyframes` rule] работает так же, как общее at-правило, за исключением того, что его дочерние правила должны быть действительными правилами ключевых кадров (`<number>%`, `from` или `to`), а не обычными селекторами.

[`@keyframes` rule]: https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes

<% example do %>
  @keyframes slide-in {
    from {
      margin-left: 100%;
      width: 300%;
    }

    70% {
      margin-left: 90%;
      width: 150%;
    }

    to {
      margin-left: 0%;
      width: 100%;
    }
  }
  ===
  @keyframes slide-in
    from
      margin-left: 100%
      width: 300%


    70%
      margin-left: 90%
      width: 150%


    to
      margin-left: 0%
      width: 100%
<% end %>
