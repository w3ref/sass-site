---
title: "@import"
table_of_contents: true
introduction: >
  Sass расширяет CSS [правило `@import`](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) возможностью импортировать таблицы стилей Sass и CSS, обеспечивая доступ к [миксинам](mixin), [функциям](function) и [переменным](../variables) и объединение CSS нескольких таблиц стилей вместе.
  В отличие от простого импорта CSS, который требует, чтобы браузер выполнял несколько HTTP-запросов при отображении вашей страницы, импорт Sass полностью обрабатывается во время компиляции.
---

Импорт Sass имеет тот же синтаксис, что и импорт CSS, за исключением того, что он позволяет разделять несколько операций импорта запятыми, а не требует, чтобы каждый из них имел собственный `@import`.
Кроме того, в [синтаксисе с отступом][indented syntax] импортированные URL-адреса не обязательно должны иметь кавычки.

[indented syntax]: ../syntax#the-indented-syntax

<% heads_up do %>
  Команда Sass не рекомендует продолжать использовать правило `@import`.
  Sass будет [постепенно отказываться от него][gradually phase it out] в течение следующих нескольких лет и в конечном итоге полностью удалит его из языка.
  Вместо этого предпочтите [правило `@use`][`@use` rule].
  (Обратите внимание, что только Dart Sass в настоящее время поддерживает `@use`.
  Пользователи других реализаций должны вместо этого использовать правило `@import`.)

  [gradually phase it out]: https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline
  [`@use` rule]: use

  #### Что не так с `@import`?

  Правило `@import` имеет ряд серьезных проблем:

  * `@import` делает все переменные, миксины и функции глобально доступными.
    Из-за этого людям (или инструментам) очень сложно сказать, где что-то определено.

  * Поскольку все глобально, библиотеки должны добавлять префиксы ко всем своим участникам, чтобы избежать конфликтов имен.

  * [Правила `@extend`][`@extend` rules] также являются глобальными, что затрудняет прогнозирование того, какие правила стиля будут расширены.

    [`@extend` rules]: extend

  * Каждая таблица стилей выполняется и ее CSS генерируется *каждый раз* при добавлении `@import`, что увеличивает время компиляции и приводит к раздутому выводу.

  * Не было способа определить частные участники или селекторы заполнителей, которые были недоступны для последующих таблиц стилей.

  Новая модульная система и правило `@use` решают все эти проблемы.

  #### Как мне мигрировать?

  Мы написали [инструмент миграции][migration tool] который автоматически преобразует большую часть кода на основе `@import` в код на основе `@use` в мгновение ока.
  Просто наведите его на свои точки входа и позвольте ему работать!

  [migration tool]: /documentation/cli/migrator

<% end %>

<% example do %>
  // foundation/_code.scss
  code {
    padding: .25em;
    line-height: 0;
  }
  ---
  // foundation/_lists.scss
  ul, ol {
    text-align: left;

    & & {
      padding: {
        bottom: 0;
        left: 0;
      }
    }
  }
  ---
  // style.scss
  @import 'foundation/code', 'foundation/lists';
  ===
  // foundation/_code.sass
  code
    padding: .25em
    line-height: 0
  ---
  // foundation/_lists.sass
  ul, ol
    text-align: left

    & &
      padding:
        bottom: 0
        left: 0
  ---
  // style.sass
  @import foundation/code, foundation/lists
  ===
  code {
    padding: .25em;
    line-height: 0;
  }

  ul, ol {
    text-align: left;
  }
  ul ul, ol ol {
    padding-bottom: 0;
    padding-left: 0;
  }
<% end %>

Когда Sass импортирует файл, этот файл оценивается так, как если бы его содержимое появилось непосредственно вместо `@import`.
Любые [примеси][mixins], [функции][functions] и [переменные][variables] из импортированного файла становятся доступными, и весь его CSS включается в тот момент, когда был написан `@import`.
Более того, любые миксины, функции или переменные, которые были определены до `@import` (в том числе из других `@import`), доступны в импортированной таблице стилей.

[mixins]: mixin
[functions]: function
[variables]: ../variables

<% heads_up do %>
  Если одна и та же таблица стилей импортируется более одного раза, она будет оцениваться каждый раз заново.
  Если он просто определяет функции и миксины, это обычно не имеет большого значения, но если он содержит правила стиля, они будут скомпилированы в CSS более одного раза.
<% end %>

## Поиск файла

Было бы неинтересно записывать абсолютные URL-адреса для каждой импортируемой таблицы стилей, поэтому алгоритм Sass для поиска файла для импорта делает это немного проще.
Во-первых, вам не нужно явно указывать расширение файла, который вы хотите импортировать; `@import "variables"` автоматически загрузит `variables.scss`, `variables.sass` или `variables.css`.

<% heads_up do %>
  Чтобы таблицы стилей работали в каждой операционной системе, Sass импортирует файлы по *URL*, а не по *пути к файлу*.
  Это означает, что вам нужно использовать косую черту, а не обратную косую черту, даже если вы работаете в Windows.
<% end %>

### Загрузка путей

Все реализации Sass позволяют пользователям указывать *пути загрузки*: пути в файловой системе, которые Sass будет искать при разрешении импорта.
Например, если вы передаете `node_modules/susy/sass` в качестве пути загрузки, вы можете использовать `@import "susy"` для загрузки `node_modules/susy/sass/susy.scss`.

Однако импорт всегда будет сначала разрешаться относительно текущего файла.
Пути загрузки будут использоваться только в том случае, если не существует относительного файла, соответствующего импорту.
Это гарантирует, что вы не сможете случайно испортить относительный импорт при добавлении новой библиотеки.

<% fun_fact do %>
  В отличие от некоторых других языков, Sass не требует, чтобы вы использовали `./` для относительного импорта.
  Относительный импорт всегда доступен.
<% end %>

### Частичные

По соглашению, файлы Sass, которые предназначены только для импорта, а не для компиляции, начинаются с `_` (как в `_code.scss`).
Они называются *частичными*, и они говорят инструментам Sass не пытаться скомпилировать эти файлы самостоятельно.
Вы можете не использовать символ `_` при импорте частичного файла.

### Индексные файлы

<% impl_status dart: true, libsass: '3.6.0', ruby: '3.6.0' %>

Если вы напишете в папке `_index.scss` или `_index.sass`, то при импорте самой папки этот файл будет загружен на свое место.

<% example do %>
  // foundation/_code.scss
  code {
    padding: .25em;
    line-height: 0;
  }
  ---
  // foundation/_lists.scss
  ul, ol {
    text-align: left;

    & & {
      padding: {
        bottom: 0;
        left: 0;
      }
    }
  }
  ---
  // foundation/_index.scss
  @import 'code', 'lists';
  ---
  // style.scss
  @import 'foundation';
  ===
  // foundation/_code.sass
  code
    padding: .25em
    line-height: 0
  ---
  // foundation/_lists.sass
  ul, ol
    text-align: left

    & &
      padding:
        bottom: 0
        left: 0
  ---
  // foundation/_index.sass
  @import code, lists
  ---
  // style.sass
  @import foundation
  ===
  code {
    padding: .25em;
    line-height: 0;
  }

  ul, ol {
    text-align: left;
  }
  ul ul, ol ol {
    padding-bottom: 0;
    padding-left: 0;
  }
<% end %>

### Пользовательские импортеры

Все реализации Sass предоставляют способ определения пользовательских импортеров, которые управляют тем, как `@import` находит таблицы стилей:

* [Node Sass][] и [Dart Sass on npm][] предоставляют [параметр `importer`][`importer` option] как часть своего JS API.

* [Dart Sass on pub][] предоставляет абстрактный [класс `Importer`][`Importer` class], который может быть расширен пользовательским импортером.

* [Ruby Sass][] предоставляет абстрактный [класс `Importers::Base`][`Importers::Base` class], который может быть расширен пользовательским импортером.

[Node Sass]: https://npmjs.com/package/node-sass
[Dart Sass on npm]: https://npmjs.com/package/sass
[`importer` option]: https://github.com/sass/node-sass#importer--v200---experimental
[Dart Sass on pub]: https://pub.dartlang.org/packages/sass
[`Importer` class]: https://pub.dartlang.org/documentation/sass/latest/sass/Importer-class.html
[Ruby Sass]: /ruby-sass
[`Importers::Base` class]: https://www.rubydoc.info/gems/sass/Sass/Importers/Base

## Вложенность

Импорт обычно записывается на верхнем уровне таблицы стилей, но это не обязательно.
Они также могут быть вложены в [правила стиля][style rules] или [простые правила CSS][plain CSS at-rules].
Импортированный CSS вложен в этот контекст, что делает вложенный импорт полезным для привязки фрагмента CSS к определенному элементу или медиа-запросу.
Обратите внимание, что [примеси][mixins], [функции][functions] и [переменные][variables] верхнего уровня, определенные во вложенном импорте, по-прежнему определены глобально.

[style rules]: ../style-rules
[plain CSS at-rules]: css

<% example do %>
  // _theme.scss
  pre, code {
    font-family: 'Source Code Pro', Helvetica, Arial;
    border-radius: 4px;
  }
  ---
  // style.scss
  .theme-sample {
    @import "theme";
  }
  ===
  // _theme.sass
  pre, code
    font-family: 'Source Code Pro', Helvetica, Arial
    border-radius: 4px
  ---
  // style.sass
  .theme-sample
    @import theme
  ===
  .theme-sample pre, .theme-sample code {
    font-family: 'Source Code Pro', Helvetica, Arial;
    border-radius: 4px;
  }
<% end %>

<% fun_fact do %>
  Вложенный импорт очень полезен для определения сторонних таблиц стилей, но если вы являетесь автором импортируемой таблицы стилей, обычно лучше записать свои стили в [примесь][mixin] и включить этот миксин во вложенные контекст.
  Примесь можно использовать более гибкими способами, и при взгляде на импортированную таблицу стилей становится понятнее, как она предназначена для использования.

  [mixin]: mixin
<% end %>

<% heads_up do %>
  CSS во вложенном импорте оценивается как миксин, что означает, что любые [родительские селекторы][parent selectors] будут ссылаться на селектор, в который вложена таблица стилей.

  [parent selectors]: ../style-rules/parent-selector

  <% example do %>
    // _theme.scss
    ul li {
      $padding: 16px;
      padding-left: $padding;
      [dir=rtl] & {
        padding: {
          left: 0;
          right: $padding;
        }
      }
    }
    ---
    // style.scss
    .theme-sample {
      @import "theme";
    }
    ===
    // _theme.sass
    ul li
      $padding: 16px
      padding-left: $padding
      [dir=rtl] &
        padding:
          left: 0
          right: $padding
    ---
    // style.sass
    .theme-sample
      @import theme
    ===
    .theme-sample ul li {
      padding-left: 16px;
    }
    [dir=rtl] .theme-sample ul li {
      padding-left: 0;
      padding-right: 16px;
    }
  <% end %>
<% end %>

## Импорт CSS

<% impl_status dart: '1.11.0', libsass: :partial, ruby: false do %>
  LibSass поддерживает импорт файлов с расширением `.css`, но вопреки спецификации они обрабатываются как файлы SCSS, а не анализируются как CSS.
  Это поведение устарело, и в настоящее время разрабатывается обновление для поддержки поведения, описанного ниже.
<% end %>

Помимо импорта файлов `.sass` и `.scss`, Sass может импортировать простые старые файлы `.css`.
Единственное правило состоит в том, что импорт *не должен* явно включать расширение `.css`, потому что оно используется для обозначения [простого CSS `@import`][plain CSS `@import`].

[plain CSS `@import`]: #plain-css-imports

<% example do %>
  // code.css
  code {
    padding: .25em;
    line-height: 0;
  }
  ---
  // style.scss
  @import 'code';
  ===
  // code.css
  code {
    padding: .25em;
    line-height: 0;
  }
  ---
  // style.sass
  @import code
  ===
  code {
    padding: .25em;
    line-height: 0;
  }
<% end %>

Файлы CSS, импортированные Sass, не поддерживают никаких специальных функций Sass.
Чтобы гарантировать, что авторы случайно не напишут Sass в своем CSS, все функции Sass, которые также не являются корректным CSS, будут вызывать ошибки.
В противном случае CSS будет отображаться как есть.
Его можно даже [расширить][extended]!

[extended]: extend

## Простой CSS `@import`

<% impl_status dart: true, libsass: :partial, ruby: true do %>
  По умолчанию LibSass правильно обрабатывает простой импорт CSS.
  Однако любые [пользовательские импортеры][custom importers] будут неправильно применяться к правилам простого CSS `@import`, что позволяет этим правилам загружать файлы Sass.

  [custom importers]: ../js-api/interfaces/LegacySharedOptions#importer
<% end %>


Поскольку `@import` также определен в CSS, Sass нужен способ компиляции простого CSS `@import` без попытки импортировать файлы во время компиляции.
Чтобы добиться этого и гарантировать, что SCSS является как можно большей частью надмножества CSS, Sass будет компилировать любой `@import` со следующими характеристиками в простой импорт CSS:

* Импортирует, где URL заканчивается на `.css`.
* Импортирует, где URL начинается с `http://` или `https://`.
* Импортирует, где URL-адрес записан как `url()`.
* Импорт с медиа-запросами.

<% example do %>
  @import "theme.css";
  @import "http://fonts.googleapis.com/css?family=Droid+Sans";
  @import url(theme);
  @import "landscape" screen and (orientation: landscape);
  ===
  @import "theme.css"
  @import "http://fonts.googleapis.com/css?family=Droid+Sans"
  @import url(theme)
  @import "landscape" screen and (orientation: landscape)
<% end %>

### Интерполяция

Хотя при импорте Sass нельзя использовать [интерполяцию][interpolation] (чтобы всегда можно было определить, откуда берутся [примеси][mixins], [функции][functions] и [переменные][variables]), простой импорт CSS может.
Это позволяет динамически генерировать импорт, например, на основе параметров миксина.

[interpolation]: ../interpolation

<% example do %>
  @mixin google-font($family) {
    @import url("http://fonts.googleapis.com/css?family=#{$family}");
  }

  @include google-font("Droid Sans");
  ===
  @mixin google-font($family)
    @import url("http://fonts.googleapis.com/css?family=#{$family}")


  @include google-font("Droid Sans")
<% end %>

## Импорт и модули

<%= partial '../snippets/module-system-status' %>

[Модульная система][module system] Sass легко интегрируется с `@import`, импортируете ли вы файл, содержащий правила `@use`, или загружаете файл, содержащий импорт, как модуль.
Мы хотим сделать переход от `@import` к `@use` как можно более плавным.

[module system]: use

### Импорт файла модуля-системы

Когда вы импортируете файл, содержащий правила `@use`, импортирующий файл имеет доступ ко всем участникам (даже частным участникам), определенным непосредственно в этом файле, но *не* ни к каким участникам из модулей, загруженных этим файлом.
Однако, если этот файл содержит [правила `@forward`][`@forward` rules], импортируемый файл будет иметь доступ к перенаправленным участникам. Это означает, что вы можете импортировать библиотеку, которая была написана для использования с модульной системой.

[`@forward` rules]: forward

<% heads_up do %>
  Когда импортируется файл с правилами `@use`, весь CSS, транзитивно загруженный ими, включается в результирующую таблицу стилей, даже если он уже был включен другим импортом.
  Если вы не будете осторожны, это может привести к раздуванию вывода CSS!
<% end %>

#### Файлы только для импорта

API, который имеет смысл для `@use`, может не иметь смысла для `@import`.
Например, `@use` по умолчанию добавляет пространство имен всем участникам, так что вы можете безопасно использовать короткие имена, но `@import` не делает, поэтому вам может понадобиться что-то более длинное.
Если вы являетесь автором библиотеки, вы можете быть обеспокоены тем, что если вы обновите свою библиотеку для использования новой системы модулей, ваши существующие пользователи, основанные на `@import`, сломаются.

Чтобы упростить эту задачу, Sass также поддерживает *файлы только для импорта*.
Если вы назовете файл `<name>.import.scss`, он будет загружен только для импорта, а не для `@use`.
Таким образом, вы можете сохранить совместимость для пользователей `@import`, в то же время предоставляя удобный API для пользователей новой модульной системы.

<% example(autogen_css: false) do %>
  // _reset.scss

  // Пользователи системы модулей пишут `@include reset.list()`.
  @mixin list() {
    ul {
      margin: 0;
      padding: 0;
      list-style: none;
    }
  }
  ---
  // _reset.import.scss

  // Устаревшие пользователи импорта могут продолжать писать `@include reset-list()`.
  @forward "reset" as reset-*;
  ===
  // _reset.sass

  // Пользователи системы модулей пишут `@include reset.list()`.
  @mixin list()
    ul
      margin: 0
      padding: 0
      list-style: none
  ---
  // _reset.import.sass

  // Устаревшие пользователи импорта могут продолжать писать `@include reset-list()`.
  @forward "reset" as reset-*
<% end %>

#### Настройка модулей с помощью импорта

<% impl_status dart: '1.24.0', libsass: false, ruby: false %>

Вы можете [настроить модули][configure modules], которые загружаются через `@import`, определяя глобальные переменные до `@import`, который первым загружает этот модуль.

[configure modules]: use#configuration

<% example do %>
  // _library.scss
  $color: blue !default;

  a {
    color: $color;
  }
  ---
  // _library.import.scss
  @forward 'library' as lib-*;
  ---
  // style.sass
  $lib-color: green;
  @import "library";
  ===
  $color: blue !default

  a
    color: $color
  ---
  // _library.import.sass
  @forward 'library' as lib-*
  ---
  // style.sass
  $lib-color: green
  @import "library"
  ===
  a {
    color: green;
  }
<% end %>

<% heads_up do %>
  Модули загружаются только один раз, поэтому, если вы измените конфигурацию после того, как вы `@import` модуля в первый раз (даже косвенно), изменение будет проигнорировано, если вы `@import` модуль снова.
<% end %>

### Загрузка модуля, содержащего импорт

Когда вы используете `@use` (или `@forward`), загружаете модуль, который использует `@import`, этот модуль будет содержать все открытые участники, определенные таблицей стилей, которую вы загружаете, *и* все, что таблица стилей транзитивно импортирует. Другими словами, все, что импортируется, обрабатывается так, как если бы оно было записано в одной большой таблице стилей.

Это упрощает преобразование start с использованием `@use` в таблице стилей даже до того, как все библиотеки, от которых вы зависите, будут преобразованы в новую модульную систему.
Однако имейте в виду, что если они все-таки конвертируют, их API-интерфейсы могут измениться!
