---
title: "@each"
introduction: >
  Правило `@each` упрощает создание стилей или оценку кода для каждого элемента [списка](../../values/lists) или каждой пары в [карте](../../values/maps).
  Он отлично подходит для повторяющихся стилей, между которыми есть всего несколько вариаций.
  Обычно пишется `@each <variable> in <expression> { ... }`, где [выражение](../../syntax/structure#expressions) возвращает список.
  Блок оценивается по очереди для каждого элемента списка, который присваивается заданному имени переменной.
---

<%= partial 'code-snippets/example-each-list' %>

## С картами

Вы также можете использовать `@each` для перебора каждой пары ключ/значение на карте, написав ее `@each <variable>, <variable> in <expression> { ... }`.
Ключ присваивается первому имени переменной, а элемент - второму.

<%= partial 'code-snippets/example-each-map' %>

## Деструктуризация

Если у вас есть список списков, вы можете использовать `@each` для автоматического присвоения переменных каждому из значений из внутренних списков, написав его `@each <variable...> in <expression> { ... }`.
Это известно как *деструктуризация*, поскольку переменные соответствуют структуре внутренних списков.
Каждому имени переменной присваивается значение в соответствующей позиции в списке или [`null`][], если в списке недостаточно значений.

[`null`]: ../../values/null

<% example do %>
  $icons:
    "eye" "\f112" 12px,
    "start" "\f12e" 16px,
    "stop" "\f12f" 10px;

  @each $name, $glyph, $size in $icons {
    .icon-#{$name}:before {
      display: inline-block;
      font-family: "Icon Font";
      content: $glyph;
      font-size: $size;
    }
  }
  ===
  $icons: "eye" "\f112" 12px, "start" "\f12e" 16px, "stop" "\f12f" 10px




  @each $name, $glyph, $size in $icons
    .icon-#{$name}:before
      display: inline-block
      font-family: "Icon Font"
      content: $glyph
      font-size: $size
<% end %>

<% fun_fact do %>
  Поскольку `@each` поддерживает деструктуризацию, а [карты считаются списками списков][maps count as lists of lists], поддержка карт `@each` работает, в частности, без специальной поддержки карт.

  [maps count as lists of lists]: ../../values/maps
<% end %>
