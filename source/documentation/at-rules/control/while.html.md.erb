---
title: "@while"
introduction: >
  Правило `@while`, записанное `@while <expression> { ... }`, оценивает свой блок, если его [выражение](../../syntax/structure#expressions) возвращает `true`. Затем, если его выражение все еще возвращает `true`, он снова оценивает свой блок. Это продолжается до тех пор, пока выражение, наконец, не вернет `false`.
---

<% example do %>
  @use "sass:math";

  /// Делит `$value` на `$ratio` , пока оно не станет меньше `$base`.
  @function scale-below($value, $base, $ratio: 1.618) {
    @while $value > $base {
      $value: math.div($value, $ratio);
    }
    @return $value;
  }

  $normal-font-size: 16px;
  sup {
    font-size: scale-below(20px, 16px);
  }
  ===
  @use "sass:math"

  /// Делит `$value` на `$ratio` , пока оно не станет меньше `$base`.
  @function scale-below($value, $base, $ratio: 1.618)
    @while $value > $base
      $value: math.div($value, $ratio)
    @return $value



  $normal-font-size: 16px
  sup
    font-size: scale-below(20px, 16px)
  ===
  sup {
    font-size: 12.36094px;
  }
<% end %>

<% heads_up do %>
  Хотя `@while` необходим для нескольких особенно сложных таблиц стилей, обычно лучше использовать [`@each`][] или [`@for`][], если любой из них будет работать. Они более понятны для читателя и часто быстрее компилируются.

  [`@each`]: each
  [`@for`]: for
<% end %>

<%= partial 'documentation/snippets/truthiness-and-falsiness' %>
