---
title: "@mixin и @include"
table_of_contents: true
introduction: >
  Миксины позволяют вам определять стили, которые можно повторно использовать в вашей таблице стилей.
  Они позволяют легко избежать использования несемантических классов, таких как `.float-left`, и распределить коллекции стилей в библиотеках.
---

Миксины определяются с помощью at-правила `@mixin`, которое записывается как `@mixin <name> { ... }` или `@mixin name(<arguments...>) { ... }`.
Имя миксина может быть любым идентификатором Sass, и оно может содержать любую [конструкцию][statement] кроме [конструкции верхнего уровня][top-level statements].
Их можно использовать для инкапсуляции стилей, которые можно поместить в одно [правило стиля][style rule]; они могут содержать собственные правила стилей, которые могут быть вложены в другие правила или включены в верхний уровень таблицы стилей; или они могут просто служить для изменения переменных.

[statement]: ../syntax/structure#statements
[top-level statements]: ../syntax/structure#top-level-statements
[style rule]: ../style-rules

Миксины включаются в текущий контекст с помощью ат-правила `@include`, которое записывается `@include <name>` или `@include <name>(<arguments...>)`, с именем миксина включены.

<% example do %>
  @mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  @mixin horizontal-list {
    @include reset-list;

    li {
      display: inline-block;
      margin: {
        left: -2px;
        right: 2em;
      }
    }
  }

  nav ul {
    @include horizontal-list;
  }
  ===
  @mixin reset-list
    margin: 0
    padding: 0
    list-style: none


  @mixin horizontal-list
    @include reset-list

    li
      display: inline-block
      margin:
        left: -2px
        right: 2em




  nav ul
    @include horizontal-list
<% end %>

<% fun_fact do %>
  Имена миксинов, как и все идентификаторы Sass, рассматривают дефисы и подчеркивания как идентичные.
  Это означает, что `reset-list` и `reset_list` относятся к одному и тому же миксину.
  Это историческое наследие самых ранних дней Sass, когда в именах идентификаторов разрешались *только* символы подчеркивания.
  После того, как Sass добавил поддержку дефисов в соответствии с синтаксисом CSS, они стали эквивалентными, чтобы упростить миграцию.
<% end %>

## Аргументы

<%# При изменении этого раздела не забудьте также изменить раздел аргументов функции! %>

Миксины также могут принимать аргументы, что позволяет настраивать их поведение при каждом вызове.
Аргументы указываются в правиле `@mixin` после имени миксина в виде списка имен переменных, заключенного в круглые скобки.
Затем миксин должен быть включен с таким же количеством аргументов в форме [выражений SassScript][SassScript expressions].
Значения этих выражений доступны в теле миксина как соответствующие переменные.

[SassScript expressions]: ../syntax/structure#expressions

<% example do %>
  @mixin rtl($property, $ltr-value, $rtl-value) {
    #{$property}: $ltr-value;

    [dir=rtl] & {
      #{$property}: $rtl-value;
    }
  }

  .sidebar {
    @include rtl(float, left, right);
  }
  ===
  @mixin rtl($property, $ltr-value, $rtl-value)
    #{$property}: $ltr-value

    [dir=rtl] &
      #{$property}: $rtl-value



  .sidebar
    @include rtl(float, left, right)
<% end %>

<% fun_fact do %>
  Списки аргументов также могут иметь конечные запятые!
  Это может помочь избежать синтаксических ошибок при рефакторинге таблиц стилей.
<% end %>

### Необязательные аргументы

Обычно каждый аргумент, который объявляет миксин, должен быть передан, когда этот миксин включен.
Однако вы можете сделать аргумент необязательным, указав *значение по умолчанию*, которое будет использоваться, если этот аргумент не передан.
Значения по умолчанию используют тот же синтаксис, что и [объявления переменных][variable declarations]: имя переменной, за которым следует двоеточие и [выражение SassScript][SassScript expression].
Это упрощает определение гибких API-интерфейсов миксинов, которые можно использовать как простыми, так и сложными способами.

[variable declarations]: ../variables
[SassScript expression]: ../syntax/structure#expressions

<% example do %>
  @mixin replace-text($image, $x: 50%, $y: 50%) {
    text-indent: -99999em;
    overflow: hidden;
    text-align: left;

    background: {
      image: $image;
      repeat: no-repeat;
      position: $x $y;
    }
  }

  .mail-icon {
    @include replace-text(url("/images/mail.svg"), 0);
  }
  ===
  @mixin replace-text($image, $x: 50%, $y: 50%)
    text-indent: -99999em
    overflow: hidden
    text-align: left

    background:
      image: $image
      repeat: no-repeat
      position: $x $y

  .mail-icon
    @include replace-text(url("/images/mail.svg"), 0)
<% end %>

<% fun_fact do %>
  Значения по умолчанию могут быть любым выражением SassScript, и они могут даже ссылаться на более ранние аргументы!
<% end %>

### Аргументы ключевых слов

Когда миксин включен, аргументы можно передавать по имени в дополнение к передаче их по позиции в списке аргументов.
Это особенно полезно для миксинов с несколькими необязательными аргументами или с аргументами [boolean][], значение которых неочевидно без имени, связанного с ними.
Аргументы ключевого слова используют тот же синтаксис, что и [объявления переменных][variable declarations] и [необязательные аргументы][optional arguments].

[boolean]: ../values/booleans
[optional arguments]: #optional-arguments

<% example do %>
  @mixin square($size, $radius: 0) {
    width: $size;
    height: $size;

    @if $radius != 0 {
      border-radius: $radius;
    }
  }

  .avatar {
    @include square(100px, $radius: 4px);
  }
  ===
  @mixin square($size, $radius: 0)
    width: $size
    height: $size

    @if $radius != 0
      border-radius: $radius



  .avatar
    @include square(100px, $radius: 4px)
<% end %>

<% heads_up do %>
  Поскольку *любой* аргумент может передаваться по имени, будьте осторожны при переименовании аргументов миксина... это может сломать ваших пользователей!
  Может быть полезно сохранить старое имя в качестве [необязательного аргумента][optional argument] на некоторое время и напечатать [предупреждение][warning], если кто-то его передаст, чтобы они знали, что нужно перейти на новый аргумент.

  [optional argument]: #optional-arguments
  [warning]: warn
<% end %>

### Принятие произвольных аргументов

Иногда для миксина полезно иметь возможность принимать любое количество аргументов.
Если последний аргумент в объявлении `@mixin` оканчивается на `...`, то все дополнительные аргументы в этот миксин передаются этому аргументу как [список][list].
Этот аргумент известен как [список аргументов][argument list].

[list]: ../values/lists
[argument list]: ../values/lists#argument-lists

<% example do %>
  @mixin order($height, $selectors...) {
    @for $i from 0 to length($selectors) {
      #{nth($selectors, $i + 1)} {
        position: absolute;
        height: $height;
        margin-top: $i * $height;
      }
    }
  }

  @include order(150px, "input.name", "input.address", "input.zip");
  ===
  @mixin order($height, $selectors...)
    @for $i from 0 to length($selectors)
      #{nth($selectors, $i + 1)}
        position: absolute
        height: $height
        margin-top: $i * $height




  @include order(150px, "input.name", "input.address", "input.zip")
<% end %>

#### Принятие произвольных аргументов ключевого слова

Списки аргументов также могут использоваться для получения аргументов произвольного ключевого слова.
[Функция `meta.keywords()`][`meta.keywords()` function] принимает список аргументов и возвращает любые дополнительные ключевые слова, которые были переданы миксину в виде [карты][map] от имен аргументов (не включая `$`) до значений этих аргументов.

[`meta.keywords()` function]: ../modules/meta#keywords
[map]: ../values/maps

<%# TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass %>

<%= partial 'code-snippets/example-mixin-arbitrary-keyword-arguments' %>

<% fun_fact do %>
  Если вы никогда не передаете список аргументов [функции `meta.keywords()`][`meta.keywords()` function], этот список аргументов не допускает дополнительных аргументов ключевого слова.
  Это помогает вызывающим абонентам вашего миксина быть уверенным, что они случайно не ошиблись в именах аргументов.

  [`meta.keywords()` function]: ../modules/meta#keywords
<% end %>

#### Передача произвольных аргументов

Так же, как списки аргументов позволяют миксинам принимать произвольные позиционные или ключевые аргументы, тот же синтаксис может использоваться для *передачи* позиционных и ключевых аргументов миксину.
Если вы передадите список, за которым следует `...` в качестве последнего аргумента включения, его элементы будут рассматриваться как дополнительные позиционные аргументы.
Точно так же карта, за которой следует `...`, будет рассматриваться как дополнительные аргументы ключевого слова.
Вы даже можете пройти оба сразу!

<% example(autogen_css: false) do %>
  $form-selectors: "input.name", "input.address", "input.zip" !default;

  @include order(150px, $form-selectors...);
  ===
  $form-selectors: "input.name", "input.address", "input.zip" !default

  @include order(150px, $form-selectors...)
<% end %>

<% fun_fact do %>
  Поскольку [список аргументов][argument list] отслеживает как позиционные, так и ключевые аргументы, вы используете его для передачи обоих одновременно другому миксину.
  Это упрощает определение псевдонима для миксина!

  [argument list]: ../values/lists#argument-lists

  <% example do %>
    @mixin btn($args...) {
      @warn "The btn() mixin is deprecated. Include button() instead.";
      @include button($args...);
    }
    ===
    @mixin btn($args...)
      @warn "The btn() mixin is deprecated. Include button() instead."
      @include button($args...)
  <% end %>
<% end %>

## Блоки содержимого

Помимо аргументов, миксин может принимать целый блок стилей, известный как *блок содержимого*.
Примесь может объявить, что принимает блок содержимого, включив в свое тело at-правило `@content`.
Блок содержимого передается с использованием фигурных скобок, как и любой другой блок в Sass, и вводится вместо правила `@content`.

<% example do %>
  @mixin hover {
    &:not([disabled]):hover {
      @content;
    }
  }

  .button {
    border: 1px solid black;
    @include hover {
      border-width: 2px;
    }
  }
  ===
  @mixin hover
    &:not([disabled]):hover
      @content



  .button
    border: 1px solid black
    @include hover
      border-width: 2px
<% end %>

<% fun_fact do %>
  Примесь может включать в себя несколько at-правил `@content`.
  Если это так, блок содержимого будет включен отдельно для каждого `@content`.
<% end %>

<% heads_up do %>
  Блок содержимого имеет *лексическую область видимости*, что означает, что он может видеть только [локальные переменные][local variables] в области, в которую включен миксин.
  Он не видит никаких переменных, определенных в переданном ему миксине, даже если они определены до вызова блока содержимого.

  [local variables]: ../variables#scope
<% end %>

### Передача аргументов в блоки содержимого

<% impl_status dart: '1.15.0', libsass: false, ruby: false %>

Миксин может передавать аргументы своему блоку содержимого так же, как он передает аргументы другому миксину, написав `@content(<arguments...>)`.
Пользователь, записывающий блок содержимого, может принимать аргументы, записывая `@include <name> using (<arguments...>)`.
Список аргументов для блока содержимого работает так же, как список аргументов миксина, а аргументы, переданные ему с помощью `@content`, работают так же, как передача аргументов миксину.

<% heads_up do %>
  Если миксин передает аргументы своему блоку содержимого, этот блок содержимого *должен* объявить, что он принимает эти аргументы.
  Это означает, что рекомендуется передавать аргументы только по позиции (а не по имени), и это означает, что передача большего количества аргументов является критическим изменением.

   Если вы хотите гибко определять, какую информацию вы передаете в блок содержимого, подумайте о передаче ему [карты][map], которая содержит информацию, которая может ему понадобиться!

  [map]: ../values/maps
<% end %>

<%# TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass %>

<% example(autogen_css: false) do %>
  @mixin media($types...) {
    @each $type in $types {
      @media #{$type} {
        @content($type);
      }
    }
  }

  @include media(screen, print) using ($type) {
    h1 {
      font-size: 40px;
      @if $type == print {
        font-family: Calluna;
      }
    }
  }
  ===
  @mixin media($types...)
    @each $type in $types
      @media #{$type}
        @content($type)




  @include media(screen, print) using ($type)
    h1
      font-size: 40px
      @if $type == print
        font-family: Calluna
  ===
  @media screen {
    h1 {
      font-size: 40px;
    }
  }
  @media print {
    h1 {
      font-size: 40px;
      font-family: Calluna;
    }
  }
<% end %>

## Синтаксис миксин с отступом

[Синтаксис с отступом][indented syntax] имеет специальный синтаксис для определения и использования миксинов в дополнение к стандартным `@mixin` и `@include`.
Миксины определяются с помощью символа `=` и подключаются с помощью `+`.
Хотя этот синтаксис короче, его труднее понять с первого взгляда, и пользователям рекомендуется избегать его.

[indented syntax]: ../syntax#the-indented-syntax

<% example(syntax: :sass) do %>
  =reset-list
    margin: 0
    padding: 0
    list-style: none

  =horizontal-list
    +reset-list

    li
      display: inline-block
      margin:
        left: -2px
        right: 2em

  nav ul
    +horizontal-list
<% end %>
