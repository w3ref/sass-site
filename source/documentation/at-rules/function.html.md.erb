---
title: "@function"
table_of_contents: true
introduction: >
  Функции позволяют вам определять сложные операции со [значениями SassScript](../values), которые вы можете повторно использовать в своей таблице стилей.
  Они позволяют легко абстрагироваться от общих формул и поведения в удобочитаемой форме.
---

Функции определяются с помощью at-правила `@function`, которое записывается как `@function <name>(<arguments...>) { ... }`.
Имя функции может быть любым идентификатором Sass.
Он может содержать только [универсальные конструкции][universal statements], а также [at-правило `@return`][`@return` at-rule], которое указывает значение, используемое в результате вызова функции.
Функции вызываются с использованием обычного синтаксиса функций CSS.

[universal statements]: ../syntax/structure#universal-statements
[`@return` at-rule]: #return

<% example do %>
  @function pow($base, $exponent) {
    $result: 1;
    @for $_ from 1 through $exponent {
      $result: $result * $base;
    }
    @return $result;
  }

  .sidebar {
    float: left;
    margin-left: pow(4, 3) * 1px;
  }
  ===
  @function pow($base, $exponent)
    $result: 1
    @for $_ from 1 through $exponent
      $result: $result * $base

    @return $result


  .sidebar
    float: left
    margin-left: pow(4, 3) * 1px
<% end %>

<% fun_fact do %>
  Имена функций, как и все идентификаторы Sass, рассматривают дефисы и подчеркивания как идентичные.
  Это означает, что `scale-color` и `scale_color` относятся к одной и той же функции.
  Это историческое наследие самых ранних дней Sass, когда он *только* разрешал подчеркивание в именах идентификаторов.
  После того, как Sass добавил поддержку дефисов в соответствии с синтаксисом CSS, они стали эквивалентными, чтобы упростить миграцию.
<% end %>

<% heads_up do %>
  Хотя технически возможно, чтобы функции имели побочные эффекты, такие как установка [глобальных переменных][global variables], это настоятельно не рекомендуется. Используйте [примеси][mixins] для побочных эффектов и используйте функции только для вычисления значений.

  [global variables]: ../variables#scope
  [mixins]: mixin
<% end %>

## Аргументы

<%# При изменении этого раздела не забудьте также изменить раздел аргументов миксина! %>

Аргументы позволяют настраивать поведение функций при каждом их вызове.
Аргументы указываются в правиле `@function` после имени функции в виде списка имен переменных, заключенного в круглые скобки.
Функция должна вызываться с таким же количеством аргументов в виде [выражений SassScript][SassScript expressions].
Значения этих выражений доступны в теле функции как соответствующие переменные.

[SassScript expressions]: ../syntax/structure#expressions

<% fun_fact do %>
  Списки аргументов также могут иметь конечные запятые!
  Это может помочь избежать синтаксических ошибок при рефакторинге таблиц стилей.
<% end %>

### Необязательные аргументы

Обычно каждый аргумент, который объявляет функция, должен быть передан при включении этой функции.
Однако вы можете сделать аргумент необязательным, указав *значение по умолчанию*, которое будет использоваться, если эти аргументы не переданы.
Значения по умолчанию используют тот же синтаксис, что и [объявления переменных][variable declarations]: имя переменной, за которым следует двоеточие и [выражение SassScript][SassScript expression].
Это упрощает определение гибких API-интерфейсов unction, которые можно использовать как простыми, так и сложными способами.

[variable declarations]: ../variables
[SassScript expression]: ../syntax/structure#expressions

<% example do %>
  @function invert($color, $amount: 100%) {
    $inverse: change-color($color, $hue: hue($color) + 180);
    @return mix($inverse, $color, $amount);
  }

  $primary-color: #036;
  .header {
    background-color: invert($primary-color, 80%);
  }
  ===
  @function invert($color, $amount: 100%)
    $inverse: change-color($color, $hue: hue($color) + 180)
    @return mix($inverse, $color, $amount)


  $primary-color: #036
  .header
    background-color: invert($primary-color, 80%)
<% end %>

<% fun_fact do %>
  Значения по умолчанию могут быть любым выражением SassScript, и они могут даже ссылаться на более ранние аргументы!
<% end %>

### Аргументы ключевых слов

При вызове функции аргументы могут передаваться по имени в дополнение к передаче их по позиции в списке аргументов.
Это особенно полезно для функций с несколькими необязательными аргументами или с аргументами [boolean], значение которых неочевидно без имени, которое будет им соответствовать.
Аргументы ключевого слова используют тот же синтаксис, что и [объявления переменных][variable declarations] и [необязательные аргументы][optional arguments].

[boolean]: ../values/booleans
[optional arguments]: #optional-arguments

<% example do %>
  $primary-color: #036;
  .banner {
    background-color: $primary-color;
    color: scale-color($primary-color, $lightness: +40%);
  }
  ===
  $primary-color: #036
  .banner
    background-color: $primary-color
    color: scale-color($primary-color, $lightness: +40%)
<% end %>

<% heads_up do %>
  Поскольку *любой аргумент может передаваться по имени, будьте осторожны при переименовании аргументов функции... это может сломать ваших пользователей!
  Может быть полезно сохранить старое имя в качестве [необязательного аргумента][optional argument] на некоторое время и напечатать [предупреждение][warning], если кто-то его передаст, чтобы они знали, что нужно перейти на новый аргумент.

  [optional argument]: #optional-arguments
  [warning]: warn
<% end %>

### Принятие произвольных аргументов

Иногда полезно, чтобы функция могла принимать любое количество аргументов.
Если последний аргумент в объявлении `@function` заканчивается на `...`, то все дополнительные аргументы этой функции передаются этому аргументу как [список][list].
Этот аргумент известен как [список аргументов][argument list].

[list]: ../values/lists
[argument list]: ../values/lists#argument-lists

<% example do %>
  @function sum($numbers...) {
    $sum: 0;
    @each $number in $numbers {
      $sum: $sum + $number;
    }
    @return $sum;
  }

  .micro {
    width: sum(50px, 30px, 100px);
  }
  ===
  @function sum($numbers...)
    $sum: 0
    @each $number in $numbers
      $sum: $sum + $number

    @return $sum


  .micro
    width: sum(50px, 30px, 100px)
<% end %>

#### Принятие произвольных аргументов ключевого слова

Списки аргументов также могут использоваться для получения аргументов произвольного ключевого слова. [Функция `meta.keywords()`][`meta.keywords()` function] принимает список аргументов и возвращает любые дополнительные ключевые слова, которые были переданы функции в виде [карты][map] от имен аргументов (не включая `$`) до значений этих аргументов.

[`meta.keywords()` function]: ../modules/meta#keywords
[map]: ../values/maps

<% fun_fact do %>
  Если вы никогда не передаете список аргументов [функции `meta.keywords()`][`meta.keywords()` function], этот список аргументов не будет допускать дополнительных аргументов ключевого слова.
  Это помогает вызывающим абонентам вашей функции быть уверенным, что они случайно не ошиблись в именах аргументов.

  [`meta.keywords()` function]: ../modules/meta#keywords
<% end %>

#### Передача произвольных аргументов

Так же, как списки аргументов позволяют функциям принимать произвольные позиционные аргументы или аргументы ключевого слова, тот же синтаксис может использоваться для *передачи* позиционных аргументов и аргументов ключевого слова функции.
Если вы передадите список, за которым следует `...` в качестве последнего аргумента вызова функции, его элементы будут рассматриваться как дополнительные позиционные аргументы.
Точно так же карта, за которой следует `...`, будет рассматриваться как дополнительные аргументы ключевого слова.
Вы даже можете пройти оба сразу!

<% example do %>
  $widths: 50px, 30px, 100px;
  .micro {
    width: min($widths...);
  }
  ===
  $widths: 50px, 30px, 100px
  .micro
    width: min($widths...)
<% end %>

<% fun_fact do %>
  Поскольку [список аргументов][argument list] отслеживает как позиционные, так и ключевые аргументы, вы используете его для передачи обоих сразу в другую функцию.
  Это упрощает определение псевдонима для функции!

  [argument list]: ../values/lists#argument-lists

  <% example do %>
    @function fg($args...) {
      @warn "The fg() function is deprecated. Call foreground() instead.";
      @return foreground($args...);
    }
    ===
    @function fg($args...)
      @warn "The fg() function is deprecated. Call foreground() instead."
      @return foreground($args...)
  <% end %>
<% end %>

## `@return`

At-правило `@return` указывает значение, используемое в результате вызова функции.
Это разрешено только внутри тела `@function`, и каждая `@function` должна оканчиваться на `@return`.

Когда встречается `@return` , он немедленно завершает функцию и возвращает ее результат.
Ранний возврат может быть полезен для обработки крайних случаев или случаев, когда доступен более эффективный алгоритм без обертывания всей функции в [блоке `@else` block][`@else` block].

[`@else` block]: control/if#else

<% example(autogen_css: false) do %>
  @use "sass:string";

  @function str-insert($string, $insert, $index) {
    // Избегайте создания новых строк, если нам это не нужно.
    @if string.length($string) == 0 {
      @return $insert;
    }

    $before: string.slice($string, 0, $index);
    $after: string.slice($string, $index);
    @return $before + $insert + $after;
  }
  ===
  @use "sass:string"

  @function str-insert($string, $insert, $index)
    // Избегайте создания новых строк, если нам это не нужно.
    @if string.length($string) == 0
      @return $insert


    $before: string.slice($string, 0, $index)
    $after: string.slice($string, $index)
    @return $before + $insert + $after
<% end %>

## Прочие функции

Помимо пользовательских функций, Sass предоставляет обширную [базовую библиотеку][core library] встроенных функций, которые всегда доступны для использования.
Реализации Sass также позволяют определять [пользовательские функции][custom functions] на основном языке.
И, конечно же, вы всегда можете вызвать [простые функции CSS][plain CSS functions] (даже те, которые имеют [странный синтаксис][weird syntax]).

[core library]: ../modules
[custom functions]: ../js-api#functions
[plain CSS functions]: #plain-css-functions
[weird syntax]: ../syntax/special-functions

### Простые функции CSS

Любой вызов функции, который не является ни определяемой пользователем, ни [встроенной](../modules) функцией, компилируется в обычную функцию CSS (если только он не использует [синтаксис аргументов Sass](../at-rules/function#arguments)).
Аргументы будут скомпилированы в CSS и включены в вызов функции как есть.
Это гарантирует, что Sass поддерживает все функции CSS без необходимости выпускать новые версии каждый раз, когда добавляется новая.

<% example(autogen_css: false) do %>
  @debug var(--main-bg-color); // var(--main-bg-color)

  $primary: #f2ece4;
  $accent: #e1d7d2;
  @debug radial-gradient($primary, $accent); // radial-gradient(#f2ece4, #e1d7d2)
  ===
  @debug var(--main-bg-color)  // var(--main-bg-color)

  $primary: #f2ece4
  $accent: #e1d7d2
  @debug radial-gradient($primary, $accent)  // radial-gradient(#f2ece4, #e1d7d2)
<% end %>

<% heads_up do %>
  Поскольку любая неизвестная функция будет скомпилирована в CSS, ее легко пропустить, если вы напечатаете опечатку в имени функции.
  Подумайте о запуске [CSS линтера][CSS linter] для вывода вашей таблицы стилей, чтобы получать уведомления, когда это произойдет!

  [CSS linter]: https://stylelint.io/
<% end %>

<% fun_fact do %>
  Некоторые функции CSS, такие как `calc()` и `element()`, имеют необычный синтаксис.
  Sass [специально анализирует эти функции][parses these functions specially] как [строки без кавычек][unquoted strings].

  [parses these functions specially]: ../syntax/special-functions
  [unquoted strings]: ../values/strings#unquoted
<% end %>
